-- rojo-script runtime 'lua-sandbox'
getfenv(0).sourceMap = {}
local _2d2735c1343ce0caf305eb857559723a = Instance.new("Model")
_2d2735c1343ce0caf305eb857559723a.Name = "DataModel"
local _e8789e6086b9ca7a8a6a09bba70745dc = Instance.new("Model")
_e8789e6086b9ca7a8a6a09bba70745dc.Name = "roblox-rs"
_e8789e6086b9ca7a8a6a09bba70745dc.Parent = _2d2735c1343ce0caf305eb857559723a
local _275170f7ba107d65bf3497952d51abbe = Instance.new("Script")
_275170f7ba107d65bf3497952d51abbe.Name = "RS"
sourceMap[_275170f7ba107d65bf3497952d51abbe] = [===[ local rt = require(script.runtime)
local wasm, memory, util
local createPointer, getPointer, dropPointer, invokeOnce, readString, writeStringReturn

local function wrapConstructorNumber(constructor)
	return function(...)
		return createPointer(constructor(...))
	end
end

local function wrapConstructorString(constructor)
	return function(addr, len)
		return createPointer(constructor(addr, len))
	end
end

local env = {
	-- lbiraries
	lib_task_delay = function(delay, stack, fn_ptr)
		task.delay(delay, invokeOnce, stack, fn_ptr)
	end,

	lib_task_defer = function(stack, fn_ptr)
		task.defer(invokeOnce, stack, fn_ptr)
	end,

	lib_task_spawn = function(stack, fn_ptr)
		task.spawn(invokeOnce, stack, fn_ptr)
	end,

	lib_task_wait = function(delay)
		task.wait(delay)
	end,

	-- pointers
	drop_pointer = function(ptr)
		dropPointer(ptr)
	end,

	clone_pointer = function(ptr)
		return createPointer(getPointer(ptr))
	end,

	-- Instances

	get_game = function()
		return createPointer(game)
	end,

	-- testing/logging
	print = function(addr, len)
		task.defer(print, readString(addr, len))
	end,
	error = function(addr, len)
		error(readString(addr, len))
	end,
}

local abi = require(script.abi)
for i, v in pairs(abi.ffi) do
	env[i] = v
end

wasm = require(script.wasm)({
	env = {
		func_list = env,
	},
})

memory = wasm.memory_list.memory
util = require(script.util)(rt, wasm, memory)

abi.load(wasm, rt, util)

task.wait()

createPointer, getPointer, dropPointer, invokeOnce, readString =
	util.createPointer, util.getPointer, util.dropPointer, util.invokeOnce, util.readString

print("start wasm")

local start = os.clock()
wasm.func_list.hook()
wasm.func_list.main()
print("Wasm took " .. (os.clock() - start) * 1000 .. " ms to execute")
 ]===]
_275170f7ba107d65bf3497952d51abbe.Parent = _e8789e6086b9ca7a8a6a09bba70745dc
local _35d6e87fc6b6e6c2aac485485f85febc = Instance.new("ModuleScript")
_35d6e87fc6b6e6c2aac485485f85febc.Name = "abi"
sourceMap[_35d6e87fc6b6e6c2aac485485f85febc] = [===[ local abi = { ffi = {} };
local getPointer, createPointer, memory, storeU8, storeU32, storeFloat, loadU8, loadU32, loadFloat, loadString, allocString, allocVec, functions, invokeFunction, dropFunctionRef;
local connections = {};
local function createConnection(stack, vtable, connection)
	local id = createPointer(connection);
	connections[id] = { stack, vtable };
	return id;
end
function abi.load(wasm, rt, util)
	getPointer, createPointer, memory, storeU8, storeU32, storeFloat, loadU8, loadU32, loadFloat, loadString, allocString, allocVec, functions, invokeFunction, dropFunctionRef = util.getPointer, util.createPointer, wasm.memory_list.memory, rt.store.i32_n8, rt.store.i32, rt.store.f64, rt.load.i32_u8, rt.load.i32, rt.load.f64, rt.load.string, wasm.func_list.__heap_alloc_string, wasm.func_list.__heap_alloc_vec, wasm.table_list.__indirect_function_table, util.invokeFunction, util.dropFunctionRef;
end
function abi.ffi.disconnect_connection(connection)
	local func = connections[connection];
	if not func then return end

	getPointer(connection):Disconnect();
	dropFunctionRef(func[1], func[2]);
	connections[connection] = nil;
end
function abi.ffi.property_getter_instance_archivable(self)
	local result_0 = getPointer(self).Archivable;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_instance_archivable_set_archivable(self, value)
	getPointer(self).Archivable = value == 1;
end
function abi.ffi.property_getter_instance_class_name(self)
	local result_0 = getPointer(self).ClassName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_instance_name(self)
	local result_0 = getPointer(self).Name;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_instance_name_set_name(self, value_addr, value_len)
	getPointer(self).Name = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_instance_clear_all_children(self)
	getPointer(self):ClearAllChildren()
end
function abi.ffi.method_instance_clone_fn_clone(self)
	local result_0 = getPointer(self):Clone();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_destroy(self)
	getPointer(self):Destroy()
end
function abi.ffi.method_instance_find_first_ancestor(self, name_addr, name_len)
	local result_0 = getPointer(self):FindFirstAncestor(loadString(memory, name_addr, name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_ancestor_of_class(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):FindFirstAncestorOfClass(loadString(memory, class_name_addr, class_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_ancestor_which_is_a(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):FindFirstAncestorWhichIsA(loadString(memory, class_name_addr, class_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_child(self, name_addr, name_len, recursive)
	local result_0 = getPointer(self):FindFirstChild(loadString(memory, name_addr, name_len), recursive == 1);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_child_of_class(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):FindFirstChildOfClass(loadString(memory, class_name_addr, class_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_child_which_is_a(self, class_name_addr, class_name_len, recursive)
	local result_0 = getPointer(self):FindFirstChildWhichIsA(loadString(memory, class_name_addr, class_name_len), recursive == 1);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_find_first_descendant(self, name_addr, name_len)
	local result_0 = getPointer(self):FindFirstDescendant(loadString(memory, name_addr, name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_get_actor(self)
	local result_0 = getPointer(self):GetActor();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_instance_get_full_name(self)
	local result_0 = getPointer(self):GetFullName();
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_instance_is_a(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):IsA(loadString(memory, class_name_addr, class_name_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_instance_is_ancestor_of(self, descendant)
	local result_0 = getPointer(self):IsAncestorOf(getPointer(descendant));
	return result_0 and 1 or 0;
end
function abi.ffi.method_instance_is_descendant_of(self, ancestor)
	local result_0 = getPointer(self):IsDescendantOf(getPointer(ancestor));
	return result_0 and 1 or 0;
end
function abi.ffi.method_instance_wait_for_child(self, child_name_addr, child_name_len, time_out)
	local result_0 = getPointer(self):WaitForChild(loadString(memory, child_name_addr, child_name_len), time_out);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_instance_ancestry_changed_on_ancestry_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).AncestryChanged:Connect(function(child, parent)
		local child_optional, child_optional_0 = 0, 0;
		if (child ~= nil) then
			child_optional, child_optional_0 = 1, createPointer(child);
		end
		local parent_optional, parent_optional_0 = 0, 0;
		if (parent ~= nil) then
			parent_optional, parent_optional_0 = 1, createPointer(parent);
		end
		invokeFunction(callback_data, callback_vtable, child_optional, child_optional_0, parent_optional, parent_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_attribute_changed_on_attribute_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).AttributeChanged:Connect(function(attribute)
		local attribute_len = #attribute;
		local attribute_content = allocString(attribute_len);
		for i = 1, attribute_len do
			storeU8(memory, attribute_content + (i - 1), string.byte(attribute:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, attribute_content, attribute_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_child_added_on_child_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ChildAdded:Connect(function(child)
		local child_optional, child_optional_0 = 0, 0;
		if (child ~= nil) then
			child_optional, child_optional_0 = 1, createPointer(child);
		end
		invokeFunction(callback_data, callback_vtable, child_optional, child_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_child_removed_on_child_removed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ChildRemoved:Connect(function(child)
		local child_optional, child_optional_0 = 0, 0;
		if (child ~= nil) then
			child_optional, child_optional_0 = 1, createPointer(child);
		end
		invokeFunction(callback_data, callback_vtable, child_optional, child_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_descendant_added_on_descendant_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DescendantAdded:Connect(function(descendant)
		local descendant_optional, descendant_optional_0 = 0, 0;
		if (descendant ~= nil) then
			descendant_optional, descendant_optional_0 = 1, createPointer(descendant);
		end
		invokeFunction(callback_data, callback_vtable, descendant_optional, descendant_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_descendant_removing_on_descendant_removing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DescendantRemoving:Connect(function(descendant)
		local descendant_optional, descendant_optional_0 = 0, 0;
		if (descendant ~= nil) then
			descendant_optional, descendant_optional_0 = 1, createPointer(descendant);
		end
		invokeFunction(callback_data, callback_vtable, descendant_optional, descendant_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_instance_destroying_on_destroying(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Destroying:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_setter_instance_parent_set_parent(self, value_kind, value)
	local value_optional;
	if (value_kind == 1) then
		value_optional = getPointer(value);
	end
	getPointer(self).Parent = value_optional;
end
function abi.ffi.event_instance_changed_on_instance_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(property)
		local property_len = #property;
		local property_content = allocString(property_len);
		for i = 1, property_len do
			storeU8(memory, property_content + (i - 1), string.byte(property:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, property_content, property_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_accoutrement_attachment_forward(self)
	local result_0 = getPointer(self).AttachmentForward;
	return createPointer(result_0);
end
function abi.ffi.property_setter_accoutrement_attachment_forward_set_attachment_forward(self, value)
	getPointer(self).AttachmentForward = getPointer(value);
end
function abi.ffi.property_getter_accoutrement_attachment_point(self)
	local result_0 = getPointer(self).AttachmentPoint;
	return createPointer(result_0);
end
function abi.ffi.property_setter_accoutrement_attachment_point_set_attachment_point(self, value)
	getPointer(self).AttachmentPoint = getPointer(value);
end
function abi.ffi.property_getter_accoutrement_attachment_pos(self)
	local result_0 = getPointer(self).AttachmentPos;
	return createPointer(result_0);
end
function abi.ffi.property_setter_accoutrement_attachment_pos_set_attachment_pos(self, value)
	getPointer(self).AttachmentPos = getPointer(value);
end
function abi.ffi.property_getter_accoutrement_attachment_right(self)
	local result_0 = getPointer(self).AttachmentRight;
	return createPointer(result_0);
end
function abi.ffi.property_setter_accoutrement_attachment_right_set_attachment_right(self, value)
	getPointer(self).AttachmentRight = getPointer(value);
end
function abi.ffi.property_getter_accoutrement_attachment_up(self)
	local result_0 = getPointer(self).AttachmentUp;
	return createPointer(result_0);
end
function abi.ffi.property_setter_accoutrement_attachment_up_set_attachment_up(self, value)
	getPointer(self).AttachmentUp = getPointer(value);
end
function abi.ffi.property_getter_accessory_accessory_type(self)
	local result_0 = getPointer(self).AccessoryType;
	return result_0;
end
function abi.ffi.property_setter_accessory_accessory_type_set_accessory_type(self, value)
	getPointer(self).AccessoryType = value;
end
function abi.ffi.property_getter_ad_portal_portal_status(self)
	local result_0 = getPointer(self).PortalStatus;
	return result_0;
end
function abi.ffi.property_getter_ad_portal_portal_type(self)
	local result_0 = getPointer(self).PortalType;
	return result_0;
end
function abi.ffi.property_setter_ad_portal_portal_type_set_portal_type(self, value)
	getPointer(self).PortalType = value;
end
function abi.ffi.property_getter_animation_animation_id(self)
	local result_0 = getPointer(self).AnimationId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_animation_animation_id_set_animation_id(self, value)
	getPointer(self).AnimationId = getPointer(value);
end
function abi.ffi.property_getter_animation_clip_loop(self)
	local result_0 = getPointer(self).Loop;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_animation_clip_loop_set_loop(self, value)
	getPointer(self).Loop = value == 1;
end
function abi.ffi.property_getter_animation_clip_priority(self)
	local result_0 = getPointer(self).Priority;
	return result_0;
end
function abi.ffi.property_setter_animation_clip_priority_set_priority(self, value)
	getPointer(self).Priority = value;
end
function abi.ffi.method_keyframe_sequence_add_keyframe(self, keyframe)
	getPointer(self):AddKeyframe(getPointer(keyframe))
end
function abi.ffi.method_keyframe_sequence_remove_keyframe(self, keyframe)
	getPointer(self):RemoveKeyframe(getPointer(keyframe))
end
function abi.ffi.method_animation_clip_provider_register_active_animation_clip(self, animation_clip)
	local result_0 = getPointer(self):RegisterActiveAnimationClip(getPointer(animation_clip));
	return createPointer(result_0);
end
function abi.ffi.method_animation_clip_provider_register_animation_clip(self, animation_clip)
	local result_0 = getPointer(self):RegisterAnimationClip(getPointer(animation_clip));
	return createPointer(result_0);
end
function abi.ffi.method_animation_clip_provider_get_animation_clip_async(self, asset_id)
	local result_0 = getPointer(self):GetAnimationClipAsync(getPointer(asset_id));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_animation_clip_provider_get_animations(self, user_id)
	local result_0 = getPointer(self):GetAnimations(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_animation_stream_track_is_playing(self)
	local result_0 = getPointer(self).IsPlaying;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_animation_stream_track_priority(self)
	local result_0 = getPointer(self).Priority;
	return result_0;
end
function abi.ffi.property_setter_animation_stream_track_priority_set_priority(self, value)
	getPointer(self).Priority = value;
end
function abi.ffi.property_getter_animation_stream_track_weight_current(self)
	local result_0 = getPointer(self).WeightCurrent;
	return result_0;
end
function abi.ffi.property_getter_animation_stream_track_weight_target(self)
	local result_0 = getPointer(self).WeightTarget;
	return result_0;
end
function abi.ffi.property_getter_animation_track_animation(self)
	local result_0 = getPointer(self).Animation;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_animation_track_is_playing(self)
	local result_0 = getPointer(self).IsPlaying;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_animation_track_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.property_getter_animation_track_looped(self)
	local result_0 = getPointer(self).Looped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_animation_track_looped_set_looped(self, value)
	getPointer(self).Looped = value == 1;
end
function abi.ffi.property_getter_animation_track_priority(self)
	local result_0 = getPointer(self).Priority;
	return result_0;
end
function abi.ffi.property_setter_animation_track_priority_set_priority(self, value)
	getPointer(self).Priority = value;
end
function abi.ffi.property_getter_animation_track_speed(self)
	local result_0 = getPointer(self).Speed;
	return result_0;
end
function abi.ffi.property_getter_animation_track_time_position(self)
	local result_0 = getPointer(self).TimePosition;
	return result_0;
end
function abi.ffi.property_setter_animation_track_time_position_set_time_position(self, value)
	getPointer(self).TimePosition = value;
end
function abi.ffi.property_getter_animation_track_weight_current(self)
	local result_0 = getPointer(self).WeightCurrent;
	return result_0;
end
function abi.ffi.property_getter_animation_track_weight_target(self)
	local result_0 = getPointer(self).WeightTarget;
	return result_0;
end
function abi.ffi.method_animation_track_adjust_speed(self, speed)
	getPointer(self):AdjustSpeed(speed)
end
function abi.ffi.method_animation_track_adjust_weight(self, weight, fade_time)
	getPointer(self):AdjustWeight(weight, fade_time)
end
function abi.ffi.method_animation_track_get_time_of_keyframe(self, keyframe_name_addr, keyframe_name_len)
	local result_0 = getPointer(self):GetTimeOfKeyframe(loadString(memory, keyframe_name_addr, keyframe_name_len));
	return result_0;
end
function abi.ffi.method_animation_track_play(self, fade_time, weight, speed)
	getPointer(self):Play(fade_time, weight, speed)
end
function abi.ffi.method_animation_track_stop(self, fade_time)
	getPointer(self):Stop(fade_time)
end
function abi.ffi.event_animation_track_did_loop_on_did_loop(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DidLoop:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_animation_track_keyframe_reached_on_keyframe_reached(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).KeyframeReached:Connect(function(keyframe_name)
		local keyframe_name_len = #keyframe_name;
		local keyframe_name_content = allocString(keyframe_name_len);
		for i = 1, keyframe_name_len do
			storeU8(memory, keyframe_name_content + (i - 1), string.byte(keyframe_name:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, keyframe_name_content, keyframe_name_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_animation_track_stopped_on_stopped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Stopped:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_animator_prefer_lod_enabled(self)
	local result_0 = getPointer(self).PreferLodEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_animator_prefer_lod_enabled_set_prefer_lod_enabled(self, value)
	getPointer(self).PreferLodEnabled = value == 1;
end
function abi.ffi.method_animator_load_animation(self, animation)
	local result_0 = getPointer(self):LoadAnimation(getPointer(animation));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_animator_animation_played_on_animation_played(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).AnimationPlayed:Connect(function(animation_track)
		local animation_track_optional, animation_track_optional_0 = 0, 0;
		if (animation_track ~= nil) then
			animation_track_optional, animation_track_optional_0 = 1, createPointer(animation_track);
		end
		invokeFunction(callback_data, callback_vtable, animation_track_optional, animation_track_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_asset_import_session_upload_progress_on_upload_progress(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).UploadProgress:Connect(function(progress_ratio)
		invokeFunction(callback_data, callback_vtable, progress_ratio)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_asset_patch_settings_content_id(self)
	local result_0 = getPointer(self).ContentId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_asset_patch_settings_content_id_set_content_id(self, value_addr, value_len)
	getPointer(self).ContentId = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_asset_patch_settings_output_path(self)
	local result_0 = getPointer(self).OutputPath;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_asset_patch_settings_output_path_set_output_path(self, value_addr, value_len)
	getPointer(self).OutputPath = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_asset_patch_settings_patch_id(self)
	local result_0 = getPointer(self).PatchId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_asset_patch_settings_patch_id_set_patch_id(self, value_addr, value_len)
	getPointer(self).PatchId = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_asset_service_create_place_async(self, place_name_addr, place_name_len, template_place_id, description_addr, description_len)
	local result_0 = getPointer(self):CreatePlaceAsync(loadString(memory, place_name_addr, place_name_len), template_place_id, loadString(memory, description_addr, description_len));
	return result_0;
end
function abi.ffi.method_asset_service_create_place_in_player_inventory_async(self, player, place_name_addr, place_name_len, template_place_id, description_addr, description_len)
	local result_0 = getPointer(self):CreatePlaceInPlayerInventoryAsync(getPointer(player), loadString(memory, place_name_addr, place_name_len), template_place_id, loadString(memory, description_addr, description_len));
	return result_0;
end
function abi.ffi.method_asset_service_get_game_places_async(self)
	local result_0 = getPointer(self):GetGamePlacesAsync();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_asset_service_save_place_async(self)
	getPointer(self):SavePlaceAsync()
end
function abi.ffi.property_getter_atmosphere_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_atmosphere_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_atmosphere_decay(self)
	local result_0 = getPointer(self).Decay;
	return createPointer(result_0);
end
function abi.ffi.property_setter_atmosphere_decay_set_decay(self, value)
	getPointer(self).Decay = getPointer(value);
end
function abi.ffi.property_getter_atmosphere_density(self)
	local result_0 = getPointer(self).Density;
	return result_0;
end
function abi.ffi.property_setter_atmosphere_density_set_density(self, value)
	getPointer(self).Density = value;
end
function abi.ffi.property_getter_atmosphere_glare(self)
	local result_0 = getPointer(self).Glare;
	return result_0;
end
function abi.ffi.property_setter_atmosphere_glare_set_glare(self, value)
	getPointer(self).Glare = value;
end
function abi.ffi.property_getter_atmosphere_haze(self)
	local result_0 = getPointer(self).Haze;
	return result_0;
end
function abi.ffi.property_setter_atmosphere_haze_set_haze(self, value)
	getPointer(self).Haze = value;
end
function abi.ffi.property_getter_atmosphere_offset(self)
	local result_0 = getPointer(self).Offset;
	return result_0;
end
function abi.ffi.property_setter_atmosphere_offset_set_offset(self, value)
	getPointer(self).Offset = value;
end
function abi.ffi.property_getter_attachment_axis(self)
	local result_0 = getPointer(self).Axis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_axis_set_axis(self, value)
	getPointer(self).Axis = getPointer(value);
end
function abi.ffi.property_getter_attachment_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_attachment_orientation(self)
	local result_0 = getPointer(self).Orientation;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_orientation_set_orientation(self, value)
	getPointer(self).Orientation = getPointer(value);
end
function abi.ffi.property_getter_attachment_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_attachment_secondary_axis(self)
	local result_0 = getPointer(self).SecondaryAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_secondary_axis_set_secondary_axis(self, value)
	getPointer(self).SecondaryAxis = getPointer(value);
end
function abi.ffi.property_getter_attachment_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_attachment_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.property_getter_attachment_world_axis(self)
	local result_0 = getPointer(self).WorldAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_world_axis_set_world_axis(self, value)
	getPointer(self).WorldAxis = getPointer(value);
end
function abi.ffi.property_getter_attachment_world_c_frame(self)
	local result_0 = getPointer(self).WorldCFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_world_c_frame_set_world_c_frame(self, value)
	getPointer(self).WorldCFrame = getPointer(value);
end
function abi.ffi.property_getter_attachment_world_orientation(self)
	local result_0 = getPointer(self).WorldOrientation;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_world_orientation_set_world_orientation(self, value)
	getPointer(self).WorldOrientation = getPointer(value);
end
function abi.ffi.property_getter_attachment_world_position(self)
	local result_0 = getPointer(self).WorldPosition;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_world_position_set_world_position(self, value)
	getPointer(self).WorldPosition = getPointer(value);
end
function abi.ffi.property_getter_attachment_world_secondary_axis(self)
	local result_0 = getPointer(self).WorldSecondaryAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_attachment_world_secondary_axis_set_world_secondary_axis(self, value)
	getPointer(self).WorldSecondaryAxis = getPointer(value);
end
function abi.ffi.property_getter_bone_transform(self)
	local result_0 = getPointer(self).Transform;
	return createPointer(result_0);
end
function abi.ffi.property_setter_bone_transform_set_transform(self, value)
	getPointer(self).Transform = getPointer(value);
end
function abi.ffi.property_getter_bone_transformed_c_frame(self)
	local result_0 = getPointer(self).TransformedCFrame;
	return createPointer(result_0);
end
function abi.ffi.property_getter_bone_transformed_world_c_frame(self)
	local result_0 = getPointer(self).TransformedWorldCFrame;
	return createPointer(result_0);
end
function abi.ffi.method_avatar_editor_service_get_accessory_type(self, avatar_asset_type)
	local result_0 = getPointer(self):GetAccessoryType(avatar_asset_type);
	return result_0;
end
function abi.ffi.method_avatar_editor_service_prompt_allow_inventory_read_access(self)
	getPointer(self):PromptAllowInventoryReadAccess()
end
function abi.ffi.method_avatar_editor_service_prompt_create_outfit(self, outfit, rig_type)
	getPointer(self):PromptCreateOutfit(getPointer(outfit), rig_type)
end
function abi.ffi.method_avatar_editor_service_prompt_delete_outfit(self, outfit_id)
	getPointer(self):PromptDeleteOutfit(outfit_id)
end
function abi.ffi.method_avatar_editor_service_prompt_rename_outfit(self, outfit_id)
	getPointer(self):PromptRenameOutfit(outfit_id)
end
function abi.ffi.method_avatar_editor_service_prompt_save_avatar(self, humanoid_description, rig_type)
	getPointer(self):PromptSaveAvatar(getPointer(humanoid_description), rig_type)
end
function abi.ffi.method_avatar_editor_service_prompt_set_favorite(self, item_id, item_type, should_favorite)
	getPointer(self):PromptSetFavorite(item_id, item_type, should_favorite == 1)
end
function abi.ffi.method_avatar_editor_service_prompt_update_outfit(self, outfit_id, updated_outfit, rig_type)
	getPointer(self):PromptUpdateOutfit(outfit_id, getPointer(updated_outfit), rig_type)
end
function abi.ffi.method_avatar_editor_service_check_apply_default_clothing(self, humanoid_description)
	local result_0 = getPointer(self):CheckApplyDefaultClothing(getPointer(humanoid_description));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_avatar_editor_service_conform_to_avatar_rules(self, humanoid_description)
	local result_0 = getPointer(self):ConformToAvatarRules(getPointer(humanoid_description));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_avatar_editor_service_get_favorite(self, item_id, item_type)
	local result_0 = getPointer(self):GetFavorite(item_id, item_type);
	return result_0 and 1 or 0;
end
function abi.ffi.method_avatar_editor_service_get_outfits(self, outfit_source, outfit_type)
	local result_0 = getPointer(self):GetOutfits(outfit_source, outfit_type);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_avatar_editor_service_search_catalog(self, search_parameters)
	local result_0 = getPointer(self):SearchCatalog(getPointer(search_parameters));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_avatar_editor_service_prompt_allow_inventory_read_access_completed_on_prompt_allow_inventory_read_access_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptAllowInventoryReadAccessCompleted:Connect(function(result)
		invokeFunction(callback_data, callback_vtable, result)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_avatar_editor_service_prompt_delete_outfit_completed_on_prompt_delete_outfit_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptDeleteOutfitCompleted:Connect(function(result)
		invokeFunction(callback_data, callback_vtable, result)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_avatar_editor_service_prompt_rename_outfit_completed_on_prompt_rename_outfit_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptRenameOutfitCompleted:Connect(function(result)
		invokeFunction(callback_data, callback_vtable, result)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_avatar_editor_service_prompt_save_avatar_completed_on_prompt_save_avatar_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptSaveAvatarCompleted:Connect(function(result, humanoid_description)
		local humanoid_description_optional, humanoid_description_optional_0 = 0, 0;
		if (humanoid_description ~= nil) then
			humanoid_description_optional, humanoid_description_optional_0 = 1, createPointer(humanoid_description);
		end
		invokeFunction(callback_data, callback_vtable, result, humanoid_description_optional, humanoid_description_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_avatar_editor_service_prompt_set_favorite_completed_on_prompt_set_favorite_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptSetFavoriteCompleted:Connect(function(result)
		invokeFunction(callback_data, callback_vtable, result)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_avatar_editor_service_prompt_update_outfit_completed_on_prompt_update_outfit_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptUpdateOutfitCompleted:Connect(function(result)
		invokeFunction(callback_data, callback_vtable, result)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_backpack_item_texture_id(self)
	local result_0 = getPointer(self).TextureId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_backpack_item_texture_id_set_texture_id(self, value)
	getPointer(self).TextureId = getPointer(value);
end
function abi.ffi.property_getter_tool_can_be_dropped(self)
	local result_0 = getPointer(self).CanBeDropped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_tool_can_be_dropped_set_can_be_dropped(self, value)
	getPointer(self).CanBeDropped = value == 1;
end
function abi.ffi.property_getter_tool_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_tool_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_tool_grip(self)
	local result_0 = getPointer(self).Grip;
	return createPointer(result_0);
end
function abi.ffi.property_setter_tool_grip_set_grip(self, value)
	getPointer(self).Grip = getPointer(value);
end
function abi.ffi.property_getter_tool_grip_forward(self)
	local result_0 = getPointer(self).GripForward;
	return createPointer(result_0);
end
function abi.ffi.property_setter_tool_grip_forward_set_grip_forward(self, value)
	getPointer(self).GripForward = getPointer(value);
end
function abi.ffi.property_getter_tool_grip_pos(self)
	local result_0 = getPointer(self).GripPos;
	return createPointer(result_0);
end
function abi.ffi.property_setter_tool_grip_pos_set_grip_pos(self, value)
	getPointer(self).GripPos = getPointer(value);
end
function abi.ffi.property_getter_tool_grip_right(self)
	local result_0 = getPointer(self).GripRight;
	return createPointer(result_0);
end
function abi.ffi.property_setter_tool_grip_right_set_grip_right(self, value)
	getPointer(self).GripRight = getPointer(value);
end
function abi.ffi.property_getter_tool_grip_up(self)
	local result_0 = getPointer(self).GripUp;
	return createPointer(result_0);
end
function abi.ffi.property_setter_tool_grip_up_set_grip_up(self, value)
	getPointer(self).GripUp = getPointer(value);
end
function abi.ffi.property_getter_tool_manual_activation_only(self)
	local result_0 = getPointer(self).ManualActivationOnly;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_tool_manual_activation_only_set_manual_activation_only(self, value)
	getPointer(self).ManualActivationOnly = value == 1;
end
function abi.ffi.property_getter_tool_requires_handle(self)
	local result_0 = getPointer(self).RequiresHandle;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_tool_requires_handle_set_requires_handle(self, value)
	getPointer(self).RequiresHandle = value == 1;
end
function abi.ffi.property_getter_tool_tool_tip(self)
	local result_0 = getPointer(self).ToolTip;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_tool_tool_tip_set_tool_tip(self, value_addr, value_len)
	getPointer(self).ToolTip = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_tool_activate(self)
	getPointer(self):Activate()
end
function abi.ffi.method_tool_deactivate(self)
	getPointer(self):Deactivate()
end
function abi.ffi.event_tool_activated_on_activated(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Activated:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_tool_deactivated_on_deactivated(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Deactivated:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_tool_equipped_on_equipped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Equipped:Connect(function(mouse)
		local mouse_optional, mouse_optional_0 = 0, 0;
		if (mouse ~= nil) then
			mouse_optional, mouse_optional_0 = 1, createPointer(mouse);
		end
		invokeFunction(callback_data, callback_vtable, mouse_optional, mouse_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_tool_unequipped_on_unequipped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Unequipped:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_badge_service_award_badge(self, user_id, badge_id)
	local result_0 = getPointer(self):AwardBadge(user_id, badge_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_badge_service_user_has_badge_async(self, user_id, badge_id)
	local result_0 = getPointer(self):UserHasBadgeAsync(user_id, badge_id);
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_player_gui_current_screen_orientation(self)
	local result_0 = getPointer(self).CurrentScreenOrientation;
	return result_0;
end
function abi.ffi.property_getter_player_gui_screen_orientation(self)
	local result_0 = getPointer(self).ScreenOrientation;
	return result_0;
end
function abi.ffi.property_setter_player_gui_screen_orientation_set_screen_orientation(self, value)
	getPointer(self).ScreenOrientation = value;
end
function abi.ffi.property_getter_player_gui_selection_image_object(self)
	local result_0 = getPointer(self).SelectionImageObject;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_player_gui_selection_image_object_set_selection_image_object(self, value)
	getPointer(self).SelectionImageObject = getPointer(value);
end
function abi.ffi.property_getter_starter_gui_screen_orientation(self)
	local result_0 = getPointer(self).ScreenOrientation;
	return result_0;
end
function abi.ffi.property_setter_starter_gui_screen_orientation_set_screen_orientation(self, value)
	getPointer(self).ScreenOrientation = value;
end
function abi.ffi.property_getter_starter_gui_show_development_gui(self)
	local result_0 = getPointer(self).ShowDevelopmentGui;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_gui_show_development_gui_set_show_development_gui(self, value)
	getPointer(self).ShowDevelopmentGui = value == 1;
end
function abi.ffi.method_starter_gui_get_core_gui_enabled(self, core_gui_type)
	local result_0 = getPointer(self):GetCoreGuiEnabled(core_gui_type);
	return result_0 and 1 or 0;
end
function abi.ffi.method_starter_gui_set_core_gui_enabled(self, core_gui_type, enabled)
	getPointer(self):SetCoreGuiEnabled(core_gui_type, enabled == 1)
end
function abi.ffi.property_getter_base_wrap_cage_mesh_id(self)
	local result_0 = getPointer(self).CageMeshId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_wrap_cage_mesh_id_set_cage_mesh_id(self, value)
	getPointer(self).CageMeshId = getPointer(value);
end
function abi.ffi.property_getter_base_wrap_cage_origin(self)
	local result_0 = getPointer(self).CageOrigin;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_wrap_cage_origin_set_cage_origin(self, value)
	getPointer(self).CageOrigin = getPointer(value);
end
function abi.ffi.property_getter_base_wrap_cage_origin_world(self)
	local result_0 = getPointer(self).CageOriginWorld;
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_wrap_import_origin(self)
	local result_0 = getPointer(self).ImportOrigin;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_wrap_import_origin_set_import_origin(self, value)
	getPointer(self).ImportOrigin = getPointer(value);
end
function abi.ffi.property_getter_base_wrap_import_origin_world(self)
	local result_0 = getPointer(self).ImportOriginWorld;
	return createPointer(result_0);
end
function abi.ffi.property_getter_wrap_layer_auto_skin(self)
	local result_0 = getPointer(self).AutoSkin;
	return result_0;
end
function abi.ffi.property_setter_wrap_layer_auto_skin_set_auto_skin(self, value)
	getPointer(self).AutoSkin = value;
end
function abi.ffi.property_getter_wrap_layer_bind_offset(self)
	local result_0 = getPointer(self).BindOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_wrap_layer_bind_offset_set_bind_offset(self, value)
	getPointer(self).BindOffset = getPointer(value);
end
function abi.ffi.property_getter_wrap_layer_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_wrap_layer_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_wrap_layer_order(self)
	local result_0 = getPointer(self).Order;
	return result_0;
end
function abi.ffi.property_setter_wrap_layer_order_set_order(self, value)
	getPointer(self).Order = value;
end
function abi.ffi.property_getter_wrap_layer_puffiness(self)
	local result_0 = getPointer(self).Puffiness;
	return result_0;
end
function abi.ffi.property_setter_wrap_layer_puffiness_set_puffiness(self, value)
	getPointer(self).Puffiness = value;
end
function abi.ffi.property_getter_wrap_layer_reference_mesh_id(self)
	local result_0 = getPointer(self).ReferenceMeshId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_wrap_layer_reference_mesh_id_set_reference_mesh_id(self, value)
	getPointer(self).ReferenceMeshId = getPointer(value);
end
function abi.ffi.property_getter_wrap_layer_reference_origin(self)
	local result_0 = getPointer(self).ReferenceOrigin;
	return createPointer(result_0);
end
function abi.ffi.property_setter_wrap_layer_reference_origin_set_reference_origin(self, value)
	getPointer(self).ReferenceOrigin = getPointer(value);
end
function abi.ffi.property_getter_wrap_layer_reference_origin_world(self)
	local result_0 = getPointer(self).ReferenceOriginWorld;
	return createPointer(result_0);
end
function abi.ffi.property_getter_wrap_layer_shrink_factor(self)
	local result_0 = getPointer(self).ShrinkFactor;
	return result_0;
end
function abi.ffi.property_setter_wrap_layer_shrink_factor_set_shrink_factor(self, value)
	getPointer(self).ShrinkFactor = value;
end
function abi.ffi.property_getter_wrap_target_stiffness(self)
	local result_0 = getPointer(self).Stiffness;
	return result_0;
end
function abi.ffi.property_setter_wrap_target_stiffness_set_stiffness(self, value)
	getPointer(self).Stiffness = value;
end
function abi.ffi.property_getter_beam_attachment_0(self)
	local result_0 = getPointer(self).Attachment0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_beam_attachment_0_set_attachment_0(self, value)
	getPointer(self).Attachment0 = getPointer(value);
end
function abi.ffi.property_getter_beam_attachment_1(self)
	local result_0 = getPointer(self).Attachment1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_beam_attachment_1_set_attachment_1(self, value)
	getPointer(self).Attachment1 = getPointer(value);
end
function abi.ffi.property_getter_beam_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_beam_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_beam_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_beam_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_beam_curve_size_0(self)
	local result_0 = getPointer(self).CurveSize0;
	return result_0;
end
function abi.ffi.property_setter_beam_curve_size_0_set_curve_size_0(self, value)
	getPointer(self).CurveSize0 = value;
end
function abi.ffi.property_getter_beam_curve_size_1(self)
	local result_0 = getPointer(self).CurveSize1;
	return result_0;
end
function abi.ffi.property_setter_beam_curve_size_1_set_curve_size_1(self, value)
	getPointer(self).CurveSize1 = value;
end
function abi.ffi.property_getter_beam_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_beam_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_beam_face_camera(self)
	local result_0 = getPointer(self).FaceCamera;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_beam_face_camera_set_face_camera(self, value)
	getPointer(self).FaceCamera = value == 1;
end
function abi.ffi.property_getter_beam_light_emission(self)
	local result_0 = getPointer(self).LightEmission;
	return result_0;
end
function abi.ffi.property_setter_beam_light_emission_set_light_emission(self, value)
	getPointer(self).LightEmission = value;
end
function abi.ffi.property_getter_beam_light_influence(self)
	local result_0 = getPointer(self).LightInfluence;
	return result_0;
end
function abi.ffi.property_setter_beam_light_influence_set_light_influence(self, value)
	getPointer(self).LightInfluence = value;
end
function abi.ffi.property_getter_beam_segments(self)
	local result_0 = getPointer(self).Segments;
	return result_0;
end
function abi.ffi.property_setter_beam_segments_set_segments(self, value)
	getPointer(self).Segments = value;
end
function abi.ffi.property_getter_beam_texture(self)
	local result_0 = getPointer(self).Texture;
	return createPointer(result_0);
end
function abi.ffi.property_setter_beam_texture_set_texture(self, value)
	getPointer(self).Texture = getPointer(value);
end
function abi.ffi.property_getter_beam_texture_length(self)
	local result_0 = getPointer(self).TextureLength;
	return result_0;
end
function abi.ffi.property_setter_beam_texture_length_set_texture_length(self, value)
	getPointer(self).TextureLength = value;
end
function abi.ffi.property_getter_beam_texture_mode(self)
	local result_0 = getPointer(self).TextureMode;
	return result_0;
end
function abi.ffi.property_setter_beam_texture_mode_set_texture_mode(self, value)
	getPointer(self).TextureMode = value;
end
function abi.ffi.property_getter_beam_texture_speed(self)
	local result_0 = getPointer(self).TextureSpeed;
	return result_0;
end
function abi.ffi.property_setter_beam_texture_speed_set_texture_speed(self, value)
	getPointer(self).TextureSpeed = value;
end
function abi.ffi.property_getter_beam_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return createPointer(result_0);
end
function abi.ffi.property_setter_beam_transparency_set_transparency(self, value)
	getPointer(self).Transparency = getPointer(value);
end
function abi.ffi.property_getter_beam_width_0(self)
	local result_0 = getPointer(self).Width0;
	return result_0;
end
function abi.ffi.property_setter_beam_width_0_set_width_0(self, value)
	getPointer(self).Width0 = value;
end
function abi.ffi.property_getter_beam_width_1(self)
	local result_0 = getPointer(self).Width1;
	return result_0;
end
function abi.ffi.property_setter_beam_width_1_set_width_1(self, value)
	getPointer(self).Width1 = value;
end
function abi.ffi.property_getter_beam_z_offset(self)
	local result_0 = getPointer(self).ZOffset;
	return result_0;
end
function abi.ffi.property_setter_beam_z_offset_set_z_offset(self, value)
	getPointer(self).ZOffset = value;
end
function abi.ffi.method_beam_set_texture_offset(self, offset)
	getPointer(self):SetTextureOffset(offset)
end
function abi.ffi.event_bindable_event_event(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Event:Connect(function(...)
		local values_tuple = { ... };
		local values_len = select("#", ...);
		local values_tuple_vec = allocVec(values_len * 4)
		for i = 1, values_len do
			local values_tuple_vec_value = values_tuple[i];
			storeU32(memory, values_tuple_vec + (i - 1) * 4 + 0, createPointer(values_tuple_vec_value));
		end
		invokeFunction(callback_data, callback_vtable, values_tuple_vec, values_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_bindable_event_fire(self, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	getPointer(self):Fire(unpack(values_vec, 1, values_len))
end
function abi.ffi.property_getter_body_angular_velocity_angular_velocity(self)
	local result_0 = getPointer(self).AngularVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_angular_velocity_angular_velocity_set_angular_velocity(self, value)
	getPointer(self).AngularVelocity = getPointer(value);
end
function abi.ffi.property_getter_body_angular_velocity_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_angular_velocity_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = getPointer(value);
end
function abi.ffi.property_getter_body_angular_velocity_p(self)
	local result_0 = getPointer(self).P;
	return result_0;
end
function abi.ffi.property_setter_body_angular_velocity_p_set_p(self, value)
	getPointer(self).P = value;
end
function abi.ffi.property_getter_body_force_force(self)
	local result_0 = getPointer(self).Force;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_force_force_set_force(self, value)
	getPointer(self).Force = getPointer(value);
end
function abi.ffi.property_getter_body_gyro_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_gyro_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_body_gyro_d(self)
	local result_0 = getPointer(self).D;
	return result_0;
end
function abi.ffi.property_setter_body_gyro_d_set_d(self, value)
	getPointer(self).D = value;
end
function abi.ffi.property_getter_body_gyro_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_gyro_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = getPointer(value);
end
function abi.ffi.property_getter_body_gyro_p(self)
	local result_0 = getPointer(self).P;
	return result_0;
end
function abi.ffi.property_setter_body_gyro_p_set_p(self, value)
	getPointer(self).P = value;
end
function abi.ffi.property_getter_body_position_d(self)
	local result_0 = getPointer(self).D;
	return result_0;
end
function abi.ffi.property_setter_body_position_d_set_d(self, value)
	getPointer(self).D = value;
end
function abi.ffi.property_getter_body_position_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_position_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = getPointer(value);
end
function abi.ffi.property_getter_body_position_p(self)
	local result_0 = getPointer(self).P;
	return result_0;
end
function abi.ffi.property_setter_body_position_p_set_p(self, value)
	getPointer(self).P = value;
end
function abi.ffi.property_getter_body_position_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_position_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.method_body_position_get_last_force(self)
	local result_0 = getPointer(self):GetLastForce();
	return createPointer(result_0);
end
function abi.ffi.event_body_position_reached_target_on_reached_target(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ReachedTarget:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_body_thrust_force(self)
	local result_0 = getPointer(self).Force;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_thrust_force_set_force(self, value)
	getPointer(self).Force = getPointer(value);
end
function abi.ffi.property_getter_body_thrust_location(self)
	local result_0 = getPointer(self).Location;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_thrust_location_set_location(self, value)
	getPointer(self).Location = getPointer(value);
end
function abi.ffi.property_getter_body_velocity_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_velocity_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = getPointer(value);
end
function abi.ffi.property_getter_body_velocity_p(self)
	local result_0 = getPointer(self).P;
	return result_0;
end
function abi.ffi.property_setter_body_velocity_p_set_p(self, value)
	getPointer(self).P = value;
end
function abi.ffi.property_getter_body_velocity_velocity(self)
	local result_0 = getPointer(self).Velocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_velocity_velocity_set_velocity(self, value)
	getPointer(self).Velocity = getPointer(value);
end
function abi.ffi.method_body_velocity_get_last_force(self)
	local result_0 = getPointer(self):GetLastForce();
	return createPointer(result_0);
end
function abi.ffi.property_getter_rocket_propulsion_cartoon_factor(self)
	local result_0 = getPointer(self).CartoonFactor;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_cartoon_factor_set_cartoon_factor(self, value)
	getPointer(self).CartoonFactor = value;
end
function abi.ffi.property_getter_rocket_propulsion_max_speed(self)
	local result_0 = getPointer(self).MaxSpeed;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_max_speed_set_max_speed(self, value)
	getPointer(self).MaxSpeed = value;
end
function abi.ffi.property_getter_rocket_propulsion_max_thrust(self)
	local result_0 = getPointer(self).MaxThrust;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_max_thrust_set_max_thrust(self, value)
	getPointer(self).MaxThrust = value;
end
function abi.ffi.property_getter_rocket_propulsion_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return createPointer(result_0);
end
function abi.ffi.property_setter_rocket_propulsion_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = getPointer(value);
end
function abi.ffi.property_getter_rocket_propulsion_target(self)
	local result_0 = getPointer(self).Target;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_rocket_propulsion_target_set_target(self, value)
	getPointer(self).Target = getPointer(value);
end
function abi.ffi.property_getter_rocket_propulsion_target_offset(self)
	local result_0 = getPointer(self).TargetOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_rocket_propulsion_target_offset_set_target_offset(self, value)
	getPointer(self).TargetOffset = getPointer(value);
end
function abi.ffi.property_getter_rocket_propulsion_target_radius(self)
	local result_0 = getPointer(self).TargetRadius;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_target_radius_set_target_radius(self, value)
	getPointer(self).TargetRadius = value;
end
function abi.ffi.property_getter_rocket_propulsion_thrust_d(self)
	local result_0 = getPointer(self).ThrustD;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_thrust_d_set_thrust_d(self, value)
	getPointer(self).ThrustD = value;
end
function abi.ffi.property_getter_rocket_propulsion_thrust_p(self)
	local result_0 = getPointer(self).ThrustP;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_thrust_p_set_thrust_p(self, value)
	getPointer(self).ThrustP = value;
end
function abi.ffi.property_getter_rocket_propulsion_turn_d(self)
	local result_0 = getPointer(self).TurnD;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_turn_d_set_turn_d(self, value)
	getPointer(self).TurnD = value;
end
function abi.ffi.property_getter_rocket_propulsion_turn_p(self)
	local result_0 = getPointer(self).TurnP;
	return result_0;
end
function abi.ffi.property_setter_rocket_propulsion_turn_p_set_turn_p(self, value)
	getPointer(self).TurnP = value;
end
function abi.ffi.method_rocket_propulsion_abort(self)
	getPointer(self):Abort()
end
function abi.ffi.method_rocket_propulsion_fire(self)
	getPointer(self):Fire()
end
function abi.ffi.event_rocket_propulsion_reached_target_on_reached_target(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ReachedTarget:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_camera_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_camera_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_camera_camera_subject(self)
	local result_0 = getPointer(self).CameraSubject;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_camera_camera_subject_set_camera_subject(self, value)
	getPointer(self).CameraSubject = getPointer(value);
end
function abi.ffi.property_getter_camera_camera_type(self)
	local result_0 = getPointer(self).CameraType;
	return result_0;
end
function abi.ffi.property_setter_camera_camera_type_set_camera_type(self, value)
	getPointer(self).CameraType = value;
end
function abi.ffi.property_getter_camera_diagonal_field_of_view(self)
	local result_0 = getPointer(self).DiagonalFieldOfView;
	return result_0;
end
function abi.ffi.property_setter_camera_diagonal_field_of_view_set_diagonal_field_of_view(self, value)
	getPointer(self).DiagonalFieldOfView = value;
end
function abi.ffi.property_getter_camera_field_of_view(self)
	local result_0 = getPointer(self).FieldOfView;
	return result_0;
end
function abi.ffi.property_setter_camera_field_of_view_set_field_of_view(self, value)
	getPointer(self).FieldOfView = value;
end
function abi.ffi.property_getter_camera_field_of_view_mode(self)
	local result_0 = getPointer(self).FieldOfViewMode;
	return result_0;
end
function abi.ffi.property_setter_camera_field_of_view_mode_set_field_of_view_mode(self, value)
	getPointer(self).FieldOfViewMode = value;
end
function abi.ffi.property_getter_camera_focus(self)
	local result_0 = getPointer(self).Focus;
	return createPointer(result_0);
end
function abi.ffi.property_setter_camera_focus_set_focus(self, value)
	getPointer(self).Focus = getPointer(value);
end
function abi.ffi.property_getter_camera_head_locked(self)
	local result_0 = getPointer(self).HeadLocked;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_camera_head_locked_set_head_locked(self, value)
	getPointer(self).HeadLocked = value == 1;
end
function abi.ffi.property_getter_camera_head_scale(self)
	local result_0 = getPointer(self).HeadScale;
	return result_0;
end
function abi.ffi.property_setter_camera_head_scale_set_head_scale(self, value)
	getPointer(self).HeadScale = value;
end
function abi.ffi.property_getter_camera_max_axis_field_of_view(self)
	local result_0 = getPointer(self).MaxAxisFieldOfView;
	return result_0;
end
function abi.ffi.property_setter_camera_max_axis_field_of_view_set_max_axis_field_of_view(self, value)
	getPointer(self).MaxAxisFieldOfView = value;
end
function abi.ffi.property_getter_camera_near_plane_z(self)
	local result_0 = getPointer(self).NearPlaneZ;
	return result_0;
end
function abi.ffi.property_getter_camera_viewport_size(self)
	local result_0 = getPointer(self).ViewportSize;
	return createPointer(result_0);
end
function abi.ffi.method_camera_get_pan_speed(self)
	local result_0 = getPointer(self):GetPanSpeed();
	return result_0;
end
function abi.ffi.method_camera_get_render_c_frame(self)
	local result_0 = getPointer(self):GetRenderCFrame();
	return createPointer(result_0);
end
function abi.ffi.method_camera_get_roll(self)
	local result_0 = getPointer(self):GetRoll();
	return result_0;
end
function abi.ffi.method_camera_get_tilt_speed(self)
	local result_0 = getPointer(self):GetTiltSpeed();
	return result_0;
end
function abi.ffi.method_camera_screen_point_to_ray(self, x, y, depth)
	local result_0 = getPointer(self):ScreenPointToRay(x, y, depth);
	return createPointer(result_0);
end
function abi.ffi.method_camera_set_camera_pan_mode(self, mode)
	getPointer(self):SetCameraPanMode(mode)
end
function abi.ffi.method_camera_set_roll(self, roll_angle)
	getPointer(self):SetRoll(roll_angle)
end
function abi.ffi.method_camera_viewport_point_to_ray(self, x, y, depth)
	local result_0 = getPointer(self):ViewportPointToRay(x, y, depth);
	return createPointer(result_0);
end
function abi.ffi.event_camera_interpolation_finished_on_interpolation_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InterpolationFinished:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_body_colors_head_color(self)
	local result_0 = getPointer(self).HeadColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_head_color_set_head_color(self, value)
	getPointer(self).HeadColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_head_color_3(self)
	local result_0 = getPointer(self).HeadColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_head_color_3_set_head_color_3(self, value)
	getPointer(self).HeadColor3 = getPointer(value);
end
function abi.ffi.property_getter_body_colors_left_arm_color(self)
	local result_0 = getPointer(self).LeftArmColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_left_arm_color_set_left_arm_color(self, value)
	getPointer(self).LeftArmColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_left_arm_color_3(self)
	local result_0 = getPointer(self).LeftArmColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_left_arm_color_3_set_left_arm_color_3(self, value)
	getPointer(self).LeftArmColor3 = getPointer(value);
end
function abi.ffi.property_getter_body_colors_left_leg_color(self)
	local result_0 = getPointer(self).LeftLegColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_left_leg_color_set_left_leg_color(self, value)
	getPointer(self).LeftLegColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_left_leg_color_3(self)
	local result_0 = getPointer(self).LeftLegColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_left_leg_color_3_set_left_leg_color_3(self, value)
	getPointer(self).LeftLegColor3 = getPointer(value);
end
function abi.ffi.property_getter_body_colors_right_arm_color(self)
	local result_0 = getPointer(self).RightArmColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_right_arm_color_set_right_arm_color(self, value)
	getPointer(self).RightArmColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_right_arm_color_3(self)
	local result_0 = getPointer(self).RightArmColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_right_arm_color_3_set_right_arm_color_3(self, value)
	getPointer(self).RightArmColor3 = getPointer(value);
end
function abi.ffi.property_getter_body_colors_right_leg_color(self)
	local result_0 = getPointer(self).RightLegColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_right_leg_color_set_right_leg_color(self, value)
	getPointer(self).RightLegColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_right_leg_color_3(self)
	local result_0 = getPointer(self).RightLegColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_right_leg_color_3_set_right_leg_color_3(self, value)
	getPointer(self).RightLegColor3 = getPointer(value);
end
function abi.ffi.property_getter_body_colors_torso_color(self)
	local result_0 = getPointer(self).TorsoColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_torso_color_set_torso_color(self, value)
	getPointer(self).TorsoColor = getPointer(value);
end
function abi.ffi.property_getter_body_colors_torso_color_3(self)
	local result_0 = getPointer(self).TorsoColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_body_colors_torso_color_3_set_torso_color_3(self, value)
	getPointer(self).TorsoColor3 = getPointer(value);
end
function abi.ffi.property_getter_character_mesh_base_texture_id(self)
	local result_0 = getPointer(self).BaseTextureId;
	return result_0;
end
function abi.ffi.property_setter_character_mesh_base_texture_id_set_base_texture_id(self, value)
	getPointer(self).BaseTextureId = value;
end
function abi.ffi.property_getter_character_mesh_body_part(self)
	local result_0 = getPointer(self).BodyPart;
	return result_0;
end
function abi.ffi.property_setter_character_mesh_body_part_set_body_part(self, value)
	getPointer(self).BodyPart = value;
end
function abi.ffi.property_getter_character_mesh_mesh_id(self)
	local result_0 = getPointer(self).MeshId;
	return result_0;
end
function abi.ffi.property_setter_character_mesh_mesh_id_set_mesh_id(self, value)
	getPointer(self).MeshId = value;
end
function abi.ffi.property_getter_character_mesh_overlay_texture_id(self)
	local result_0 = getPointer(self).OverlayTextureId;
	return result_0;
end
function abi.ffi.property_setter_character_mesh_overlay_texture_id_set_overlay_texture_id(self, value)
	getPointer(self).OverlayTextureId = value;
end
function abi.ffi.property_getter_clothing_color_3(self)
	local result_0 = getPointer(self).Color3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_clothing_color_3_set_color_3(self, value)
	getPointer(self).Color3 = getPointer(value);
end
function abi.ffi.property_getter_pants_pants_template(self)
	local result_0 = getPointer(self).PantsTemplate;
	return createPointer(result_0);
end
function abi.ffi.property_setter_pants_pants_template_set_pants_template(self, value)
	getPointer(self).PantsTemplate = getPointer(value);
end
function abi.ffi.property_getter_shirt_shirt_template(self)
	local result_0 = getPointer(self).ShirtTemplate;
	return createPointer(result_0);
end
function abi.ffi.property_setter_shirt_shirt_template_set_shirt_template(self, value)
	getPointer(self).ShirtTemplate = getPointer(value);
end
function abi.ffi.property_getter_shirt_graphic_color_3(self)
	local result_0 = getPointer(self).Color3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_shirt_graphic_color_3_set_color_3(self, value)
	getPointer(self).Color3 = getPointer(value);
end
function abi.ffi.property_getter_shirt_graphic_graphic(self)
	local result_0 = getPointer(self).Graphic;
	return createPointer(result_0);
end
function abi.ffi.property_setter_shirt_graphic_graphic_set_graphic(self, value)
	getPointer(self).Graphic = getPointer(value);
end
function abi.ffi.property_getter_chat_bubble_chat_enabled(self)
	local result_0 = getPointer(self).BubbleChatEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_chat_bubble_chat_enabled_set_bubble_chat_enabled(self, value)
	getPointer(self).BubbleChatEnabled = value == 1;
end
function abi.ffi.property_getter_chat_load_default_chat(self)
	local result_0 = getPointer(self).LoadDefaultChat;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_chat_load_default_chat_set_load_default_chat(self, value)
	getPointer(self).LoadDefaultChat = value == 1;
end
function abi.ffi.method_chat_chat(self, part_or_character, message_addr, message_len, color)
	getPointer(self):Chat(getPointer(part_or_character), loadString(memory, message_addr, message_len), color)
end
function abi.ffi.method_chat_can_user_chat_async(self, user_id)
	local result_0 = getPointer(self):CanUserChatAsync(user_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_chat_can_users_chat_async(self, user_id_from, user_id_to)
	local result_0 = getPointer(self):CanUsersChatAsync(user_id_from, user_id_to);
	return result_0 and 1 or 0;
end
function abi.ffi.method_chat_filter_string_async(self, string_to_filter_addr, string_to_filter_len, player_from, player_to)
	local result_0 = getPointer(self):FilterStringAsync(loadString(memory, string_to_filter_addr, string_to_filter_len), getPointer(player_from), getPointer(player_to));
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_chat_filter_string_for_broadcast(self, string_to_filter_addr, string_to_filter_len, player_from)
	local result_0 = getPointer(self):FilterStringForBroadcast(loadString(memory, string_to_filter_addr, string_to_filter_len), getPointer(player_from));
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.event_chat_chatted_on_chatted(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Chatted:Connect(function(part, message, color)
		local part_optional, part_optional_0 = 0, 0;
		if (part ~= nil) then
			part_optional, part_optional_0 = 1, createPointer(part);
		end
		local message_len = #message;
		local message_content = allocString(message_len);
		for i = 1, message_len do
			storeU8(memory, message_content + (i - 1), string.byte(message:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, part_optional, part_optional_0, message_content, message_len, color)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_click_detector_cursor_icon(self)
	local result_0 = getPointer(self).CursorIcon;
	return createPointer(result_0);
end
function abi.ffi.property_setter_click_detector_cursor_icon_set_cursor_icon(self, value)
	getPointer(self).CursorIcon = getPointer(value);
end
function abi.ffi.property_getter_click_detector_max_activation_distance(self)
	local result_0 = getPointer(self).MaxActivationDistance;
	return result_0;
end
function abi.ffi.property_setter_click_detector_max_activation_distance_set_max_activation_distance(self, value)
	getPointer(self).MaxActivationDistance = value;
end
function abi.ffi.event_click_detector_mouse_click_on_mouse_click(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseClick:Connect(function(player_who_clicked)
		local player_who_clicked_optional, player_who_clicked_optional_0 = 0, 0;
		if (player_who_clicked ~= nil) then
			player_who_clicked_optional, player_who_clicked_optional_0 = 1, createPointer(player_who_clicked);
		end
		invokeFunction(callback_data, callback_vtable, player_who_clicked_optional, player_who_clicked_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_click_detector_mouse_hover_enter_on_mouse_hover_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseHoverEnter:Connect(function(player_who_hovered)
		local player_who_hovered_optional, player_who_hovered_optional_0 = 0, 0;
		if (player_who_hovered ~= nil) then
			player_who_hovered_optional, player_who_hovered_optional_0 = 1, createPointer(player_who_hovered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_hovered_optional, player_who_hovered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_click_detector_mouse_hover_leave_on_mouse_hover_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseHoverLeave:Connect(function(player_who_hovered)
		local player_who_hovered_optional, player_who_hovered_optional_0 = 0, 0;
		if (player_who_hovered ~= nil) then
			player_who_hovered_optional, player_who_hovered_optional_0 = 1, createPointer(player_who_hovered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_hovered_optional, player_who_hovered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_click_detector_right_mouse_click_on_right_mouse_click(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).RightMouseClick:Connect(function(player_who_clicked)
		local player_who_clicked_optional, player_who_clicked_optional_0 = 0, 0;
		if (player_who_clicked ~= nil) then
			player_who_clicked_optional, player_who_clicked_optional_0 = 1, createPointer(player_who_clicked);
		end
		invokeFunction(callback_data, callback_vtable, player_who_clicked_optional, player_who_clicked_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_clouds_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_clouds_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_clouds_cover(self)
	local result_0 = getPointer(self).Cover;
	return result_0;
end
function abi.ffi.property_setter_clouds_cover_set_cover(self, value)
	getPointer(self).Cover = value;
end
function abi.ffi.property_getter_clouds_density(self)
	local result_0 = getPointer(self).Density;
	return result_0;
end
function abi.ffi.property_setter_clouds_density_set_density(self, value)
	getPointer(self).Density = value;
end
function abi.ffi.property_getter_clouds_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_clouds_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.method_collection_service_add_tag(self, instance, tag_addr, tag_len)
	getPointer(self):AddTag(getPointer(instance), loadString(memory, tag_addr, tag_len))
end
function abi.ffi.method_collection_service_has_tag(self, instance, tag_addr, tag_len)
	local result_0 = getPointer(self):HasTag(getPointer(instance), loadString(memory, tag_addr, tag_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_collection_service_remove_tag(self, instance, tag_addr, tag_len)
	getPointer(self):RemoveTag(getPointer(instance), loadString(memory, tag_addr, tag_len))
end
function abi.ffi.event_collection_service_tag_added_on_tag_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TagAdded:Connect(function(tag)
		local tag_len = #tag;
		local tag_content = allocString(tag_len);
		for i = 1, tag_len do
			storeU8(memory, tag_content + (i - 1), string.byte(tag:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, tag_content, tag_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_collection_service_tag_removed_on_tag_removed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TagRemoved:Connect(function(tag)
		local tag_len = #tag;
		local tag_content = allocString(tag_len);
		for i = 1, tag_len do
			storeU8(memory, tag_content + (i - 1), string.byte(tag:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, tag_content, tag_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_collection_service_get_tags(self, instance)
	local result_0 = getPointer(self):GetTags(getPointer(instance));
	local result_0_len = #result_0;
	local result_0_vec = allocVec(result_0_len * 8)
	for i = 1, result_0_len do
		local result_0_vec_value = result_0[i];
		local result_0_vec_value_len = #result_0_vec_value;
		local result_0_vec_value_content = allocString(result_0_vec_value_len);
		for i = 1, result_0_vec_value_len do
			storeU8(memory, result_0_vec_value_content + (i - 1), string.byte(result_0_vec_value:sub(i, i)));
		end
		storeU32(memory, result_0_vec + (i - 1) * 8 + 0, result_0_vec_value_content);
		storeU32(memory, result_0_vec + (i - 1) * 8 + 4, result_0_vec_value_len);
	end
	return result_0_vec, result_0_len;
end
function abi.ffi.property_getter_command_instance_allow_gui_access_points(self)
	local result_0 = getPointer(self).AllowGUIAccessPoints;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_command_instance_display_name(self)
	local result_0 = getPointer(self).DisplayName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_command_instance_display_name_set_display_name(self, value_addr, value_len)
	getPointer(self).DisplayName = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_constraint_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_constraint_attachment_0(self)
	local result_0 = getPointer(self).Attachment0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_constraint_attachment_0_set_attachment_0(self, value)
	getPointer(self).Attachment0 = getPointer(value);
end
function abi.ffi.property_getter_constraint_attachment_1(self)
	local result_0 = getPointer(self).Attachment1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_constraint_attachment_1_set_attachment_1(self, value)
	getPointer(self).Attachment1 = getPointer(value);
end
function abi.ffi.property_getter_constraint_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_constraint_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_constraint_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_constraint_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_constraint_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_constraint_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.property_getter_align_orientation_align_type(self)
	local result_0 = getPointer(self).AlignType;
	return result_0;
end
function abi.ffi.property_setter_align_orientation_align_type_set_align_type(self, value)
	getPointer(self).AlignType = value;
end
function abi.ffi.property_getter_align_orientation_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_align_orientation_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_align_orientation_max_angular_velocity(self)
	local result_0 = getPointer(self).MaxAngularVelocity;
	return result_0;
end
function abi.ffi.property_setter_align_orientation_max_angular_velocity_set_max_angular_velocity(self, value)
	getPointer(self).MaxAngularVelocity = value;
end
function abi.ffi.property_getter_align_orientation_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return result_0;
end
function abi.ffi.property_setter_align_orientation_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = value;
end
function abi.ffi.property_getter_align_orientation_mode(self)
	local result_0 = getPointer(self).Mode;
	return result_0;
end
function abi.ffi.property_setter_align_orientation_mode_set_mode(self, value)
	getPointer(self).Mode = value;
end
function abi.ffi.property_getter_align_orientation_primary_axis(self)
	local result_0 = getPointer(self).PrimaryAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_align_orientation_primary_axis_set_primary_axis(self, value)
	getPointer(self).PrimaryAxis = getPointer(value);
end
function abi.ffi.property_getter_align_orientation_primary_axis_only(self)
	local result_0 = getPointer(self).PrimaryAxisOnly;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_orientation_primary_axis_only_set_primary_axis_only(self, value)
	getPointer(self).PrimaryAxisOnly = value == 1;
end
function abi.ffi.property_getter_align_orientation_reaction_torque_enabled(self)
	local result_0 = getPointer(self).ReactionTorqueEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_orientation_reaction_torque_enabled_set_reaction_torque_enabled(self, value)
	getPointer(self).ReactionTorqueEnabled = value == 1;
end
function abi.ffi.property_getter_align_orientation_responsiveness(self)
	local result_0 = getPointer(self).Responsiveness;
	return result_0;
end
function abi.ffi.property_setter_align_orientation_responsiveness_set_responsiveness(self, value)
	getPointer(self).Responsiveness = value;
end
function abi.ffi.property_getter_align_orientation_rigidity_enabled(self)
	local result_0 = getPointer(self).RigidityEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_orientation_rigidity_enabled_set_rigidity_enabled(self, value)
	getPointer(self).RigidityEnabled = value == 1;
end
function abi.ffi.property_getter_align_orientation_secondary_axis(self)
	local result_0 = getPointer(self).SecondaryAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_align_orientation_secondary_axis_set_secondary_axis(self, value)
	getPointer(self).SecondaryAxis = getPointer(value);
end
function abi.ffi.property_getter_align_position_apply_at_center_of_mass(self)
	local result_0 = getPointer(self).ApplyAtCenterOfMass;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_position_apply_at_center_of_mass_set_apply_at_center_of_mass(self, value)
	getPointer(self).ApplyAtCenterOfMass = value == 1;
end
function abi.ffi.property_getter_align_position_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return result_0;
end
function abi.ffi.property_setter_align_position_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = value;
end
function abi.ffi.property_getter_align_position_max_velocity(self)
	local result_0 = getPointer(self).MaxVelocity;
	return result_0;
end
function abi.ffi.property_setter_align_position_max_velocity_set_max_velocity(self, value)
	getPointer(self).MaxVelocity = value;
end
function abi.ffi.property_getter_align_position_mode(self)
	local result_0 = getPointer(self).Mode;
	return result_0;
end
function abi.ffi.property_setter_align_position_mode_set_mode(self, value)
	getPointer(self).Mode = value;
end
function abi.ffi.property_getter_align_position_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_align_position_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_align_position_reaction_force_enabled(self)
	local result_0 = getPointer(self).ReactionForceEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_position_reaction_force_enabled_set_reaction_force_enabled(self, value)
	getPointer(self).ReactionForceEnabled = value == 1;
end
function abi.ffi.property_getter_align_position_responsiveness(self)
	local result_0 = getPointer(self).Responsiveness;
	return result_0;
end
function abi.ffi.property_setter_align_position_responsiveness_set_responsiveness(self, value)
	getPointer(self).Responsiveness = value;
end
function abi.ffi.property_getter_align_position_rigidity_enabled(self)
	local result_0 = getPointer(self).RigidityEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_align_position_rigidity_enabled_set_rigidity_enabled(self, value)
	getPointer(self).RigidityEnabled = value == 1;
end
function abi.ffi.property_getter_angular_velocity_angular_velocity(self)
	local result_0 = getPointer(self).AngularVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_angular_velocity_angular_velocity_set_angular_velocity(self, value)
	getPointer(self).AngularVelocity = getPointer(value);
end
function abi.ffi.property_getter_angular_velocity_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return result_0;
end
function abi.ffi.property_setter_angular_velocity_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = value;
end
function abi.ffi.property_getter_angular_velocity_reaction_torque_enabled(self)
	local result_0 = getPointer(self).ReactionTorqueEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_angular_velocity_reaction_torque_enabled_set_reaction_torque_enabled(self, value)
	getPointer(self).ReactionTorqueEnabled = value == 1;
end
function abi.ffi.property_getter_angular_velocity_relative_to(self)
	local result_0 = getPointer(self).RelativeTo;
	return result_0;
end
function abi.ffi.property_setter_angular_velocity_relative_to_set_relative_to(self, value)
	getPointer(self).RelativeTo = value;
end
function abi.ffi.property_getter_animation_constraint_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return result_0;
end
function abi.ffi.property_setter_animation_constraint_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = value;
end
function abi.ffi.property_getter_animation_constraint_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return result_0;
end
function abi.ffi.property_setter_animation_constraint_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = value;
end
function abi.ffi.property_getter_animation_constraint_transform(self)
	local result_0 = getPointer(self).Transform;
	return createPointer(result_0);
end
function abi.ffi.property_setter_animation_constraint_transform_set_transform(self, value)
	getPointer(self).Transform = getPointer(value);
end
function abi.ffi.property_getter_ball_socket_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ball_socket_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_ball_socket_constraint_max_friction_torque(self)
	local result_0 = getPointer(self).MaxFrictionTorque;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_max_friction_torque_set_max_friction_torque(self, value)
	getPointer(self).MaxFrictionTorque = value;
end
function abi.ffi.property_getter_ball_socket_constraint_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_ball_socket_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_ball_socket_constraint_twist_limits_enabled(self)
	local result_0 = getPointer(self).TwistLimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ball_socket_constraint_twist_limits_enabled_set_twist_limits_enabled(self, value)
	getPointer(self).TwistLimitsEnabled = value == 1;
end
function abi.ffi.property_getter_ball_socket_constraint_twist_lower_angle(self)
	local result_0 = getPointer(self).TwistLowerAngle;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_twist_lower_angle_set_twist_lower_angle(self, value)
	getPointer(self).TwistLowerAngle = value;
end
function abi.ffi.property_getter_ball_socket_constraint_twist_upper_angle(self)
	local result_0 = getPointer(self).TwistUpperAngle;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_twist_upper_angle_set_twist_upper_angle(self, value)
	getPointer(self).TwistUpperAngle = value;
end
function abi.ffi.property_getter_ball_socket_constraint_upper_angle(self)
	local result_0 = getPointer(self).UpperAngle;
	return result_0;
end
function abi.ffi.property_setter_ball_socket_constraint_upper_angle_set_upper_angle(self, value)
	getPointer(self).UpperAngle = value;
end
function abi.ffi.property_getter_hinge_constraint_actuator_type(self)
	local result_0 = getPointer(self).ActuatorType;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_actuator_type_set_actuator_type(self, value)
	getPointer(self).ActuatorType = value;
end
function abi.ffi.property_getter_hinge_constraint_angular_responsiveness(self)
	local result_0 = getPointer(self).AngularResponsiveness;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_angular_responsiveness_set_angular_responsiveness(self, value)
	getPointer(self).AngularResponsiveness = value;
end
function abi.ffi.property_getter_hinge_constraint_angular_speed(self)
	local result_0 = getPointer(self).AngularSpeed;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_angular_speed_set_angular_speed(self, value)
	getPointer(self).AngularSpeed = value;
end
function abi.ffi.property_getter_hinge_constraint_angular_velocity(self)
	local result_0 = getPointer(self).AngularVelocity;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_angular_velocity_set_angular_velocity(self, value)
	getPointer(self).AngularVelocity = value;
end
function abi.ffi.property_getter_hinge_constraint_current_angle(self)
	local result_0 = getPointer(self).CurrentAngle;
	return result_0;
end
function abi.ffi.property_getter_hinge_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_hinge_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_hinge_constraint_lower_angle(self)
	local result_0 = getPointer(self).LowerAngle;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_lower_angle_set_lower_angle(self, value)
	getPointer(self).LowerAngle = value;
end
function abi.ffi.property_getter_hinge_constraint_motor_max_acceleration(self)
	local result_0 = getPointer(self).MotorMaxAcceleration;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_motor_max_acceleration_set_motor_max_acceleration(self, value)
	getPointer(self).MotorMaxAcceleration = value;
end
function abi.ffi.property_getter_hinge_constraint_motor_max_torque(self)
	local result_0 = getPointer(self).MotorMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_motor_max_torque_set_motor_max_torque(self, value)
	getPointer(self).MotorMaxTorque = value;
end
function abi.ffi.property_getter_hinge_constraint_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_hinge_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_hinge_constraint_servo_max_torque(self)
	local result_0 = getPointer(self).ServoMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_servo_max_torque_set_servo_max_torque(self, value)
	getPointer(self).ServoMaxTorque = value;
end
function abi.ffi.property_getter_hinge_constraint_target_angle(self)
	local result_0 = getPointer(self).TargetAngle;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_target_angle_set_target_angle(self, value)
	getPointer(self).TargetAngle = value;
end
function abi.ffi.property_getter_hinge_constraint_upper_angle(self)
	local result_0 = getPointer(self).UpperAngle;
	return result_0;
end
function abi.ffi.property_setter_hinge_constraint_upper_angle_set_upper_angle(self, value)
	getPointer(self).UpperAngle = value;
end
function abi.ffi.property_getter_line_force_apply_at_center_of_mass(self)
	local result_0 = getPointer(self).ApplyAtCenterOfMass;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_line_force_apply_at_center_of_mass_set_apply_at_center_of_mass(self, value)
	getPointer(self).ApplyAtCenterOfMass = value == 1;
end
function abi.ffi.property_getter_line_force_inverse_square_law(self)
	local result_0 = getPointer(self).InverseSquareLaw;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_line_force_inverse_square_law_set_inverse_square_law(self, value)
	getPointer(self).InverseSquareLaw = value == 1;
end
function abi.ffi.property_getter_line_force_magnitude(self)
	local result_0 = getPointer(self).Magnitude;
	return result_0;
end
function abi.ffi.property_setter_line_force_magnitude_set_magnitude(self, value)
	getPointer(self).Magnitude = value;
end
function abi.ffi.property_getter_line_force_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return result_0;
end
function abi.ffi.property_setter_line_force_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = value;
end
function abi.ffi.property_getter_line_force_reaction_force_enabled(self)
	local result_0 = getPointer(self).ReactionForceEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_line_force_reaction_force_enabled_set_reaction_force_enabled(self, value)
	getPointer(self).ReactionForceEnabled = value == 1;
end
function abi.ffi.property_getter_linear_velocity_line_direction(self)
	local result_0 = getPointer(self).LineDirection;
	return createPointer(result_0);
end
function abi.ffi.property_setter_linear_velocity_line_direction_set_line_direction(self, value)
	getPointer(self).LineDirection = getPointer(value);
end
function abi.ffi.property_getter_linear_velocity_line_velocity(self)
	local result_0 = getPointer(self).LineVelocity;
	return result_0;
end
function abi.ffi.property_setter_linear_velocity_line_velocity_set_line_velocity(self, value)
	getPointer(self).LineVelocity = value;
end
function abi.ffi.property_getter_linear_velocity_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return result_0;
end
function abi.ffi.property_setter_linear_velocity_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = value;
end
function abi.ffi.property_getter_linear_velocity_plane_velocity(self)
	local result_0 = getPointer(self).PlaneVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_linear_velocity_plane_velocity_set_plane_velocity(self, value)
	getPointer(self).PlaneVelocity = getPointer(value);
end
function abi.ffi.property_getter_linear_velocity_primary_tangent_axis(self)
	local result_0 = getPointer(self).PrimaryTangentAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_linear_velocity_primary_tangent_axis_set_primary_tangent_axis(self, value)
	getPointer(self).PrimaryTangentAxis = getPointer(value);
end
function abi.ffi.property_getter_linear_velocity_relative_to(self)
	local result_0 = getPointer(self).RelativeTo;
	return result_0;
end
function abi.ffi.property_setter_linear_velocity_relative_to_set_relative_to(self, value)
	getPointer(self).RelativeTo = value;
end
function abi.ffi.property_getter_linear_velocity_secondary_tangent_axis(self)
	local result_0 = getPointer(self).SecondaryTangentAxis;
	return createPointer(result_0);
end
function abi.ffi.property_setter_linear_velocity_secondary_tangent_axis_set_secondary_tangent_axis(self, value)
	getPointer(self).SecondaryTangentAxis = getPointer(value);
end
function abi.ffi.property_getter_linear_velocity_vector_velocity(self)
	local result_0 = getPointer(self).VectorVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_linear_velocity_vector_velocity_set_vector_velocity(self, value)
	getPointer(self).VectorVelocity = getPointer(value);
end
function abi.ffi.property_getter_linear_velocity_velocity_constraint_mode(self)
	local result_0 = getPointer(self).VelocityConstraintMode;
	return result_0;
end
function abi.ffi.property_setter_linear_velocity_velocity_constraint_mode_set_velocity_constraint_mode(self, value)
	getPointer(self).VelocityConstraintMode = value;
end
function abi.ffi.property_getter_rod_constraint_current_distance(self)
	local result_0 = getPointer(self).CurrentDistance;
	return result_0;
end
function abi.ffi.property_getter_rod_constraint_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.property_setter_rod_constraint_length_set_length(self, value)
	getPointer(self).Length = value;
end
function abi.ffi.property_getter_rod_constraint_limit_angle_0(self)
	local result_0 = getPointer(self).LimitAngle0;
	return result_0;
end
function abi.ffi.property_setter_rod_constraint_limit_angle_0_set_limit_angle_0(self, value)
	getPointer(self).LimitAngle0 = value;
end
function abi.ffi.property_getter_rod_constraint_limit_angle_1(self)
	local result_0 = getPointer(self).LimitAngle1;
	return result_0;
end
function abi.ffi.property_setter_rod_constraint_limit_angle_1_set_limit_angle_1(self, value)
	getPointer(self).LimitAngle1 = value;
end
function abi.ffi.property_getter_rod_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_rod_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_rod_constraint_thickness(self)
	local result_0 = getPointer(self).Thickness;
	return result_0;
end
function abi.ffi.property_setter_rod_constraint_thickness_set_thickness(self, value)
	getPointer(self).Thickness = value;
end
function abi.ffi.property_getter_rope_constraint_current_distance(self)
	local result_0 = getPointer(self).CurrentDistance;
	return result_0;
end
function abi.ffi.property_getter_rope_constraint_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_length_set_length(self, value)
	getPointer(self).Length = value;
end
function abi.ffi.property_getter_rope_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_rope_constraint_thickness(self)
	local result_0 = getPointer(self).Thickness;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_thickness_set_thickness(self, value)
	getPointer(self).Thickness = value;
end
function abi.ffi.property_getter_rope_constraint_winch_enabled(self)
	local result_0 = getPointer(self).WinchEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_rope_constraint_winch_enabled_set_winch_enabled(self, value)
	getPointer(self).WinchEnabled = value == 1;
end
function abi.ffi.property_getter_rope_constraint_winch_force(self)
	local result_0 = getPointer(self).WinchForce;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_winch_force_set_winch_force(self, value)
	getPointer(self).WinchForce = value;
end
function abi.ffi.property_getter_rope_constraint_winch_responsiveness(self)
	local result_0 = getPointer(self).WinchResponsiveness;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_winch_responsiveness_set_winch_responsiveness(self, value)
	getPointer(self).WinchResponsiveness = value;
end
function abi.ffi.property_getter_rope_constraint_winch_speed(self)
	local result_0 = getPointer(self).WinchSpeed;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_winch_speed_set_winch_speed(self, value)
	getPointer(self).WinchSpeed = value;
end
function abi.ffi.property_getter_rope_constraint_winch_target(self)
	local result_0 = getPointer(self).WinchTarget;
	return result_0;
end
function abi.ffi.property_setter_rope_constraint_winch_target_set_winch_target(self, value)
	getPointer(self).WinchTarget = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_actuator_type(self)
	local result_0 = getPointer(self).ActuatorType;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_actuator_type_set_actuator_type(self, value)
	getPointer(self).ActuatorType = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_current_position(self)
	local result_0 = getPointer(self).CurrentPosition;
	return result_0;
end
function abi.ffi.property_getter_sliding_ball_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sliding_ball_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_sliding_ball_constraint_linear_responsiveness(self)
	local result_0 = getPointer(self).LinearResponsiveness;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_linear_responsiveness_set_linear_responsiveness(self, value)
	getPointer(self).LinearResponsiveness = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_lower_limit(self)
	local result_0 = getPointer(self).LowerLimit;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_lower_limit_set_lower_limit(self, value)
	getPointer(self).LowerLimit = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_motor_max_acceleration(self)
	local result_0 = getPointer(self).MotorMaxAcceleration;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_motor_max_acceleration_set_motor_max_acceleration(self, value)
	getPointer(self).MotorMaxAcceleration = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_motor_max_force(self)
	local result_0 = getPointer(self).MotorMaxForce;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_motor_max_force_set_motor_max_force(self, value)
	getPointer(self).MotorMaxForce = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_servo_max_force(self)
	local result_0 = getPointer(self).ServoMaxForce;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_servo_max_force_set_servo_max_force(self, value)
	getPointer(self).ServoMaxForce = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_speed(self)
	local result_0 = getPointer(self).Speed;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_speed_set_speed(self, value)
	getPointer(self).Speed = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_target_position(self)
	local result_0 = getPointer(self).TargetPosition;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_target_position_set_target_position(self, value)
	getPointer(self).TargetPosition = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_upper_limit(self)
	local result_0 = getPointer(self).UpperLimit;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_upper_limit_set_upper_limit(self, value)
	getPointer(self).UpperLimit = value;
end
function abi.ffi.property_getter_sliding_ball_constraint_velocity(self)
	local result_0 = getPointer(self).Velocity;
	return result_0;
end
function abi.ffi.property_setter_sliding_ball_constraint_velocity_set_velocity(self, value)
	getPointer(self).Velocity = value;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_actuator_type(self)
	local result_0 = getPointer(self).AngularActuatorType;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_actuator_type_set_angular_actuator_type(self, value)
	getPointer(self).AngularActuatorType = value;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_limits_enabled(self)
	local result_0 = getPointer(self).AngularLimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_limits_enabled_set_angular_limits_enabled(self, value)
	getPointer(self).AngularLimitsEnabled = value == 1;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_responsiveness(self)
	local result_0 = getPointer(self).AngularResponsiveness;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_responsiveness_set_angular_responsiveness(self, value)
	getPointer(self).AngularResponsiveness = value;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_restitution(self)
	local result_0 = getPointer(self).AngularRestitution;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_restitution_set_angular_restitution(self, value)
	getPointer(self).AngularRestitution = value;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_speed(self)
	local result_0 = getPointer(self).AngularSpeed;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_speed_set_angular_speed(self, value)
	getPointer(self).AngularSpeed = value;
end
function abi.ffi.property_getter_cylindrical_constraint_angular_velocity(self)
	local result_0 = getPointer(self).AngularVelocity;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_angular_velocity_set_angular_velocity(self, value)
	getPointer(self).AngularVelocity = value;
end
function abi.ffi.property_getter_cylindrical_constraint_current_angle(self)
	local result_0 = getPointer(self).CurrentAngle;
	return result_0;
end
function abi.ffi.property_getter_cylindrical_constraint_inclination_angle(self)
	local result_0 = getPointer(self).InclinationAngle;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_inclination_angle_set_inclination_angle(self, value)
	getPointer(self).InclinationAngle = value;
end
function abi.ffi.property_getter_cylindrical_constraint_lower_angle(self)
	local result_0 = getPointer(self).LowerAngle;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_lower_angle_set_lower_angle(self, value)
	getPointer(self).LowerAngle = value;
end
function abi.ffi.property_getter_cylindrical_constraint_motor_max_angular_acceleration(self)
	local result_0 = getPointer(self).MotorMaxAngularAcceleration;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_motor_max_angular_acceleration_set_motor_max_angular_acceleration(self, value)
	getPointer(self).MotorMaxAngularAcceleration = value;
end
function abi.ffi.property_getter_cylindrical_constraint_motor_max_torque(self)
	local result_0 = getPointer(self).MotorMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_motor_max_torque_set_motor_max_torque(self, value)
	getPointer(self).MotorMaxTorque = value;
end
function abi.ffi.property_getter_cylindrical_constraint_rotation_axis_visible(self)
	local result_0 = getPointer(self).RotationAxisVisible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_cylindrical_constraint_rotation_axis_visible_set_rotation_axis_visible(self, value)
	getPointer(self).RotationAxisVisible = value == 1;
end
function abi.ffi.property_getter_cylindrical_constraint_servo_max_torque(self)
	local result_0 = getPointer(self).ServoMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_servo_max_torque_set_servo_max_torque(self, value)
	getPointer(self).ServoMaxTorque = value;
end
function abi.ffi.property_getter_cylindrical_constraint_target_angle(self)
	local result_0 = getPointer(self).TargetAngle;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_target_angle_set_target_angle(self, value)
	getPointer(self).TargetAngle = value;
end
function abi.ffi.property_getter_cylindrical_constraint_upper_angle(self)
	local result_0 = getPointer(self).UpperAngle;
	return result_0;
end
function abi.ffi.property_setter_cylindrical_constraint_upper_angle_set_upper_angle(self, value)
	getPointer(self).UpperAngle = value;
end
function abi.ffi.property_getter_cylindrical_constraint_world_rotation_axis(self)
	local result_0 = getPointer(self).WorldRotationAxis;
	return createPointer(result_0);
end
function abi.ffi.property_getter_spring_constraint_coils(self)
	local result_0 = getPointer(self).Coils;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_coils_set_coils(self, value)
	getPointer(self).Coils = value;
end
function abi.ffi.property_getter_spring_constraint_current_length(self)
	local result_0 = getPointer(self).CurrentLength;
	return result_0;
end
function abi.ffi.property_getter_spring_constraint_damping(self)
	local result_0 = getPointer(self).Damping;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_damping_set_damping(self, value)
	getPointer(self).Damping = value;
end
function abi.ffi.property_getter_spring_constraint_free_length(self)
	local result_0 = getPointer(self).FreeLength;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_free_length_set_free_length(self, value)
	getPointer(self).FreeLength = value;
end
function abi.ffi.property_getter_spring_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_spring_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_spring_constraint_max_force(self)
	local result_0 = getPointer(self).MaxForce;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_max_force_set_max_force(self, value)
	getPointer(self).MaxForce = value;
end
function abi.ffi.property_getter_spring_constraint_max_length(self)
	local result_0 = getPointer(self).MaxLength;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_max_length_set_max_length(self, value)
	getPointer(self).MaxLength = value;
end
function abi.ffi.property_getter_spring_constraint_min_length(self)
	local result_0 = getPointer(self).MinLength;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_min_length_set_min_length(self, value)
	getPointer(self).MinLength = value;
end
function abi.ffi.property_getter_spring_constraint_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_spring_constraint_stiffness(self)
	local result_0 = getPointer(self).Stiffness;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_stiffness_set_stiffness(self, value)
	getPointer(self).Stiffness = value;
end
function abi.ffi.property_getter_spring_constraint_thickness(self)
	local result_0 = getPointer(self).Thickness;
	return result_0;
end
function abi.ffi.property_setter_spring_constraint_thickness_set_thickness(self, value)
	getPointer(self).Thickness = value;
end
function abi.ffi.property_getter_torque_relative_to(self)
	local result_0 = getPointer(self).RelativeTo;
	return result_0;
end
function abi.ffi.property_setter_torque_relative_to_set_relative_to(self, value)
	getPointer(self).RelativeTo = value;
end
function abi.ffi.property_getter_torque_torque(self)
	local result_0 = getPointer(self).Torque;
	return createPointer(result_0);
end
function abi.ffi.property_setter_torque_torque_set_torque(self, value)
	getPointer(self).Torque = getPointer(value);
end
function abi.ffi.property_getter_torsion_spring_constraint_coils(self)
	local result_0 = getPointer(self).Coils;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_coils_set_coils(self, value)
	getPointer(self).Coils = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_current_angle(self)
	local result_0 = getPointer(self).CurrentAngle;
	return result_0;
end
function abi.ffi.property_getter_torsion_spring_constraint_damping(self)
	local result_0 = getPointer(self).Damping;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_damping_set_damping(self, value)
	getPointer(self).Damping = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_torsion_spring_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_torsion_spring_constraint_max_angle(self)
	local result_0 = getPointer(self).MaxAngle;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_max_angle_set_max_angle(self, value)
	getPointer(self).MaxAngle = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_max_torque(self)
	local result_0 = getPointer(self).MaxTorque;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_max_torque_set_max_torque(self, value)
	getPointer(self).MaxTorque = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_torsion_spring_constraint_stiffness(self)
	local result_0 = getPointer(self).Stiffness;
	return result_0;
end
function abi.ffi.property_setter_torsion_spring_constraint_stiffness_set_stiffness(self, value)
	getPointer(self).Stiffness = value;
end
function abi.ffi.property_getter_universal_constraint_limits_enabled(self)
	local result_0 = getPointer(self).LimitsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_universal_constraint_limits_enabled_set_limits_enabled(self, value)
	getPointer(self).LimitsEnabled = value == 1;
end
function abi.ffi.property_getter_universal_constraint_max_angle(self)
	local result_0 = getPointer(self).MaxAngle;
	return result_0;
end
function abi.ffi.property_setter_universal_constraint_max_angle_set_max_angle(self, value)
	getPointer(self).MaxAngle = value;
end
function abi.ffi.property_getter_universal_constraint_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_universal_constraint_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_universal_constraint_restitution(self)
	local result_0 = getPointer(self).Restitution;
	return result_0;
end
function abi.ffi.property_setter_universal_constraint_restitution_set_restitution(self, value)
	getPointer(self).Restitution = value;
end
function abi.ffi.property_getter_vector_force_apply_at_center_of_mass(self)
	local result_0 = getPointer(self).ApplyAtCenterOfMass;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_vector_force_apply_at_center_of_mass_set_apply_at_center_of_mass(self, value)
	getPointer(self).ApplyAtCenterOfMass = value == 1;
end
function abi.ffi.property_getter_vector_force_force(self)
	local result_0 = getPointer(self).Force;
	return createPointer(result_0);
end
function abi.ffi.property_setter_vector_force_force_set_force(self, value)
	getPointer(self).Force = getPointer(value);
end
function abi.ffi.property_getter_vector_force_relative_to(self)
	local result_0 = getPointer(self).RelativeTo;
	return result_0;
end
function abi.ffi.property_setter_vector_force_relative_to_set_relative_to(self, value)
	getPointer(self).RelativeTo = value;
end
function abi.ffi.property_getter_content_provider_base_url(self)
	local result_0 = getPointer(self).BaseUrl;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_content_provider_request_queue_size(self)
	local result_0 = getPointer(self).RequestQueueSize;
	return result_0;
end
function abi.ffi.method_content_provider_register_default_encryption_key(self, encryption_key_addr, encryption_key_len)
	getPointer(self):RegisterDefaultEncryptionKey(loadString(memory, encryption_key_addr, encryption_key_len))
end
function abi.ffi.method_content_provider_register_default_session_key(self, session_key_addr, session_key_len)
	getPointer(self):RegisterDefaultSessionKey(loadString(memory, session_key_addr, session_key_len))
end
function abi.ffi.method_content_provider_register_encrypted_asset(self, asset_id, encryption_key_addr, encryption_key_len)
	getPointer(self):RegisterEncryptedAsset(getPointer(asset_id), loadString(memory, encryption_key_addr, encryption_key_len))
end
function abi.ffi.method_content_provider_register_session_encrypted_asset(self, content_id, session_key_addr, session_key_len)
	getPointer(self):RegisterSessionEncryptedAsset(getPointer(content_id), loadString(memory, session_key_addr, session_key_len))
end
function abi.ffi.method_content_provider_unregister_default_encryption_key(self)
	getPointer(self):UnregisterDefaultEncryptionKey()
end
function abi.ffi.method_content_provider_unregister_encrypted_asset(self, asset_id)
	getPointer(self):UnregisterEncryptedAsset(getPointer(asset_id))
end
function abi.ffi.event_content_provider_asset_fetch_failed_on_asset_fetch_failed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).AssetFetchFailed:Connect(function(asset_id)
		invokeFunction(callback_data, callback_vtable, createPointer(asset_id))
	end));
	return createPointer(result_0);
end
function abi.ffi.method_context_action_service_get_current_local_tool_icon(self)
	local result_0 = getPointer(self):GetCurrentLocalToolIcon();
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_context_action_service_set_description(self, action_name_addr, action_name_len, description_addr, description_len)
	getPointer(self):SetDescription(loadString(memory, action_name_addr, action_name_len), loadString(memory, description_addr, description_len))
end
function abi.ffi.method_context_action_service_set_image(self, action_name_addr, action_name_len, image_addr, image_len)
	getPointer(self):SetImage(loadString(memory, action_name_addr, action_name_len), loadString(memory, image_addr, image_len))
end
function abi.ffi.method_context_action_service_set_position(self, action_name_addr, action_name_len, position)
	getPointer(self):SetPosition(loadString(memory, action_name_addr, action_name_len), getPointer(position))
end
function abi.ffi.method_context_action_service_set_title(self, action_name_addr, action_name_len, title_addr, title_len)
	getPointer(self):SetTitle(loadString(memory, action_name_addr, action_name_len), loadString(memory, title_addr, title_len))
end
function abi.ffi.method_context_action_service_unbind_action(self, action_name_addr, action_name_len)
	getPointer(self):UnbindAction(loadString(memory, action_name_addr, action_name_len))
end
function abi.ffi.method_context_action_service_unbind_activate(self, user_input_type_for_activation, key_code_for_activation)
	getPointer(self):UnbindActivate(user_input_type_for_activation, key_code_for_activation)
end
function abi.ffi.method_context_action_service_unbind_all_actions(self)
	getPointer(self):UnbindAllActions()
end
function abi.ffi.method_context_action_service_get_button(self, action_name_addr, action_name_len)
	local result_0 = getPointer(self):GetButton(loadString(memory, action_name_addr, action_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_context_action_service_local_tool_equipped_on_local_tool_equipped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).LocalToolEquipped:Connect(function(tool_equipped)
		local tool_equipped_optional, tool_equipped_optional_0 = 0, 0;
		if (tool_equipped ~= nil) then
			tool_equipped_optional, tool_equipped_optional_0 = 1, createPointer(tool_equipped);
		end
		invokeFunction(callback_data, callback_vtable, tool_equipped_optional, tool_equipped_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_context_action_service_local_tool_unequipped_on_local_tool_unequipped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).LocalToolUnequipped:Connect(function(tool_unequipped)
		local tool_unequipped_optional, tool_unequipped_optional_0 = 0, 0;
		if (tool_unequipped ~= nil) then
			tool_unequipped_optional, tool_unequipped_optional_0 = 1, createPointer(tool_unequipped);
		end
		invokeFunction(callback_data, callback_vtable, tool_unequipped_optional, tool_unequipped_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_controller_bind_button(self, button, caption_addr, caption_len)
	getPointer(self):BindButton(button, loadString(memory, caption_addr, caption_len))
end
function abi.ffi.method_controller_get_button(self, button)
	local result_0 = getPointer(self):GetButton(button);
	return result_0 and 1 or 0;
end
function abi.ffi.method_controller_unbind_button(self, button)
	getPointer(self):UnbindButton(button)
end
function abi.ffi.event_controller_button_changed_on_button_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ButtonChanged:Connect(function(button)
		invokeFunction(callback_data, callback_vtable, button)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_skateboard_controller_steer(self)
	local result_0 = getPointer(self).Steer;
	return result_0;
end
function abi.ffi.property_getter_skateboard_controller_throttle(self)
	local result_0 = getPointer(self).Throttle;
	return result_0;
end
function abi.ffi.event_skateboard_controller_axis_changed_on_axis_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).AxisChanged:Connect(function(axis)
		local axis_len = #axis;
		local axis_content = allocString(axis_len);
		for i = 1, axis_len do
			storeU8(memory, axis_content + (i - 1), string.byte(axis:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, axis_content, axis_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_controller_base_move_speed_factor(self)
	local result_0 = getPointer(self).MoveSpeedFactor;
	return result_0;
end
function abi.ffi.property_setter_controller_base_move_speed_factor_set_move_speed_factor(self, value)
	getPointer(self).MoveSpeedFactor = value;
end
function abi.ffi.property_getter_controller_base_rigidity_enabled(self)
	local result_0 = getPointer(self).RigidityEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_controller_base_rigidity_enabled_set_rigidity_enabled(self, value)
	getPointer(self).RigidityEnabled = value == 1;
end
function abi.ffi.property_getter_air_controller_cancel_air_momentum(self)
	local result_0 = getPointer(self).CancelAirMomentum;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_air_controller_cancel_air_momentum_set_cancel_air_momentum(self, value)
	getPointer(self).CancelAirMomentum = value == 1;
end
function abi.ffi.property_getter_air_controller_move_max_force(self)
	local result_0 = getPointer(self).MoveMaxForce;
	return result_0;
end
function abi.ffi.property_setter_air_controller_move_max_force_set_move_max_force(self, value)
	getPointer(self).MoveMaxForce = value;
end
function abi.ffi.property_getter_air_controller_orientation_max_torque(self)
	local result_0 = getPointer(self).OrientationMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_air_controller_orientation_max_torque_set_orientation_max_torque(self, value)
	getPointer(self).OrientationMaxTorque = value;
end
function abi.ffi.property_getter_air_controller_orientation_speed_factor(self)
	local result_0 = getPointer(self).OrientationSpeedFactor;
	return result_0;
end
function abi.ffi.property_setter_air_controller_orientation_speed_factor_set_orientation_speed_factor(self, value)
	getPointer(self).OrientationSpeedFactor = value;
end
function abi.ffi.property_getter_air_controller_vector_force(self)
	local result_0 = getPointer(self).VectorForce;
	return createPointer(result_0);
end
function abi.ffi.property_setter_air_controller_vector_force_set_vector_force(self, value)
	getPointer(self).VectorForce = getPointer(value);
end
function abi.ffi.property_getter_climb_controller_acceleration_time(self)
	local result_0 = getPointer(self).AccelerationTime;
	return result_0;
end
function abi.ffi.property_setter_climb_controller_acceleration_time_set_acceleration_time(self, value)
	getPointer(self).AccelerationTime = value;
end
function abi.ffi.property_getter_climb_controller_move_max_force(self)
	local result_0 = getPointer(self).MoveMaxForce;
	return result_0;
end
function abi.ffi.property_setter_climb_controller_move_max_force_set_move_max_force(self, value)
	getPointer(self).MoveMaxForce = value;
end
function abi.ffi.property_getter_climb_controller_orientation_max_torque(self)
	local result_0 = getPointer(self).OrientationMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_climb_controller_orientation_max_torque_set_orientation_max_torque(self, value)
	getPointer(self).OrientationMaxTorque = value;
end
function abi.ffi.property_getter_climb_controller_orientation_speed_factor(self)
	local result_0 = getPointer(self).OrientationSpeedFactor;
	return result_0;
end
function abi.ffi.property_setter_climb_controller_orientation_speed_factor_set_orientation_speed_factor(self, value)
	getPointer(self).OrientationSpeedFactor = value;
end
function abi.ffi.property_getter_ground_controller_acceleration_lean(self)
	local result_0 = getPointer(self).AccelerationLean;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_acceleration_lean_set_acceleration_lean(self, value)
	getPointer(self).AccelerationLean = value;
end
function abi.ffi.property_getter_ground_controller_acceleration_time(self)
	local result_0 = getPointer(self).AccelerationTime;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_acceleration_time_set_acceleration_time(self, value)
	getPointer(self).AccelerationTime = value;
end
function abi.ffi.property_getter_ground_controller_align_speed(self)
	local result_0 = getPointer(self).AlignSpeed;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_align_speed_set_align_speed(self, value)
	getPointer(self).AlignSpeed = value;
end
function abi.ffi.property_getter_ground_controller_align_torque(self)
	local result_0 = getPointer(self).AlignTorque;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_align_torque_set_align_torque(self, value)
	getPointer(self).AlignTorque = value;
end
function abi.ffi.property_getter_ground_controller_deceleration_time(self)
	local result_0 = getPointer(self).DecelerationTime;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_deceleration_time_set_deceleration_time(self, value)
	getPointer(self).DecelerationTime = value;
end
function abi.ffi.property_getter_ground_controller_friction(self)
	local result_0 = getPointer(self).Friction;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_friction_set_friction(self, value)
	getPointer(self).Friction = value;
end
function abi.ffi.property_getter_ground_controller_friction_weight(self)
	local result_0 = getPointer(self).FrictionWeight;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_friction_weight_set_friction_weight(self, value)
	getPointer(self).FrictionWeight = value;
end
function abi.ffi.property_getter_ground_controller_ground_offset(self)
	local result_0 = getPointer(self).GroundOffset;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_ground_offset_set_ground_offset(self, value)
	getPointer(self).GroundOffset = value;
end
function abi.ffi.property_getter_ground_controller_max_slope_angle(self)
	local result_0 = getPointer(self).MaxSlopeAngle;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_max_slope_angle_set_max_slope_angle(self, value)
	getPointer(self).MaxSlopeAngle = value;
end
function abi.ffi.property_getter_ground_controller_stand_force(self)
	local result_0 = getPointer(self).StandForce;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_stand_force_set_stand_force(self, value)
	getPointer(self).StandForce = value;
end
function abi.ffi.property_getter_ground_controller_stand_speed(self)
	local result_0 = getPointer(self).StandSpeed;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_stand_speed_set_stand_speed(self, value)
	getPointer(self).StandSpeed = value;
end
function abi.ffi.property_getter_ground_controller_turning_factor(self)
	local result_0 = getPointer(self).TurningFactor;
	return result_0;
end
function abi.ffi.property_setter_ground_controller_turning_factor_set_turning_factor(self, value)
	getPointer(self).TurningFactor = value;
end
function abi.ffi.property_getter_swim_controller_acceleration_time(self)
	local result_0 = getPointer(self).AccelerationTime;
	return result_0;
end
function abi.ffi.property_setter_swim_controller_acceleration_time_set_acceleration_time(self, value)
	getPointer(self).AccelerationTime = value;
end
function abi.ffi.property_getter_swim_controller_pitch_max_torque(self)
	local result_0 = getPointer(self).PitchMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_swim_controller_pitch_max_torque_set_pitch_max_torque(self, value)
	getPointer(self).PitchMaxTorque = value;
end
function abi.ffi.property_getter_swim_controller_pitch_speed_factor(self)
	local result_0 = getPointer(self).PitchSpeedFactor;
	return result_0;
end
function abi.ffi.property_setter_swim_controller_pitch_speed_factor_set_pitch_speed_factor(self, value)
	getPointer(self).PitchSpeedFactor = value;
end
function abi.ffi.property_getter_swim_controller_roll_max_torque(self)
	local result_0 = getPointer(self).RollMaxTorque;
	return result_0;
end
function abi.ffi.property_setter_swim_controller_roll_max_torque_set_roll_max_torque(self, value)
	getPointer(self).RollMaxTorque = value;
end
function abi.ffi.property_getter_swim_controller_roll_speed_factor(self)
	local result_0 = getPointer(self).RollSpeedFactor;
	return result_0;
end
function abi.ffi.property_setter_swim_controller_roll_speed_factor_set_roll_speed_factor(self, value)
	getPointer(self).RollSpeedFactor = value;
end
function abi.ffi.property_getter_controller_manager_active_controller(self)
	local result_0 = getPointer(self).ActiveController;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_controller_manager_base_move_speed(self)
	local result_0 = getPointer(self).BaseMoveSpeed;
	return result_0;
end
function abi.ffi.property_setter_controller_manager_base_move_speed_set_base_move_speed(self, value)
	getPointer(self).BaseMoveSpeed = value;
end
function abi.ffi.property_getter_controller_manager_base_turn_speed(self)
	local result_0 = getPointer(self).BaseTurnSpeed;
	return result_0;
end
function abi.ffi.property_setter_controller_manager_base_turn_speed_set_base_turn_speed(self, value)
	getPointer(self).BaseTurnSpeed = value;
end
function abi.ffi.property_getter_controller_manager_facing_direction(self)
	local result_0 = getPointer(self).FacingDirection;
	return createPointer(result_0);
end
function abi.ffi.property_setter_controller_manager_facing_direction_set_facing_direction(self, value)
	getPointer(self).FacingDirection = getPointer(value);
end
function abi.ffi.property_getter_controller_manager_hip_height(self)
	local result_0 = getPointer(self).HipHeight;
	return result_0;
end
function abi.ffi.property_setter_controller_manager_hip_height_set_hip_height(self, value)
	getPointer(self).HipHeight = value;
end
function abi.ffi.property_getter_controller_manager_moving_direction(self)
	local result_0 = getPointer(self).MovingDirection;
	return createPointer(result_0);
end
function abi.ffi.property_setter_controller_manager_moving_direction_set_moving_direction(self, value)
	getPointer(self).MovingDirection = getPointer(value);
end
function abi.ffi.property_getter_data_model_mesh_offset(self)
	local result_0 = getPointer(self).Offset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_data_model_mesh_offset_set_offset(self, value)
	getPointer(self).Offset = getPointer(value);
end
function abi.ffi.property_getter_data_model_mesh_scale(self)
	local result_0 = getPointer(self).Scale;
	return createPointer(result_0);
end
function abi.ffi.property_setter_data_model_mesh_scale_set_scale(self, value)
	getPointer(self).Scale = getPointer(value);
end
function abi.ffi.property_getter_data_model_mesh_vertex_color(self)
	local result_0 = getPointer(self).VertexColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_data_model_mesh_vertex_color_set_vertex_color(self, value)
	getPointer(self).VertexColor = getPointer(value);
end
function abi.ffi.property_getter_file_mesh_mesh_id(self)
	local result_0 = getPointer(self).MeshId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_file_mesh_mesh_id_set_mesh_id(self, value)
	getPointer(self).MeshId = getPointer(value);
end
function abi.ffi.property_getter_file_mesh_texture_id(self)
	local result_0 = getPointer(self).TextureId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_file_mesh_texture_id_set_texture_id(self, value)
	getPointer(self).TextureId = getPointer(value);
end
function abi.ffi.property_getter_special_mesh_mesh_type(self)
	local result_0 = getPointer(self).MeshType;
	return result_0;
end
function abi.ffi.property_setter_special_mesh_mesh_type_set_mesh_type(self, value)
	getPointer(self).MeshType = value;
end
function abi.ffi.property_getter_data_store_info_created_time(self)
	local result_0 = getPointer(self).CreatedTime;
	return result_0;
end
function abi.ffi.property_getter_data_store_info_data_store_name(self)
	local result_0 = getPointer(self).DataStoreName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_store_info_updated_time(self)
	local result_0 = getPointer(self).UpdatedTime;
	return result_0;
end
function abi.ffi.property_getter_data_store_key_key_name(self)
	local result_0 = getPointer(self).KeyName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_store_key_info_created_time(self)
	local result_0 = getPointer(self).CreatedTime;
	return result_0;
end
function abi.ffi.property_getter_data_store_key_info_updated_time(self)
	local result_0 = getPointer(self).UpdatedTime;
	return result_0;
end
function abi.ffi.property_getter_data_store_key_info_version(self)
	local result_0 = getPointer(self).Version;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_store_object_version_info_created_time(self)
	local result_0 = getPointer(self).CreatedTime;
	return result_0;
end
function abi.ffi.property_getter_data_store_object_version_info_is_deleted(self)
	local result_0 = getPointer(self).IsDeleted;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_data_store_object_version_info_version(self)
	local result_0 = getPointer(self).Version;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_store_options_all_scopes(self)
	local result_0 = getPointer(self).AllScopes;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_data_store_options_all_scopes_set_all_scopes(self, value)
	getPointer(self).AllScopes = value == 1;
end
function abi.ffi.method_data_store_service_get_data_store(self, name_addr, name_len, scope_addr, scope_len, options)
	local result_0 = getPointer(self):GetDataStore(loadString(memory, name_addr, name_len), loadString(memory, scope_addr, scope_len), getPointer(options));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_store_service_get_global_data_store(self)
	local result_0 = getPointer(self):GetGlobalDataStore();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_store_service_get_ordered_data_store(self, name_addr, name_len, scope_addr, scope_len)
	local result_0 = getPointer(self):GetOrderedDataStore(loadString(memory, name_addr, name_len), loadString(memory, scope_addr, scope_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_store_service_get_request_budget_for_request_type(self, request_type)
	local result_0 = getPointer(self):GetRequestBudgetForRequestType(request_type);
	return result_0;
end
function abi.ffi.method_data_store_service_list_data_stores_async(self, prefix_addr, prefix_len, page_size, cursor_addr, cursor_len)
	local result_0 = getPointer(self):ListDataStoresAsync(loadString(memory, prefix_addr, prefix_len), page_size, loadString(memory, cursor_addr, cursor_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_debris_add_item(self, item, lifetime)
	getPointer(self):AddItem(getPointer(item), lifetime)
end
function abi.ffi.property_getter_dialog_behavior_type(self)
	local result_0 = getPointer(self).BehaviorType;
	return result_0;
end
function abi.ffi.property_setter_dialog_behavior_type_set_behavior_type(self, value)
	getPointer(self).BehaviorType = value;
end
function abi.ffi.property_getter_dialog_conversation_distance(self)
	local result_0 = getPointer(self).ConversationDistance;
	return result_0;
end
function abi.ffi.property_setter_dialog_conversation_distance_set_conversation_distance(self, value)
	getPointer(self).ConversationDistance = value;
end
function abi.ffi.property_getter_dialog_goodbye_choice_active(self)
	local result_0 = getPointer(self).GoodbyeChoiceActive;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_dialog_goodbye_choice_active_set_goodbye_choice_active(self, value)
	getPointer(self).GoodbyeChoiceActive = value == 1;
end
function abi.ffi.property_getter_dialog_goodbye_dialog(self)
	local result_0 = getPointer(self).GoodbyeDialog;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_dialog_goodbye_dialog_set_goodbye_dialog(self, value_addr, value_len)
	getPointer(self).GoodbyeDialog = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_dialog_in_use(self)
	local result_0 = getPointer(self).InUse;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_dialog_in_use_set_in_use(self, value)
	getPointer(self).InUse = value == 1;
end
function abi.ffi.property_getter_dialog_initial_prompt(self)
	local result_0 = getPointer(self).InitialPrompt;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_dialog_initial_prompt_set_initial_prompt(self, value_addr, value_len)
	getPointer(self).InitialPrompt = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_dialog_purpose(self)
	local result_0 = getPointer(self).Purpose;
	return result_0;
end
function abi.ffi.property_setter_dialog_purpose_set_purpose(self, value)
	getPointer(self).Purpose = value;
end
function abi.ffi.property_getter_dialog_tone(self)
	local result_0 = getPointer(self).Tone;
	return result_0;
end
function abi.ffi.property_setter_dialog_tone_set_tone(self, value)
	getPointer(self).Tone = value;
end
function abi.ffi.property_getter_dialog_trigger_distance(self)
	local result_0 = getPointer(self).TriggerDistance;
	return result_0;
end
function abi.ffi.property_setter_dialog_trigger_distance_set_trigger_distance(self, value)
	getPointer(self).TriggerDistance = value;
end
function abi.ffi.property_getter_dialog_trigger_offset(self)
	local result_0 = getPointer(self).TriggerOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_dialog_trigger_offset_set_trigger_offset(self, value)
	getPointer(self).TriggerOffset = getPointer(value);
end
function abi.ffi.event_dialog_dialog_choice_selected_on_dialog_choice_selected(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DialogChoiceSelected:Connect(function(player, dialog_choice)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		local dialog_choice_optional, dialog_choice_optional_0 = 0, 0;
		if (dialog_choice ~= nil) then
			dialog_choice_optional, dialog_choice_optional_0 = 1, createPointer(dialog_choice);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, dialog_choice_optional, dialog_choice_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_dialog_choice_goodbye_choice_active(self)
	local result_0 = getPointer(self).GoodbyeChoiceActive;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_dialog_choice_goodbye_choice_active_set_goodbye_choice_active(self, value)
	getPointer(self).GoodbyeChoiceActive = value == 1;
end
function abi.ffi.property_getter_dialog_choice_goodbye_dialog(self)
	local result_0 = getPointer(self).GoodbyeDialog;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_dialog_choice_goodbye_dialog_set_goodbye_dialog(self, value_addr, value_len)
	getPointer(self).GoodbyeDialog = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_dialog_choice_response_dialog(self)
	local result_0 = getPointer(self).ResponseDialog;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_dialog_choice_response_dialog_set_response_dialog(self, value_addr, value_len)
	getPointer(self).ResponseDialog = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_dialog_choice_user_dialog(self)
	local result_0 = getPointer(self).UserDialog;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_dialog_choice_user_dialog_set_user_dialog(self, value_addr, value_len)
	getPointer(self).UserDialog = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_dragger_axis_rotate(self, axis)
	getPointer(self):AxisRotate(axis)
end
function abi.ffi.method_dragger_mouse_move(self, mouse_ray)
	getPointer(self):MouseMove(getPointer(mouse_ray))
end
function abi.ffi.method_dragger_mouse_up(self)
	getPointer(self):MouseUp()
end
function abi.ffi.property_getter_dragger_service_align_dragged_objects(self)
	local result_0 = getPointer(self).AlignDraggedObjects;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_angle_snap_enabled(self)
	local result_0 = getPointer(self).AngleSnapEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_angle_snap_increment(self)
	local result_0 = getPointer(self).AngleSnapIncrement;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_animate_hover(self)
	local result_0 = getPointer(self).AnimateHover;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_collisions_enabled(self)
	local result_0 = getPointer(self).CollisionsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_dragger_coordinate_space(self)
	local result_0 = getPointer(self).DraggerCoordinateSpace;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_dragger_movement_mode(self)
	local result_0 = getPointer(self).DraggerMovementMode;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_geometry_snap_color(self)
	local result_0 = getPointer(self).GeometrySnapColor;
	return createPointer(result_0);
end
function abi.ffi.property_getter_dragger_service_hover_animate_frequency(self)
	local result_0 = getPointer(self).HoverAnimateFrequency;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_hover_thickness(self)
	local result_0 = getPointer(self).HoverThickness;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_joints_enabled(self)
	local result_0 = getPointer(self).JointsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_linear_snap_enabled(self)
	local result_0 = getPointer(self).LinearSnapEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_linear_snap_increment(self)
	local result_0 = getPointer(self).LinearSnapIncrement;
	return result_0;
end
function abi.ffi.property_getter_dragger_service_show_hover(self)
	local result_0 = getPointer(self).ShowHover;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_dragger_service_show_pivot_indicator(self)
	local result_0 = getPointer(self).ShowPivotIndicator;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_dragger_service_show_pivot_indicator_set_show_pivot_indicator(self, value)
	getPointer(self).ShowPivotIndicator = value == 1;
end
function abi.ffi.property_getter_euler_rotation_curve_rotation_order(self)
	local result_0 = getPointer(self).RotationOrder;
	return result_0;
end
function abi.ffi.property_setter_euler_rotation_curve_rotation_order_set_rotation_order(self, value)
	getPointer(self).RotationOrder = value;
end
function abi.ffi.method_euler_rotation_curve_get_rotation_at_time(self, time)
	local result_0 = getPointer(self):GetRotationAtTime(time);
	return createPointer(result_0);
end
function abi.ffi.method_euler_rotation_curve_x(self)
	local result_0 = getPointer(self):X();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_euler_rotation_curve_y(self)
	local result_0 = getPointer(self):Y();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_euler_rotation_curve_z(self)
	local result_0 = getPointer(self):Z();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_experience_invite_options_invite_message_id(self)
	local result_0 = getPointer(self).InviteMessageId;
	return result_0;
end
function abi.ffi.property_setter_experience_invite_options_invite_message_id_set_invite_message_id(self, value)
	getPointer(self).InviteMessageId = value;
end
function abi.ffi.property_getter_experience_invite_options_invite_user(self)
	local result_0 = getPointer(self).InviteUser;
	return result_0;
end
function abi.ffi.property_setter_experience_invite_options_invite_user_set_invite_user(self, value)
	getPointer(self).InviteUser = value;
end
function abi.ffi.property_getter_experience_invite_options_launch_data(self)
	local result_0 = getPointer(self).LaunchData;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_experience_invite_options_launch_data_set_launch_data(self, value_addr, value_len)
	getPointer(self).LaunchData = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_experience_invite_options_prompt_message(self)
	local result_0 = getPointer(self).PromptMessage;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_experience_invite_options_prompt_message_set_prompt_message(self, value_addr, value_len)
	getPointer(self).PromptMessage = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_explosion_blast_pressure(self)
	local result_0 = getPointer(self).BlastPressure;
	return result_0;
end
function abi.ffi.property_setter_explosion_blast_pressure_set_blast_pressure(self, value)
	getPointer(self).BlastPressure = value;
end
function abi.ffi.property_getter_explosion_blast_radius(self)
	local result_0 = getPointer(self).BlastRadius;
	return result_0;
end
function abi.ffi.property_setter_explosion_blast_radius_set_blast_radius(self, value)
	getPointer(self).BlastRadius = value;
end
function abi.ffi.property_getter_explosion_destroy_joint_radius_percent(self)
	local result_0 = getPointer(self).DestroyJointRadiusPercent;
	return result_0;
end
function abi.ffi.property_setter_explosion_destroy_joint_radius_percent_set_destroy_joint_radius_percent(self, value)
	getPointer(self).DestroyJointRadiusPercent = value;
end
function abi.ffi.property_getter_explosion_explosion_type(self)
	local result_0 = getPointer(self).ExplosionType;
	return result_0;
end
function abi.ffi.property_setter_explosion_explosion_type_set_explosion_type(self, value)
	getPointer(self).ExplosionType = value;
end
function abi.ffi.property_getter_explosion_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_explosion_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_explosion_time_scale(self)
	local result_0 = getPointer(self).TimeScale;
	return result_0;
end
function abi.ffi.property_setter_explosion_time_scale_set_time_scale(self, value)
	getPointer(self).TimeScale = value;
end
function abi.ffi.property_getter_explosion_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_explosion_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.event_explosion_hit_on_hit(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Hit:Connect(function(part, distance)
		local part_optional, part_optional_0 = 0, 0;
		if (part ~= nil) then
			part_optional, part_optional_0 = 1, createPointer(part);
		end
		invokeFunction(callback_data, callback_vtable, part_optional, part_optional_0, distance)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_face_instance_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_face_instance_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_decal_color_3(self)
	local result_0 = getPointer(self).Color3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_decal_color_3_set_color_3(self, value)
	getPointer(self).Color3 = getPointer(value);
end
function abi.ffi.property_getter_decal_local_transparency_modifier(self)
	local result_0 = getPointer(self).LocalTransparencyModifier;
	return result_0;
end
function abi.ffi.property_setter_decal_local_transparency_modifier_set_local_transparency_modifier(self, value)
	getPointer(self).LocalTransparencyModifier = value;
end
function abi.ffi.property_getter_decal_texture(self)
	local result_0 = getPointer(self).Texture;
	return createPointer(result_0);
end
function abi.ffi.property_setter_decal_texture_set_texture(self, value)
	getPointer(self).Texture = getPointer(value);
end
function abi.ffi.property_getter_decal_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return result_0;
end
function abi.ffi.property_setter_decal_transparency_set_transparency(self, value)
	getPointer(self).Transparency = value;
end
function abi.ffi.property_getter_decal_z_index(self)
	local result_0 = getPointer(self).ZIndex;
	return result_0;
end
function abi.ffi.property_setter_decal_z_index_set_z_index(self, value)
	getPointer(self).ZIndex = value;
end
function abi.ffi.property_getter_texture_offset_studs_u(self)
	local result_0 = getPointer(self).OffsetStudsU;
	return result_0;
end
function abi.ffi.property_setter_texture_offset_studs_u_set_offset_studs_u(self, value)
	getPointer(self).OffsetStudsU = value;
end
function abi.ffi.property_getter_texture_offset_studs_v(self)
	local result_0 = getPointer(self).OffsetStudsV;
	return result_0;
end
function abi.ffi.property_setter_texture_offset_studs_v_set_offset_studs_v(self, value)
	getPointer(self).OffsetStudsV = value;
end
function abi.ffi.property_getter_texture_studs_per_tile_u(self)
	local result_0 = getPointer(self).StudsPerTileU;
	return result_0;
end
function abi.ffi.property_setter_texture_studs_per_tile_u_set_studs_per_tile_u(self, value)
	getPointer(self).StudsPerTileU = value;
end
function abi.ffi.property_getter_texture_studs_per_tile_v(self)
	local result_0 = getPointer(self).StudsPerTileV;
	return result_0;
end
function abi.ffi.property_setter_texture_studs_per_tile_v_set_studs_per_tile_v(self, value)
	getPointer(self).StudsPerTileV = value;
end
function abi.ffi.property_getter_feature_face_id(self)
	local result_0 = getPointer(self).FaceId;
	return result_0;
end
function abi.ffi.property_setter_feature_face_id_set_face_id(self, value)
	getPointer(self).FaceId = value;
end
function abi.ffi.property_getter_feature_in_out(self)
	local result_0 = getPointer(self).InOut;
	return result_0;
end
function abi.ffi.property_setter_feature_in_out_set_in_out(self, value)
	getPointer(self).InOut = value;
end
function abi.ffi.property_getter_feature_left_right(self)
	local result_0 = getPointer(self).LeftRight;
	return result_0;
end
function abi.ffi.property_setter_feature_left_right_set_left_right(self, value)
	getPointer(self).LeftRight = value;
end
function abi.ffi.property_getter_feature_top_bottom(self)
	local result_0 = getPointer(self).TopBottom;
	return result_0;
end
function abi.ffi.property_setter_feature_top_bottom_set_top_bottom(self, value)
	getPointer(self).TopBottom = value;
end
function abi.ffi.property_getter_fire_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_fire_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_fire_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_fire_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_fire_heat(self)
	local result_0 = getPointer(self).Heat;
	return result_0;
end
function abi.ffi.property_setter_fire_heat_set_heat(self, value)
	getPointer(self).Heat = value;
end
function abi.ffi.property_getter_fire_secondary_color(self)
	local result_0 = getPointer(self).SecondaryColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_fire_secondary_color_set_secondary_color(self, value)
	getPointer(self).SecondaryColor = getPointer(value);
end
function abi.ffi.property_getter_fire_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_fire_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_fire_time_scale(self)
	local result_0 = getPointer(self).TimeScale;
	return result_0;
end
function abi.ffi.property_setter_fire_time_scale_set_time_scale(self, value)
	getPointer(self).TimeScale = value;
end
function abi.ffi.property_getter_float_curve_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.method_float_curve_get_key_at_index(self, index)
	local result_0 = getPointer(self):GetKeyAtIndex(index);
	return createPointer(result_0);
end
function abi.ffi.method_float_curve_get_value_at_time(self, time)
	local result_0 = getPointer(self):GetValueAtTime(time);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, result_0;
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_float_curve_remove_key_at_index(self, starting_index, count)
	local result_0 = getPointer(self):RemoveKeyAtIndex(starting_index, count);
	return result_0;
end
function abi.ffi.property_getter_force_field_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_force_field_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.property_getter_get_text_bounds_params_font(self)
	local result_0 = getPointer(self).Font;
	return createPointer(result_0);
end
function abi.ffi.property_setter_get_text_bounds_params_font_set_font(self, value)
	getPointer(self).Font = getPointer(value);
end
function abi.ffi.property_getter_get_text_bounds_params_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_get_text_bounds_params_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_get_text_bounds_params_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_get_text_bounds_params_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_get_text_bounds_params_width(self)
	local result_0 = getPointer(self).Width;
	return result_0;
end
function abi.ffi.property_setter_get_text_bounds_params_width_set_width(self, value)
	getPointer(self).Width = value;
end
function abi.ffi.method_data_store_list_keys_async(self, prefix_addr, prefix_len, page_size, cursor_addr, cursor_len)
	local result_0 = getPointer(self):ListKeysAsync(loadString(memory, prefix_addr, prefix_len), page_size, loadString(memory, cursor_addr, cursor_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_store_list_versions_async(self, key_addr, key_len, sort_direction, min_date, max_date, page_size)
	local result_0 = getPointer(self):ListVersionsAsync(loadString(memory, key_addr, key_len), sort_direction, min_date, max_date, page_size);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_store_remove_version_async(self, key_addr, key_len, version_addr, version_len)
	getPointer(self):RemoveVersionAsync(loadString(memory, key_addr, key_len), loadString(memory, version_addr, version_len))
end
function abi.ffi.method_group_service_get_allies_async(self, group_id)
	local result_0 = getPointer(self):GetAlliesAsync(group_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_group_service_get_enemies_async(self, group_id)
	local result_0 = getPointer(self):GetEnemiesAsync(group_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_gui_base_2_d_absolute_position(self)
	local result_0 = getPointer(self).AbsolutePosition;
	return createPointer(result_0);
end
function abi.ffi.property_getter_gui_base_2_d_absolute_rotation(self)
	local result_0 = getPointer(self).AbsoluteRotation;
	return result_0;
end
function abi.ffi.property_getter_gui_base_2_d_absolute_size(self)
	local result_0 = getPointer(self).AbsoluteSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_gui_base_2_d_auto_localize(self)
	local result_0 = getPointer(self).AutoLocalize;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_base_2_d_auto_localize_set_auto_localize(self, value)
	getPointer(self).AutoLocalize = value == 1;
end
function abi.ffi.property_getter_gui_base_2_d_root_localization_table(self)
	local result_0 = getPointer(self).RootLocalizationTable;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_base_2_d_root_localization_table_set_root_localization_table(self, value)
	getPointer(self).RootLocalizationTable = getPointer(value);
end
function abi.ffi.property_getter_gui_base_2_d_selection_behavior_down(self)
	local result_0 = getPointer(self).SelectionBehaviorDown;
	return result_0;
end
function abi.ffi.property_setter_gui_base_2_d_selection_behavior_down_set_selection_behavior_down(self, value)
	getPointer(self).SelectionBehaviorDown = value;
end
function abi.ffi.property_getter_gui_base_2_d_selection_behavior_left(self)
	local result_0 = getPointer(self).SelectionBehaviorLeft;
	return result_0;
end
function abi.ffi.property_setter_gui_base_2_d_selection_behavior_left_set_selection_behavior_left(self, value)
	getPointer(self).SelectionBehaviorLeft = value;
end
function abi.ffi.property_getter_gui_base_2_d_selection_behavior_right(self)
	local result_0 = getPointer(self).SelectionBehaviorRight;
	return result_0;
end
function abi.ffi.property_setter_gui_base_2_d_selection_behavior_right_set_selection_behavior_right(self, value)
	getPointer(self).SelectionBehaviorRight = value;
end
function abi.ffi.property_getter_gui_base_2_d_selection_behavior_up(self)
	local result_0 = getPointer(self).SelectionBehaviorUp;
	return result_0;
end
function abi.ffi.property_setter_gui_base_2_d_selection_behavior_up_set_selection_behavior_up(self, value)
	getPointer(self).SelectionBehaviorUp = value;
end
function abi.ffi.property_getter_gui_base_2_d_selection_group(self)
	local result_0 = getPointer(self).SelectionGroup;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_base_2_d_selection_group_set_selection_group(self, value)
	getPointer(self).SelectionGroup = value == 1;
end
function abi.ffi.event_gui_base_2_d_selection_changed_on_selection_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).SelectionChanged:Connect(function(am_i_selected, previous_selection, new_selection)
		local previous_selection_optional, previous_selection_optional_0 = 0, 0;
		if (previous_selection ~= nil) then
			previous_selection_optional, previous_selection_optional_0 = 1, createPointer(previous_selection);
		end
		local new_selection_optional, new_selection_optional_0 = 0, 0;
		if (new_selection ~= nil) then
			new_selection_optional, new_selection_optional_0 = 1, createPointer(new_selection);
		end
		invokeFunction(callback_data, callback_vtable, am_i_selected and 1 or 0, previous_selection_optional, previous_selection_optional_0, new_selection_optional, new_selection_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_gui_object_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_object_active_set_active(self, value)
	getPointer(self).Active = value == 1;
end
function abi.ffi.property_getter_gui_object_anchor_point(self)
	local result_0 = getPointer(self).AnchorPoint;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_object_anchor_point_set_anchor_point(self, value)
	getPointer(self).AnchorPoint = getPointer(value);
end
function abi.ffi.property_getter_gui_object_automatic_size(self)
	local result_0 = getPointer(self).AutomaticSize;
	return result_0;
end
function abi.ffi.property_setter_gui_object_automatic_size_set_automatic_size(self, value)
	getPointer(self).AutomaticSize = value;
end
function abi.ffi.property_getter_gui_object_background_color_3(self)
	local result_0 = getPointer(self).BackgroundColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_object_background_color_3_set_background_color_3(self, value)
	getPointer(self).BackgroundColor3 = getPointer(value);
end
function abi.ffi.property_getter_gui_object_background_transparency(self)
	local result_0 = getPointer(self).BackgroundTransparency;
	return result_0;
end
function abi.ffi.property_setter_gui_object_background_transparency_set_background_transparency(self, value)
	getPointer(self).BackgroundTransparency = value;
end
function abi.ffi.property_getter_gui_object_border_color_3(self)
	local result_0 = getPointer(self).BorderColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_object_border_color_3_set_border_color_3(self, value)
	getPointer(self).BorderColor3 = getPointer(value);
end
function abi.ffi.property_getter_gui_object_border_mode(self)
	local result_0 = getPointer(self).BorderMode;
	return result_0;
end
function abi.ffi.property_setter_gui_object_border_mode_set_border_mode(self, value)
	getPointer(self).BorderMode = value;
end
function abi.ffi.property_getter_gui_object_border_size_pixel(self)
	local result_0 = getPointer(self).BorderSizePixel;
	return result_0;
end
function abi.ffi.property_setter_gui_object_border_size_pixel_set_border_size_pixel(self, value)
	getPointer(self).BorderSizePixel = value;
end
function abi.ffi.property_getter_gui_object_clips_descendants(self)
	local result_0 = getPointer(self).ClipsDescendants;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_object_clips_descendants_set_clips_descendants(self, value)
	getPointer(self).ClipsDescendants = value == 1;
end
function abi.ffi.property_getter_gui_object_layout_order(self)
	local result_0 = getPointer(self).LayoutOrder;
	return result_0;
end
function abi.ffi.property_setter_gui_object_layout_order_set_layout_order(self, value)
	getPointer(self).LayoutOrder = value;
end
function abi.ffi.property_getter_gui_object_next_selection_down(self)
	local result_0 = getPointer(self).NextSelectionDown;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_object_next_selection_down_set_next_selection_down(self, value)
	getPointer(self).NextSelectionDown = getPointer(value);
end
function abi.ffi.property_getter_gui_object_next_selection_left(self)
	local result_0 = getPointer(self).NextSelectionLeft;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_object_next_selection_left_set_next_selection_left(self, value)
	getPointer(self).NextSelectionLeft = getPointer(value);
end
function abi.ffi.property_getter_gui_object_next_selection_right(self)
	local result_0 = getPointer(self).NextSelectionRight;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_object_next_selection_right_set_next_selection_right(self, value)
	getPointer(self).NextSelectionRight = getPointer(value);
end
function abi.ffi.property_getter_gui_object_next_selection_up(self)
	local result_0 = getPointer(self).NextSelectionUp;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_object_next_selection_up_set_next_selection_up(self, value)
	getPointer(self).NextSelectionUp = getPointer(value);
end
function abi.ffi.property_getter_gui_object_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_object_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_gui_object_rotation(self)
	local result_0 = getPointer(self).Rotation;
	return result_0;
end
function abi.ffi.property_setter_gui_object_rotation_set_rotation(self, value)
	getPointer(self).Rotation = value;
end
function abi.ffi.property_getter_gui_object_selectable(self)
	local result_0 = getPointer(self).Selectable;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_object_selectable_set_selectable(self, value)
	getPointer(self).Selectable = value == 1;
end
function abi.ffi.property_getter_gui_object_selection_image_object(self)
	local result_0 = getPointer(self).SelectionImageObject;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_object_selection_image_object_set_selection_image_object(self, value)
	getPointer(self).SelectionImageObject = getPointer(value);
end
function abi.ffi.property_getter_gui_object_selection_order(self)
	local result_0 = getPointer(self).SelectionOrder;
	return result_0;
end
function abi.ffi.property_setter_gui_object_selection_order_set_selection_order(self, value)
	getPointer(self).SelectionOrder = value;
end
function abi.ffi.property_getter_gui_object_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_object_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_gui_object_size_constraint(self)
	local result_0 = getPointer(self).SizeConstraint;
	return result_0;
end
function abi.ffi.property_setter_gui_object_size_constraint_set_size_constraint(self, value)
	getPointer(self).SizeConstraint = value;
end
function abi.ffi.property_getter_gui_object_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return result_0;
end
function abi.ffi.property_setter_gui_object_transparency_set_transparency(self, value)
	getPointer(self).Transparency = value;
end
function abi.ffi.property_getter_gui_object_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_object_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.property_getter_gui_object_z_index(self)
	local result_0 = getPointer(self).ZIndex;
	return result_0;
end
function abi.ffi.property_setter_gui_object_z_index_set_z_index(self, value)
	getPointer(self).ZIndex = value;
end
function abi.ffi.event_gui_object_input_began_on_input_began(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputBegan:Connect(function(input)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_input_changed_on_input_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputChanged:Connect(function(input)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_input_ended_on_input_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputEnded:Connect(function(input)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_mouse_enter_on_mouse_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseEnter:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_mouse_leave_on_mouse_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseLeave:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_mouse_moved_on_mouse_moved(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseMoved:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_mouse_wheel_backward_on_mouse_wheel_backward(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseWheelBackward:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_mouse_wheel_forward_on_mouse_wheel_forward(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseWheelForward:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_selection_gained_on_selection_gained(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).SelectionGained:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_selection_lost_on_selection_lost(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).SelectionLost:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_object_touch_swipe_on_touch_swipe(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchSwipe:Connect(function(swipe_direction, number_of_touches)
		invokeFunction(callback_data, callback_vtable, swipe_direction, number_of_touches)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_canvas_group_group_color_3(self)
	local result_0 = getPointer(self).GroupColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_canvas_group_group_color_3_set_group_color_3(self, value)
	getPointer(self).GroupColor3 = getPointer(value);
end
function abi.ffi.property_getter_canvas_group_group_transparency(self)
	local result_0 = getPointer(self).GroupTransparency;
	return result_0;
end
function abi.ffi.property_setter_canvas_group_group_transparency_set_group_transparency(self, value)
	getPointer(self).GroupTransparency = value;
end
function abi.ffi.property_getter_frame_style(self)
	local result_0 = getPointer(self).Style;
	return result_0;
end
function abi.ffi.property_setter_frame_style_set_style(self, value)
	getPointer(self).Style = value;
end
function abi.ffi.property_getter_gui_button_auto_button_color(self)
	local result_0 = getPointer(self).AutoButtonColor;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_button_auto_button_color_set_auto_button_color(self, value)
	getPointer(self).AutoButtonColor = value == 1;
end
function abi.ffi.property_getter_gui_button_modal(self)
	local result_0 = getPointer(self).Modal;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_button_modal_set_modal(self, value)
	getPointer(self).Modal = value == 1;
end
function abi.ffi.property_getter_gui_button_selected(self)
	local result_0 = getPointer(self).Selected;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_button_selected_set_selected(self, value)
	getPointer(self).Selected = value == 1;
end
function abi.ffi.property_getter_gui_button_style(self)
	local result_0 = getPointer(self).Style;
	return result_0;
end
function abi.ffi.property_setter_gui_button_style_set_style(self, value)
	getPointer(self).Style = value;
end
function abi.ffi.event_gui_button_activated_on_activated(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Activated:Connect(function(input_object, click_count)
		local input_object_optional, input_object_optional_0 = 0, 0;
		if (input_object ~= nil) then
			input_object_optional, input_object_optional_0 = 1, createPointer(input_object);
		end
		invokeFunction(callback_data, callback_vtable, input_object_optional, input_object_optional_0, click_count)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_1_click_on_mouse_button_1_click(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Click:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_1_down_on_mouse_button_1_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Down:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_1_up_on_mouse_button_1_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Up:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_2_click_on_mouse_button_2_click(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton2Click:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_2_down_on_mouse_button_2_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton2Down:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_button_mouse_button_2_up_on_mouse_button_2_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton2Up:Connect(function(x, y)
		invokeFunction(callback_data, callback_vtable, x, y)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_image_button_hover_image(self)
	local result_0 = getPointer(self).HoverImage;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_hover_image_set_hover_image(self, value)
	getPointer(self).HoverImage = getPointer(value);
end
function abi.ffi.property_getter_image_button_image(self)
	local result_0 = getPointer(self).Image;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_image_set_image(self, value)
	getPointer(self).Image = getPointer(value);
end
function abi.ffi.property_getter_image_button_image_color_3(self)
	local result_0 = getPointer(self).ImageColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_image_color_3_set_image_color_3(self, value)
	getPointer(self).ImageColor3 = getPointer(value);
end
function abi.ffi.property_getter_image_button_image_rect_offset(self)
	local result_0 = getPointer(self).ImageRectOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_image_rect_offset_set_image_rect_offset(self, value)
	getPointer(self).ImageRectOffset = getPointer(value);
end
function abi.ffi.property_getter_image_button_image_rect_size(self)
	local result_0 = getPointer(self).ImageRectSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_image_rect_size_set_image_rect_size(self, value)
	getPointer(self).ImageRectSize = getPointer(value);
end
function abi.ffi.property_getter_image_button_image_transparency(self)
	local result_0 = getPointer(self).ImageTransparency;
	return result_0;
end
function abi.ffi.property_setter_image_button_image_transparency_set_image_transparency(self, value)
	getPointer(self).ImageTransparency = value;
end
function abi.ffi.property_getter_image_button_is_loaded(self)
	local result_0 = getPointer(self).IsLoaded;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_image_button_pressed_image(self)
	local result_0 = getPointer(self).PressedImage;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_pressed_image_set_pressed_image(self, value)
	getPointer(self).PressedImage = getPointer(value);
end
function abi.ffi.property_getter_image_button_resample_mode(self)
	local result_0 = getPointer(self).ResampleMode;
	return result_0;
end
function abi.ffi.property_setter_image_button_resample_mode_set_resample_mode(self, value)
	getPointer(self).ResampleMode = value;
end
function abi.ffi.property_getter_image_button_scale_type(self)
	local result_0 = getPointer(self).ScaleType;
	return result_0;
end
function abi.ffi.property_setter_image_button_scale_type_set_scale_type(self, value)
	getPointer(self).ScaleType = value;
end
function abi.ffi.property_getter_image_button_slice_center(self)
	local result_0 = getPointer(self).SliceCenter;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_slice_center_set_slice_center(self, value)
	getPointer(self).SliceCenter = getPointer(value);
end
function abi.ffi.property_getter_image_button_slice_scale(self)
	local result_0 = getPointer(self).SliceScale;
	return result_0;
end
function abi.ffi.property_setter_image_button_slice_scale_set_slice_scale(self, value)
	getPointer(self).SliceScale = value;
end
function abi.ffi.property_getter_image_button_tile_size(self)
	local result_0 = getPointer(self).TileSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_button_tile_size_set_tile_size(self, value)
	getPointer(self).TileSize = getPointer(value);
end
function abi.ffi.property_getter_text_button_content_text(self)
	local result_0 = getPointer(self).ContentText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_text_button_font(self)
	local result_0 = getPointer(self).Font;
	return result_0;
end
function abi.ffi.property_setter_text_button_font_set_font(self, value)
	getPointer(self).Font = value;
end
function abi.ffi.property_getter_text_button_font_face(self)
	local result_0 = getPointer(self).FontFace;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_button_font_face_set_font_face(self, value)
	getPointer(self).FontFace = getPointer(value);
end
function abi.ffi.property_getter_text_button_line_height(self)
	local result_0 = getPointer(self).LineHeight;
	return result_0;
end
function abi.ffi.property_setter_text_button_line_height_set_line_height(self, value)
	getPointer(self).LineHeight = value;
end
function abi.ffi.property_getter_text_button_localized_text(self)
	local result_0 = getPointer(self).LocalizedText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_text_button_max_visible_graphemes(self)
	local result_0 = getPointer(self).MaxVisibleGraphemes;
	return result_0;
end
function abi.ffi.property_setter_text_button_max_visible_graphemes_set_max_visible_graphemes(self, value)
	getPointer(self).MaxVisibleGraphemes = value;
end
function abi.ffi.property_getter_text_button_rich_text(self)
	local result_0 = getPointer(self).RichText;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_button_rich_text_set_rich_text(self, value)
	getPointer(self).RichText = value == 1;
end
function abi.ffi.property_getter_text_button_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_button_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_button_text_bounds(self)
	local result_0 = getPointer(self).TextBounds;
	return createPointer(result_0);
end
function abi.ffi.property_getter_text_button_text_color_3(self)
	local result_0 = getPointer(self).TextColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_button_text_color_3_set_text_color_3(self, value)
	getPointer(self).TextColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_button_text_fits(self)
	local result_0 = getPointer(self).TextFits;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_text_button_text_scaled(self)
	local result_0 = getPointer(self).TextScaled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_button_text_scaled_set_text_scaled(self, value)
	getPointer(self).TextScaled = value == 1;
end
function abi.ffi.property_getter_text_button_text_size(self)
	local result_0 = getPointer(self).TextSize;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_size_set_text_size(self, value)
	getPointer(self).TextSize = value;
end
function abi.ffi.property_getter_text_button_text_stroke_color_3(self)
	local result_0 = getPointer(self).TextStrokeColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_button_text_stroke_color_3_set_text_stroke_color_3(self, value)
	getPointer(self).TextStrokeColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_button_text_stroke_transparency(self)
	local result_0 = getPointer(self).TextStrokeTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_stroke_transparency_set_text_stroke_transparency(self, value)
	getPointer(self).TextStrokeTransparency = value;
end
function abi.ffi.property_getter_text_button_text_transparency(self)
	local result_0 = getPointer(self).TextTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_transparency_set_text_transparency(self, value)
	getPointer(self).TextTransparency = value;
end
function abi.ffi.property_getter_text_button_text_truncate(self)
	local result_0 = getPointer(self).TextTruncate;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_truncate_set_text_truncate(self, value)
	getPointer(self).TextTruncate = value;
end
function abi.ffi.property_getter_text_button_text_wrapped(self)
	local result_0 = getPointer(self).TextWrapped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_button_text_wrapped_set_text_wrapped(self, value)
	getPointer(self).TextWrapped = value == 1;
end
function abi.ffi.property_getter_text_button_text_x_alignment(self)
	local result_0 = getPointer(self).TextXAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_x_alignment_set_text_x_alignment(self, value)
	getPointer(self).TextXAlignment = value;
end
function abi.ffi.property_getter_text_button_text_y_alignment(self)
	local result_0 = getPointer(self).TextYAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_button_text_y_alignment_set_text_y_alignment(self, value)
	getPointer(self).TextYAlignment = value;
end
function abi.ffi.property_getter_image_label_image(self)
	local result_0 = getPointer(self).Image;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_image_set_image(self, value)
	getPointer(self).Image = getPointer(value);
end
function abi.ffi.property_getter_image_label_image_color_3(self)
	local result_0 = getPointer(self).ImageColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_image_color_3_set_image_color_3(self, value)
	getPointer(self).ImageColor3 = getPointer(value);
end
function abi.ffi.property_getter_image_label_image_rect_offset(self)
	local result_0 = getPointer(self).ImageRectOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_image_rect_offset_set_image_rect_offset(self, value)
	getPointer(self).ImageRectOffset = getPointer(value);
end
function abi.ffi.property_getter_image_label_image_rect_size(self)
	local result_0 = getPointer(self).ImageRectSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_image_rect_size_set_image_rect_size(self, value)
	getPointer(self).ImageRectSize = getPointer(value);
end
function abi.ffi.property_getter_image_label_image_transparency(self)
	local result_0 = getPointer(self).ImageTransparency;
	return result_0;
end
function abi.ffi.property_setter_image_label_image_transparency_set_image_transparency(self, value)
	getPointer(self).ImageTransparency = value;
end
function abi.ffi.property_getter_image_label_is_loaded(self)
	local result_0 = getPointer(self).IsLoaded;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_image_label_resample_mode(self)
	local result_0 = getPointer(self).ResampleMode;
	return result_0;
end
function abi.ffi.property_setter_image_label_resample_mode_set_resample_mode(self, value)
	getPointer(self).ResampleMode = value;
end
function abi.ffi.property_getter_image_label_scale_type(self)
	local result_0 = getPointer(self).ScaleType;
	return result_0;
end
function abi.ffi.property_setter_image_label_scale_type_set_scale_type(self, value)
	getPointer(self).ScaleType = value;
end
function abi.ffi.property_getter_image_label_slice_center(self)
	local result_0 = getPointer(self).SliceCenter;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_slice_center_set_slice_center(self, value)
	getPointer(self).SliceCenter = getPointer(value);
end
function abi.ffi.property_getter_image_label_slice_scale(self)
	local result_0 = getPointer(self).SliceScale;
	return result_0;
end
function abi.ffi.property_setter_image_label_slice_scale_set_slice_scale(self, value)
	getPointer(self).SliceScale = value;
end
function abi.ffi.property_getter_image_label_tile_size(self)
	local result_0 = getPointer(self).TileSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_label_tile_size_set_tile_size(self, value)
	getPointer(self).TileSize = getPointer(value);
end
function abi.ffi.property_getter_text_label_content_text(self)
	local result_0 = getPointer(self).ContentText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_text_label_font(self)
	local result_0 = getPointer(self).Font;
	return result_0;
end
function abi.ffi.property_setter_text_label_font_set_font(self, value)
	getPointer(self).Font = value;
end
function abi.ffi.property_getter_text_label_font_face(self)
	local result_0 = getPointer(self).FontFace;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_label_font_face_set_font_face(self, value)
	getPointer(self).FontFace = getPointer(value);
end
function abi.ffi.property_getter_text_label_line_height(self)
	local result_0 = getPointer(self).LineHeight;
	return result_0;
end
function abi.ffi.property_setter_text_label_line_height_set_line_height(self, value)
	getPointer(self).LineHeight = value;
end
function abi.ffi.property_getter_text_label_localized_text(self)
	local result_0 = getPointer(self).LocalizedText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_text_label_max_visible_graphemes(self)
	local result_0 = getPointer(self).MaxVisibleGraphemes;
	return result_0;
end
function abi.ffi.property_setter_text_label_max_visible_graphemes_set_max_visible_graphemes(self, value)
	getPointer(self).MaxVisibleGraphemes = value;
end
function abi.ffi.property_getter_text_label_rich_text(self)
	local result_0 = getPointer(self).RichText;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_label_rich_text_set_rich_text(self, value)
	getPointer(self).RichText = value == 1;
end
function abi.ffi.property_getter_text_label_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_label_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_label_text_bounds(self)
	local result_0 = getPointer(self).TextBounds;
	return createPointer(result_0);
end
function abi.ffi.property_getter_text_label_text_color_3(self)
	local result_0 = getPointer(self).TextColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_label_text_color_3_set_text_color_3(self, value)
	getPointer(self).TextColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_label_text_fits(self)
	local result_0 = getPointer(self).TextFits;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_text_label_text_scaled(self)
	local result_0 = getPointer(self).TextScaled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_label_text_scaled_set_text_scaled(self, value)
	getPointer(self).TextScaled = value == 1;
end
function abi.ffi.property_getter_text_label_text_size(self)
	local result_0 = getPointer(self).TextSize;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_size_set_text_size(self, value)
	getPointer(self).TextSize = value;
end
function abi.ffi.property_getter_text_label_text_stroke_color_3(self)
	local result_0 = getPointer(self).TextStrokeColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_label_text_stroke_color_3_set_text_stroke_color_3(self, value)
	getPointer(self).TextStrokeColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_label_text_stroke_transparency(self)
	local result_0 = getPointer(self).TextStrokeTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_stroke_transparency_set_text_stroke_transparency(self, value)
	getPointer(self).TextStrokeTransparency = value;
end
function abi.ffi.property_getter_text_label_text_transparency(self)
	local result_0 = getPointer(self).TextTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_transparency_set_text_transparency(self, value)
	getPointer(self).TextTransparency = value;
end
function abi.ffi.property_getter_text_label_text_truncate(self)
	local result_0 = getPointer(self).TextTruncate;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_truncate_set_text_truncate(self, value)
	getPointer(self).TextTruncate = value;
end
function abi.ffi.property_getter_text_label_text_wrapped(self)
	local result_0 = getPointer(self).TextWrapped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_label_text_wrapped_set_text_wrapped(self, value)
	getPointer(self).TextWrapped = value == 1;
end
function abi.ffi.property_getter_text_label_text_x_alignment(self)
	local result_0 = getPointer(self).TextXAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_x_alignment_set_text_x_alignment(self, value)
	getPointer(self).TextXAlignment = value;
end
function abi.ffi.property_getter_text_label_text_y_alignment(self)
	local result_0 = getPointer(self).TextYAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_label_text_y_alignment_set_text_y_alignment(self, value)
	getPointer(self).TextYAlignment = value;
end
function abi.ffi.property_getter_scrolling_frame_absolute_canvas_size(self)
	local result_0 = getPointer(self).AbsoluteCanvasSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_scrolling_frame_absolute_window_size(self)
	local result_0 = getPointer(self).AbsoluteWindowSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_scrolling_frame_automatic_canvas_size(self)
	local result_0 = getPointer(self).AutomaticCanvasSize;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_automatic_canvas_size_set_automatic_canvas_size(self, value)
	getPointer(self).AutomaticCanvasSize = value;
end
function abi.ffi.property_getter_scrolling_frame_bottom_image(self)
	local result_0 = getPointer(self).BottomImage;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_bottom_image_set_bottom_image(self, value)
	getPointer(self).BottomImage = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_canvas_position(self)
	local result_0 = getPointer(self).CanvasPosition;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_canvas_position_set_canvas_position(self, value)
	getPointer(self).CanvasPosition = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_canvas_size(self)
	local result_0 = getPointer(self).CanvasSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_canvas_size_set_canvas_size(self, value)
	getPointer(self).CanvasSize = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_elastic_behavior(self)
	local result_0 = getPointer(self).ElasticBehavior;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_elastic_behavior_set_elastic_behavior(self, value)
	getPointer(self).ElasticBehavior = value;
end
function abi.ffi.property_getter_scrolling_frame_horizontal_scroll_bar_inset(self)
	local result_0 = getPointer(self).HorizontalScrollBarInset;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_horizontal_scroll_bar_inset_set_horizontal_scroll_bar_inset(self, value)
	getPointer(self).HorizontalScrollBarInset = value;
end
function abi.ffi.property_getter_scrolling_frame_mid_image(self)
	local result_0 = getPointer(self).MidImage;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_mid_image_set_mid_image(self, value)
	getPointer(self).MidImage = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_scroll_bar_image_color_3(self)
	local result_0 = getPointer(self).ScrollBarImageColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_scroll_bar_image_color_3_set_scroll_bar_image_color_3(self, value)
	getPointer(self).ScrollBarImageColor3 = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_scroll_bar_image_transparency(self)
	local result_0 = getPointer(self).ScrollBarImageTransparency;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_scroll_bar_image_transparency_set_scroll_bar_image_transparency(self, value)
	getPointer(self).ScrollBarImageTransparency = value;
end
function abi.ffi.property_getter_scrolling_frame_scroll_bar_thickness(self)
	local result_0 = getPointer(self).ScrollBarThickness;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_scroll_bar_thickness_set_scroll_bar_thickness(self, value)
	getPointer(self).ScrollBarThickness = value;
end
function abi.ffi.property_getter_scrolling_frame_scrolling_direction(self)
	local result_0 = getPointer(self).ScrollingDirection;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_scrolling_direction_set_scrolling_direction(self, value)
	getPointer(self).ScrollingDirection = value;
end
function abi.ffi.property_getter_scrolling_frame_scrolling_enabled(self)
	local result_0 = getPointer(self).ScrollingEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_scrolling_frame_scrolling_enabled_set_scrolling_enabled(self, value)
	getPointer(self).ScrollingEnabled = value == 1;
end
function abi.ffi.property_getter_scrolling_frame_top_image(self)
	local result_0 = getPointer(self).TopImage;
	return createPointer(result_0);
end
function abi.ffi.property_setter_scrolling_frame_top_image_set_top_image(self, value)
	getPointer(self).TopImage = getPointer(value);
end
function abi.ffi.property_getter_scrolling_frame_vertical_scroll_bar_inset(self)
	local result_0 = getPointer(self).VerticalScrollBarInset;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_vertical_scroll_bar_inset_set_vertical_scroll_bar_inset(self, value)
	getPointer(self).VerticalScrollBarInset = value;
end
function abi.ffi.property_getter_scrolling_frame_vertical_scroll_bar_position(self)
	local result_0 = getPointer(self).VerticalScrollBarPosition;
	return result_0;
end
function abi.ffi.property_setter_scrolling_frame_vertical_scroll_bar_position_set_vertical_scroll_bar_position(self, value)
	getPointer(self).VerticalScrollBarPosition = value;
end
function abi.ffi.property_getter_text_box_clear_text_on_focus(self)
	local result_0 = getPointer(self).ClearTextOnFocus;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_clear_text_on_focus_set_clear_text_on_focus(self, value)
	getPointer(self).ClearTextOnFocus = value == 1;
end
function abi.ffi.property_getter_text_box_content_text(self)
	local result_0 = getPointer(self).ContentText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_text_box_cursor_position(self)
	local result_0 = getPointer(self).CursorPosition;
	return result_0;
end
function abi.ffi.property_setter_text_box_cursor_position_set_cursor_position(self, value)
	getPointer(self).CursorPosition = value;
end
function abi.ffi.property_getter_text_box_font(self)
	local result_0 = getPointer(self).Font;
	return result_0;
end
function abi.ffi.property_setter_text_box_font_set_font(self, value)
	getPointer(self).Font = value;
end
function abi.ffi.property_getter_text_box_font_face(self)
	local result_0 = getPointer(self).FontFace;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_box_font_face_set_font_face(self, value)
	getPointer(self).FontFace = getPointer(value);
end
function abi.ffi.property_getter_text_box_line_height(self)
	local result_0 = getPointer(self).LineHeight;
	return result_0;
end
function abi.ffi.property_setter_text_box_line_height_set_line_height(self, value)
	getPointer(self).LineHeight = value;
end
function abi.ffi.property_getter_text_box_max_visible_graphemes(self)
	local result_0 = getPointer(self).MaxVisibleGraphemes;
	return result_0;
end
function abi.ffi.property_setter_text_box_max_visible_graphemes_set_max_visible_graphemes(self, value)
	getPointer(self).MaxVisibleGraphemes = value;
end
function abi.ffi.property_getter_text_box_multi_line(self)
	local result_0 = getPointer(self).MultiLine;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_multi_line_set_multi_line(self, value)
	getPointer(self).MultiLine = value == 1;
end
function abi.ffi.property_getter_text_box_placeholder_color_3(self)
	local result_0 = getPointer(self).PlaceholderColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_box_placeholder_color_3_set_placeholder_color_3(self, value)
	getPointer(self).PlaceholderColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_box_placeholder_text(self)
	local result_0 = getPointer(self).PlaceholderText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_box_placeholder_text_set_placeholder_text(self, value_addr, value_len)
	getPointer(self).PlaceholderText = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_box_rich_text(self)
	local result_0 = getPointer(self).RichText;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_rich_text_set_rich_text(self, value)
	getPointer(self).RichText = value == 1;
end
function abi.ffi.property_getter_text_box_selection_start(self)
	local result_0 = getPointer(self).SelectionStart;
	return result_0;
end
function abi.ffi.property_setter_text_box_selection_start_set_selection_start(self, value)
	getPointer(self).SelectionStart = value;
end
function abi.ffi.property_getter_text_box_show_native_input(self)
	local result_0 = getPointer(self).ShowNativeInput;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_show_native_input_set_show_native_input(self, value)
	getPointer(self).ShowNativeInput = value == 1;
end
function abi.ffi.property_getter_text_box_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_box_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_box_text_bounds(self)
	local result_0 = getPointer(self).TextBounds;
	return createPointer(result_0);
end
function abi.ffi.property_getter_text_box_text_color_3(self)
	local result_0 = getPointer(self).TextColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_box_text_color_3_set_text_color_3(self, value)
	getPointer(self).TextColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_box_text_editable(self)
	local result_0 = getPointer(self).TextEditable;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_text_editable_set_text_editable(self, value)
	getPointer(self).TextEditable = value == 1;
end
function abi.ffi.property_getter_text_box_text_fits(self)
	local result_0 = getPointer(self).TextFits;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_text_box_text_scaled(self)
	local result_0 = getPointer(self).TextScaled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_text_scaled_set_text_scaled(self, value)
	getPointer(self).TextScaled = value == 1;
end
function abi.ffi.property_getter_text_box_text_size(self)
	local result_0 = getPointer(self).TextSize;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_size_set_text_size(self, value)
	getPointer(self).TextSize = value;
end
function abi.ffi.property_getter_text_box_text_stroke_color_3(self)
	local result_0 = getPointer(self).TextStrokeColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_box_text_stroke_color_3_set_text_stroke_color_3(self, value)
	getPointer(self).TextStrokeColor3 = getPointer(value);
end
function abi.ffi.property_getter_text_box_text_stroke_transparency(self)
	local result_0 = getPointer(self).TextStrokeTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_stroke_transparency_set_text_stroke_transparency(self, value)
	getPointer(self).TextStrokeTransparency = value;
end
function abi.ffi.property_getter_text_box_text_transparency(self)
	local result_0 = getPointer(self).TextTransparency;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_transparency_set_text_transparency(self, value)
	getPointer(self).TextTransparency = value;
end
function abi.ffi.property_getter_text_box_text_truncate(self)
	local result_0 = getPointer(self).TextTruncate;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_truncate_set_text_truncate(self, value)
	getPointer(self).TextTruncate = value;
end
function abi.ffi.property_getter_text_box_text_wrapped(self)
	local result_0 = getPointer(self).TextWrapped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_box_text_wrapped_set_text_wrapped(self, value)
	getPointer(self).TextWrapped = value == 1;
end
function abi.ffi.property_getter_text_box_text_x_alignment(self)
	local result_0 = getPointer(self).TextXAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_x_alignment_set_text_x_alignment(self, value)
	getPointer(self).TextXAlignment = value;
end
function abi.ffi.property_getter_text_box_text_y_alignment(self)
	local result_0 = getPointer(self).TextYAlignment;
	return result_0;
end
function abi.ffi.property_setter_text_box_text_y_alignment_set_text_y_alignment(self, value)
	getPointer(self).TextYAlignment = value;
end
function abi.ffi.method_text_box_capture_focus(self)
	getPointer(self):CaptureFocus()
end
function abi.ffi.method_text_box_is_focused(self)
	local result_0 = getPointer(self):IsFocused();
	return result_0 and 1 or 0;
end
function abi.ffi.method_text_box_release_focus(self, submitted)
	getPointer(self):ReleaseFocus(submitted == 1)
end
function abi.ffi.event_text_box_focus_lost_on_focus_lost(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).FocusLost:Connect(function(enter_pressed, input_that_caused_focus_loss)
		local input_that_caused_focus_loss_optional, input_that_caused_focus_loss_optional_0 = 0, 0;
		if (input_that_caused_focus_loss ~= nil) then
			input_that_caused_focus_loss_optional, input_that_caused_focus_loss_optional_0 = 1, createPointer(input_that_caused_focus_loss);
		end
		invokeFunction(callback_data, callback_vtable, enter_pressed and 1 or 0, input_that_caused_focus_loss_optional, input_that_caused_focus_loss_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_text_box_focused_on_focused(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Focused:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_text_box_return_pressed_from_on_screen_keyboard_on_return_pressed_from_on_screen_keyboard(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ReturnPressedFromOnScreenKeyboard:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_video_frame_is_loaded(self)
	local result_0 = getPointer(self).IsLoaded;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_video_frame_looped(self)
	local result_0 = getPointer(self).Looped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_video_frame_looped_set_looped(self, value)
	getPointer(self).Looped = value == 1;
end
function abi.ffi.property_getter_video_frame_playing(self)
	local result_0 = getPointer(self).Playing;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_video_frame_playing_set_playing(self, value)
	getPointer(self).Playing = value == 1;
end
function abi.ffi.property_getter_video_frame_resolution(self)
	local result_0 = getPointer(self).Resolution;
	return createPointer(result_0);
end
function abi.ffi.property_getter_video_frame_time_length(self)
	local result_0 = getPointer(self).TimeLength;
	return result_0;
end
function abi.ffi.property_getter_video_frame_time_position(self)
	local result_0 = getPointer(self).TimePosition;
	return result_0;
end
function abi.ffi.property_setter_video_frame_time_position_set_time_position(self, value)
	getPointer(self).TimePosition = value;
end
function abi.ffi.property_getter_video_frame_video(self)
	local result_0 = getPointer(self).Video;
	return createPointer(result_0);
end
function abi.ffi.property_setter_video_frame_video_set_video(self, value)
	getPointer(self).Video = getPointer(value);
end
function abi.ffi.property_getter_video_frame_volume(self)
	local result_0 = getPointer(self).Volume;
	return result_0;
end
function abi.ffi.property_setter_video_frame_volume_set_volume(self, value)
	getPointer(self).Volume = value;
end
function abi.ffi.method_video_frame_pause(self)
	getPointer(self):Pause()
end
function abi.ffi.method_video_frame_play(self)
	getPointer(self):Play()
end
function abi.ffi.event_video_frame_did_loop_on_did_loop(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DidLoop:Connect(function(video)
		local video_len = #video;
		local video_content = allocString(video_len);
		for i = 1, video_len do
			storeU8(memory, video_content + (i - 1), string.byte(video:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, video_content, video_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_video_frame_ended_on_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Ended:Connect(function(video)
		local video_len = #video;
		local video_content = allocString(video_len);
		for i = 1, video_len do
			storeU8(memory, video_content + (i - 1), string.byte(video:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, video_content, video_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_video_frame_loaded_on_loaded(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Loaded:Connect(function(video)
		local video_len = #video;
		local video_content = allocString(video_len);
		for i = 1, video_len do
			storeU8(memory, video_content + (i - 1), string.byte(video:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, video_content, video_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_video_frame_paused_on_paused(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Paused:Connect(function(video)
		local video_len = #video;
		local video_content = allocString(video_len);
		for i = 1, video_len do
			storeU8(memory, video_content + (i - 1), string.byte(video:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, video_content, video_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_video_frame_played_on_played(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Played:Connect(function(video)
		local video_len = #video;
		local video_content = allocString(video_len);
		for i = 1, video_len do
			storeU8(memory, video_content + (i - 1), string.byte(video:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, video_content, video_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_viewport_frame_ambient(self)
	local result_0 = getPointer(self).Ambient;
	return createPointer(result_0);
end
function abi.ffi.property_setter_viewport_frame_ambient_set_ambient(self, value)
	getPointer(self).Ambient = getPointer(value);
end
function abi.ffi.property_getter_viewport_frame_current_camera(self)
	local result_0 = getPointer(self).CurrentCamera;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_viewport_frame_current_camera_set_current_camera(self, value)
	getPointer(self).CurrentCamera = getPointer(value);
end
function abi.ffi.property_getter_viewport_frame_image_color_3(self)
	local result_0 = getPointer(self).ImageColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_viewport_frame_image_color_3_set_image_color_3(self, value)
	getPointer(self).ImageColor3 = getPointer(value);
end
function abi.ffi.property_getter_viewport_frame_image_transparency(self)
	local result_0 = getPointer(self).ImageTransparency;
	return result_0;
end
function abi.ffi.property_setter_viewport_frame_image_transparency_set_image_transparency(self, value)
	getPointer(self).ImageTransparency = value;
end
function abi.ffi.property_getter_viewport_frame_light_color(self)
	local result_0 = getPointer(self).LightColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_viewport_frame_light_color_set_light_color(self, value)
	getPointer(self).LightColor = getPointer(value);
end
function abi.ffi.property_getter_viewport_frame_light_direction(self)
	local result_0 = getPointer(self).LightDirection;
	return createPointer(result_0);
end
function abi.ffi.property_setter_viewport_frame_light_direction_set_light_direction(self, value)
	getPointer(self).LightDirection = getPointer(value);
end
function abi.ffi.property_getter_layer_collector_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_layer_collector_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_layer_collector_reset_on_spawn(self)
	local result_0 = getPointer(self).ResetOnSpawn;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_layer_collector_reset_on_spawn_set_reset_on_spawn(self, value)
	getPointer(self).ResetOnSpawn = value == 1;
end
function abi.ffi.property_getter_layer_collector_z_index_behavior(self)
	local result_0 = getPointer(self).ZIndexBehavior;
	return result_0;
end
function abi.ffi.property_setter_layer_collector_z_index_behavior_set_z_index_behavior(self, value)
	getPointer(self).ZIndexBehavior = value;
end
function abi.ffi.property_getter_billboard_gui_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_billboard_gui_active_set_active(self, value)
	getPointer(self).Active = value == 1;
end
function abi.ffi.property_getter_billboard_gui_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_billboard_gui_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_always_on_top(self)
	local result_0 = getPointer(self).AlwaysOnTop;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_billboard_gui_always_on_top_set_always_on_top(self, value)
	getPointer(self).AlwaysOnTop = value == 1;
end
function abi.ffi.property_getter_billboard_gui_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_billboard_gui_clips_descendants(self)
	local result_0 = getPointer(self).ClipsDescendants;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_billboard_gui_clips_descendants_set_clips_descendants(self, value)
	getPointer(self).ClipsDescendants = value == 1;
end
function abi.ffi.property_getter_billboard_gui_current_distance(self)
	local result_0 = getPointer(self).CurrentDistance;
	return result_0;
end
function abi.ffi.property_getter_billboard_gui_distance_lower_limit(self)
	local result_0 = getPointer(self).DistanceLowerLimit;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_distance_lower_limit_set_distance_lower_limit(self, value)
	getPointer(self).DistanceLowerLimit = value;
end
function abi.ffi.property_getter_billboard_gui_distance_step(self)
	local result_0 = getPointer(self).DistanceStep;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_distance_step_set_distance_step(self, value)
	getPointer(self).DistanceStep = value;
end
function abi.ffi.property_getter_billboard_gui_distance_upper_limit(self)
	local result_0 = getPointer(self).DistanceUpperLimit;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_distance_upper_limit_set_distance_upper_limit(self, value)
	getPointer(self).DistanceUpperLimit = value;
end
function abi.ffi.property_getter_billboard_gui_extents_offset(self)
	local result_0 = getPointer(self).ExtentsOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_extents_offset_set_extents_offset(self, value)
	getPointer(self).ExtentsOffset = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_extents_offset_world_space(self)
	local result_0 = getPointer(self).ExtentsOffsetWorldSpace;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_extents_offset_world_space_set_extents_offset_world_space(self, value)
	getPointer(self).ExtentsOffsetWorldSpace = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_light_influence(self)
	local result_0 = getPointer(self).LightInfluence;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_light_influence_set_light_influence(self, value)
	getPointer(self).LightInfluence = value;
end
function abi.ffi.property_getter_billboard_gui_max_distance(self)
	local result_0 = getPointer(self).MaxDistance;
	return result_0;
end
function abi.ffi.property_setter_billboard_gui_max_distance_set_max_distance(self, value)
	getPointer(self).MaxDistance = value;
end
function abi.ffi.property_getter_billboard_gui_player_to_hide_from(self)
	local result_0 = getPointer(self).PlayerToHideFrom;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_billboard_gui_player_to_hide_from_set_player_to_hide_from(self, value)
	getPointer(self).PlayerToHideFrom = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_size_offset(self)
	local result_0 = getPointer(self).SizeOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_size_offset_set_size_offset(self, value)
	getPointer(self).SizeOffset = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_studs_offset(self)
	local result_0 = getPointer(self).StudsOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_studs_offset_set_studs_offset(self, value)
	getPointer(self).StudsOffset = getPointer(value);
end
function abi.ffi.property_getter_billboard_gui_studs_offset_world_space(self)
	local result_0 = getPointer(self).StudsOffsetWorldSpace;
	return createPointer(result_0);
end
function abi.ffi.property_setter_billboard_gui_studs_offset_world_space_set_studs_offset_world_space(self, value)
	getPointer(self).StudsOffsetWorldSpace = getPointer(value);
end
function abi.ffi.property_getter_screen_gui_clip_to_device_safe_area(self)
	local result_0 = getPointer(self).ClipToDeviceSafeArea;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screen_gui_clip_to_device_safe_area_set_clip_to_device_safe_area(self, value)
	getPointer(self).ClipToDeviceSafeArea = value == 1;
end
function abi.ffi.property_getter_screen_gui_display_order(self)
	local result_0 = getPointer(self).DisplayOrder;
	return result_0;
end
function abi.ffi.property_setter_screen_gui_display_order_set_display_order(self, value)
	getPointer(self).DisplayOrder = value;
end
function abi.ffi.property_getter_screen_gui_ignore_gui_inset(self)
	local result_0 = getPointer(self).IgnoreGuiInset;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screen_gui_ignore_gui_inset_set_ignore_gui_inset(self, value)
	getPointer(self).IgnoreGuiInset = value == 1;
end
function abi.ffi.property_getter_screen_gui_safe_area_compatibility(self)
	local result_0 = getPointer(self).SafeAreaCompatibility;
	return result_0;
end
function abi.ffi.property_setter_screen_gui_safe_area_compatibility_set_safe_area_compatibility(self, value)
	getPointer(self).SafeAreaCompatibility = value;
end
function abi.ffi.property_getter_surface_gui_base_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_surface_gui_base_active_set_active(self, value)
	getPointer(self).Active = value == 1;
end
function abi.ffi.property_getter_surface_gui_base_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_surface_gui_base_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_surface_gui_base_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_base_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_ad_gui_ad_shape(self)
	local result_0 = getPointer(self).AdShape;
	return result_0;
end
function abi.ffi.property_setter_ad_gui_ad_shape_set_ad_shape(self, value)
	getPointer(self).AdShape = value;
end
function abi.ffi.property_getter_surface_gui_always_on_top(self)
	local result_0 = getPointer(self).AlwaysOnTop;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_surface_gui_always_on_top_set_always_on_top(self, value)
	getPointer(self).AlwaysOnTop = value == 1;
end
function abi.ffi.property_getter_surface_gui_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_surface_gui_canvas_size(self)
	local result_0 = getPointer(self).CanvasSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_surface_gui_canvas_size_set_canvas_size(self, value)
	getPointer(self).CanvasSize = getPointer(value);
end
function abi.ffi.property_getter_surface_gui_clips_descendants(self)
	local result_0 = getPointer(self).ClipsDescendants;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_surface_gui_clips_descendants_set_clips_descendants(self, value)
	getPointer(self).ClipsDescendants = value == 1;
end
function abi.ffi.property_getter_surface_gui_light_influence(self)
	local result_0 = getPointer(self).LightInfluence;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_light_influence_set_light_influence(self, value)
	getPointer(self).LightInfluence = value;
end
function abi.ffi.property_getter_surface_gui_pixels_per_stud(self)
	local result_0 = getPointer(self).PixelsPerStud;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_pixels_per_stud_set_pixels_per_stud(self, value)
	getPointer(self).PixelsPerStud = value;
end
function abi.ffi.property_getter_surface_gui_sizing_mode(self)
	local result_0 = getPointer(self).SizingMode;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_sizing_mode_set_sizing_mode(self, value)
	getPointer(self).SizingMode = value;
end
function abi.ffi.property_getter_surface_gui_tool_punch_through_distance(self)
	local result_0 = getPointer(self).ToolPunchThroughDistance;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_tool_punch_through_distance_set_tool_punch_through_distance(self, value)
	getPointer(self).ToolPunchThroughDistance = value;
end
function abi.ffi.property_getter_surface_gui_z_offset(self)
	local result_0 = getPointer(self).ZOffset;
	return result_0;
end
function abi.ffi.property_setter_surface_gui_z_offset_set_z_offset(self, value)
	getPointer(self).ZOffset = value;
end
function abi.ffi.property_getter_gui_base_3_d_color_3(self)
	local result_0 = getPointer(self).Color3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_gui_base_3_d_color_3_set_color_3(self, value)
	getPointer(self).Color3 = getPointer(value);
end
function abi.ffi.property_getter_gui_base_3_d_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return result_0;
end
function abi.ffi.property_setter_gui_base_3_d_transparency_set_transparency(self, value)
	getPointer(self).Transparency = value;
end
function abi.ffi.property_getter_gui_base_3_d_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_base_3_d_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.property_getter_instance_adornment_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_instance_adornment_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_selection_box_line_thickness(self)
	local result_0 = getPointer(self).LineThickness;
	return result_0;
end
function abi.ffi.property_setter_selection_box_line_thickness_set_line_thickness(self, value)
	getPointer(self).LineThickness = value;
end
function abi.ffi.property_getter_selection_box_surface_color_3(self)
	local result_0 = getPointer(self).SurfaceColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_selection_box_surface_color_3_set_surface_color_3(self, value)
	getPointer(self).SurfaceColor3 = getPointer(value);
end
function abi.ffi.property_getter_selection_box_surface_transparency(self)
	local result_0 = getPointer(self).SurfaceTransparency;
	return result_0;
end
function abi.ffi.property_setter_selection_box_surface_transparency_set_surface_transparency(self, value)
	getPointer(self).SurfaceTransparency = value;
end
function abi.ffi.property_getter_pv_adornment_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_pv_adornment_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_handle_adornment_adorn_culling_mode(self)
	local result_0 = getPointer(self).AdornCullingMode;
	return result_0;
end
function abi.ffi.property_setter_handle_adornment_adorn_culling_mode_set_adorn_culling_mode(self, value)
	getPointer(self).AdornCullingMode = value;
end
function abi.ffi.property_getter_handle_adornment_always_on_top(self)
	local result_0 = getPointer(self).AlwaysOnTop;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_handle_adornment_always_on_top_set_always_on_top(self, value)
	getPointer(self).AlwaysOnTop = value == 1;
end
function abi.ffi.property_getter_handle_adornment_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_handle_adornment_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_handle_adornment_size_relative_offset(self)
	local result_0 = getPointer(self).SizeRelativeOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_handle_adornment_size_relative_offset_set_size_relative_offset(self, value)
	getPointer(self).SizeRelativeOffset = getPointer(value);
end
function abi.ffi.property_getter_handle_adornment_z_index(self)
	local result_0 = getPointer(self).ZIndex;
	return result_0;
end
function abi.ffi.property_setter_handle_adornment_z_index_set_z_index(self, value)
	getPointer(self).ZIndex = value;
end
function abi.ffi.event_handle_adornment_mouse_button_1_down_on_mouse_button_1_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Down:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handle_adornment_mouse_button_1_up_on_mouse_button_1_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Up:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handle_adornment_mouse_enter_on_mouse_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseEnter:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handle_adornment_mouse_leave_on_mouse_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseLeave:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_box_handle_adornment_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_box_handle_adornment_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_cone_handle_adornment_height(self)
	local result_0 = getPointer(self).Height;
	return result_0;
end
function abi.ffi.property_setter_cone_handle_adornment_height_set_height(self, value)
	getPointer(self).Height = value;
end
function abi.ffi.property_getter_cone_handle_adornment_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_cone_handle_adornment_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_cylinder_handle_adornment_angle(self)
	local result_0 = getPointer(self).Angle;
	return result_0;
end
function abi.ffi.property_setter_cylinder_handle_adornment_angle_set_angle(self, value)
	getPointer(self).Angle = value;
end
function abi.ffi.property_getter_cylinder_handle_adornment_height(self)
	local result_0 = getPointer(self).Height;
	return result_0;
end
function abi.ffi.property_setter_cylinder_handle_adornment_height_set_height(self, value)
	getPointer(self).Height = value;
end
function abi.ffi.property_getter_cylinder_handle_adornment_inner_radius(self)
	local result_0 = getPointer(self).InnerRadius;
	return result_0;
end
function abi.ffi.property_setter_cylinder_handle_adornment_inner_radius_set_inner_radius(self, value)
	getPointer(self).InnerRadius = value;
end
function abi.ffi.property_getter_cylinder_handle_adornment_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_cylinder_handle_adornment_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.property_getter_image_handle_adornment_image(self)
	local result_0 = getPointer(self).Image;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_handle_adornment_image_set_image(self, value)
	getPointer(self).Image = getPointer(value);
end
function abi.ffi.property_getter_image_handle_adornment_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_image_handle_adornment_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_line_handle_adornment_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.property_setter_line_handle_adornment_length_set_length(self, value)
	getPointer(self).Length = value;
end
function abi.ffi.property_getter_line_handle_adornment_thickness(self)
	local result_0 = getPointer(self).Thickness;
	return result_0;
end
function abi.ffi.property_setter_line_handle_adornment_thickness_set_thickness(self, value)
	getPointer(self).Thickness = value;
end
function abi.ffi.property_getter_sphere_handle_adornment_radius(self)
	local result_0 = getPointer(self).Radius;
	return result_0;
end
function abi.ffi.property_setter_sphere_handle_adornment_radius_set_radius(self, value)
	getPointer(self).Radius = value;
end
function abi.ffi.method_wireframe_handle_adornment_add_line(self, from, to)
	getPointer(self):AddLine(getPointer(from), getPointer(to))
end
function abi.ffi.method_wireframe_handle_adornment_clear(self)
	getPointer(self):Clear()
end
function abi.ffi.property_getter_selection_sphere_surface_color_3(self)
	local result_0 = getPointer(self).SurfaceColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_selection_sphere_surface_color_3_set_surface_color_3(self, value)
	getPointer(self).SurfaceColor3 = getPointer(value);
end
function abi.ffi.property_getter_selection_sphere_surface_transparency(self)
	local result_0 = getPointer(self).SurfaceTransparency;
	return result_0;
end
function abi.ffi.property_setter_selection_sphere_surface_transparency_set_surface_transparency(self, value)
	getPointer(self).SurfaceTransparency = value;
end
function abi.ffi.property_getter_part_adornment_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_part_adornment_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_arc_handles_axes(self)
	local result_0 = getPointer(self).Axes;
	return createPointer(result_0);
end
function abi.ffi.property_setter_arc_handles_axes_set_axes(self, value)
	getPointer(self).Axes = getPointer(value);
end
function abi.ffi.event_arc_handles_mouse_button_1_down_on_mouse_button_1_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Down:Connect(function(axis)
		invokeFunction(callback_data, callback_vtable, axis)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_arc_handles_mouse_button_1_up_on_mouse_button_1_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Up:Connect(function(axis)
		invokeFunction(callback_data, callback_vtable, axis)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_arc_handles_mouse_drag_on_mouse_drag(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseDrag:Connect(function(axis, relative_angle, delta_radius)
		invokeFunction(callback_data, callback_vtable, axis, relative_angle, delta_radius)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_arc_handles_mouse_enter_on_mouse_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseEnter:Connect(function(axis)
		invokeFunction(callback_data, callback_vtable, axis)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_arc_handles_mouse_leave_on_mouse_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseLeave:Connect(function(axis)
		invokeFunction(callback_data, callback_vtable, axis)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_handles_faces(self)
	local result_0 = getPointer(self).Faces;
	return createPointer(result_0);
end
function abi.ffi.property_setter_handles_faces_set_faces(self, value)
	getPointer(self).Faces = getPointer(value);
end
function abi.ffi.property_getter_handles_style(self)
	local result_0 = getPointer(self).Style;
	return result_0;
end
function abi.ffi.property_setter_handles_style_set_style(self, value)
	getPointer(self).Style = value;
end
function abi.ffi.event_handles_mouse_button_1_down_on_mouse_button_1_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Down:Connect(function(face)
		invokeFunction(callback_data, callback_vtable, face)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handles_mouse_button_1_up_on_mouse_button_1_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseButton1Up:Connect(function(face)
		invokeFunction(callback_data, callback_vtable, face)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handles_mouse_drag_on_mouse_drag(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseDrag:Connect(function(face, distance)
		invokeFunction(callback_data, callback_vtable, face, distance)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handles_mouse_enter_on_mouse_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseEnter:Connect(function(face)
		invokeFunction(callback_data, callback_vtable, face)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_handles_mouse_leave_on_mouse_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MouseLeave:Connect(function(face)
		invokeFunction(callback_data, callback_vtable, face)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_surface_selection_target_surface(self)
	local result_0 = getPointer(self).TargetSurface;
	return result_0;
end
function abi.ffi.property_setter_surface_selection_target_surface_set_target_surface(self, value)
	getPointer(self).TargetSurface = value;
end
function abi.ffi.property_getter_selection_lasso_humanoid(self)
	local result_0 = getPointer(self).Humanoid;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_selection_lasso_humanoid_set_humanoid(self, value)
	getPointer(self).Humanoid = getPointer(value);
end
function abi.ffi.property_getter_gui_service_auto_select_gui_enabled(self)
	local result_0 = getPointer(self).AutoSelectGuiEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_service_auto_select_gui_enabled_set_auto_select_gui_enabled(self, value)
	getPointer(self).AutoSelectGuiEnabled = value == 1;
end
function abi.ffi.property_getter_gui_service_core_gui_navigation_enabled(self)
	local result_0 = getPointer(self).CoreGuiNavigationEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_service_core_gui_navigation_enabled_set_core_gui_navigation_enabled(self, value)
	getPointer(self).CoreGuiNavigationEnabled = value == 1;
end
function abi.ffi.property_getter_gui_service_gui_navigation_enabled(self)
	local result_0 = getPointer(self).GuiNavigationEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_service_gui_navigation_enabled_set_gui_navigation_enabled(self, value)
	getPointer(self).GuiNavigationEnabled = value == 1;
end
function abi.ffi.property_getter_gui_service_menu_is_open(self)
	local result_0 = getPointer(self).MenuIsOpen;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_gui_service_selected_object(self)
	local result_0 = getPointer(self).SelectedObject;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_gui_service_selected_object_set_selected_object(self, value)
	getPointer(self).SelectedObject = getPointer(value);
end
function abi.ffi.property_getter_gui_service_touch_controls_enabled(self)
	local result_0 = getPointer(self).TouchControlsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_gui_service_touch_controls_enabled_set_touch_controls_enabled(self, value)
	getPointer(self).TouchControlsEnabled = value == 1;
end
function abi.ffi.method_gui_service_add_selection_parent(self, selection_name_addr, selection_name_len, selection_parent)
	getPointer(self):AddSelectionParent(loadString(memory, selection_name_addr, selection_name_len), getPointer(selection_parent))
end
function abi.ffi.method_gui_service_close_inspect_menu(self)
	getPointer(self):CloseInspectMenu()
end
function abi.ffi.method_gui_service_get_emotes_menu_open(self)
	local result_0 = getPointer(self):GetEmotesMenuOpen();
	return result_0 and 1 or 0;
end
function abi.ffi.method_gui_service_get_gameplay_paused_notification_enabled(self)
	local result_0 = getPointer(self):GetGameplayPausedNotificationEnabled();
	return result_0 and 1 or 0;
end
function abi.ffi.method_gui_service_get_inspect_menu_enabled(self)
	local result_0 = getPointer(self):GetInspectMenuEnabled();
	return result_0 and 1 or 0;
end
function abi.ffi.method_gui_service_inspect_player_from_humanoid_description(self, humanoid_description, name_addr, name_len)
	getPointer(self):InspectPlayerFromHumanoidDescription(getPointer(humanoid_description), loadString(memory, name_addr, name_len))
end
function abi.ffi.method_gui_service_inspect_player_from_user_id(self, user_id)
	getPointer(self):InspectPlayerFromUserId(user_id)
end
function abi.ffi.method_gui_service_is_ten_foot_interface(self)
	local result_0 = getPointer(self):IsTenFootInterface();
	return result_0 and 1 or 0;
end
function abi.ffi.method_gui_service_remove_selection_group(self, selection_name_addr, selection_name_len)
	getPointer(self):RemoveSelectionGroup(loadString(memory, selection_name_addr, selection_name_len))
end
function abi.ffi.method_gui_service_select(self, selection_parent)
	getPointer(self):Select(getPointer(selection_parent))
end
function abi.ffi.method_gui_service_set_emotes_menu_open(self, is_open)
	getPointer(self):SetEmotesMenuOpen(is_open == 1)
end
function abi.ffi.method_gui_service_set_gameplay_paused_notification_enabled(self, enabled)
	getPointer(self):SetGameplayPausedNotificationEnabled(enabled == 1)
end
function abi.ffi.method_gui_service_set_inspect_menu_enabled(self, enabled)
	getPointer(self):SetInspectMenuEnabled(enabled == 1)
end
function abi.ffi.event_gui_service_menu_closed_on_menu_closed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MenuClosed:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_gui_service_menu_opened_on_menu_opened(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MenuOpened:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_haptic_service_is_motor_supported(self, input_type, vibration_motor)
	local result_0 = getPointer(self):IsMotorSupported(input_type, vibration_motor);
	return result_0 and 1 or 0;
end
function abi.ffi.method_haptic_service_is_vibration_supported(self, input_type)
	local result_0 = getPointer(self):IsVibrationSupported(input_type);
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_highlight_adornee(self)
	local result_0 = getPointer(self).Adornee;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_highlight_adornee_set_adornee(self, value)
	getPointer(self).Adornee = getPointer(value);
end
function abi.ffi.property_getter_highlight_depth_mode(self)
	local result_0 = getPointer(self).DepthMode;
	return result_0;
end
function abi.ffi.property_setter_highlight_depth_mode_set_depth_mode(self, value)
	getPointer(self).DepthMode = value;
end
function abi.ffi.property_getter_highlight_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_highlight_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_highlight_fill_color(self)
	local result_0 = getPointer(self).FillColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_highlight_fill_color_set_fill_color(self, value)
	getPointer(self).FillColor = getPointer(value);
end
function abi.ffi.property_getter_highlight_fill_transparency(self)
	local result_0 = getPointer(self).FillTransparency;
	return result_0;
end
function abi.ffi.property_setter_highlight_fill_transparency_set_fill_transparency(self, value)
	getPointer(self).FillTransparency = value;
end
function abi.ffi.property_getter_highlight_outline_color(self)
	local result_0 = getPointer(self).OutlineColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_highlight_outline_color_set_outline_color(self, value)
	getPointer(self).OutlineColor = getPointer(value);
end
function abi.ffi.property_getter_highlight_outline_transparency(self)
	local result_0 = getPointer(self).OutlineTransparency;
	return result_0;
end
function abi.ffi.property_setter_highlight_outline_transparency_set_outline_transparency(self, value)
	getPointer(self).OutlineTransparency = value;
end
function abi.ffi.method_http_service_generate_guid(self, wrap_in_curly_braces)
	local result_0 = getPointer(self):GenerateGUID(wrap_in_curly_braces == 1);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_http_service_url_encode(self, input_addr, input_len)
	local result_0 = getPointer(self):UrlEncode(loadString(memory, input_addr, input_len));
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_http_service_get_async(self, url_addr, url_len, nocache)
	local result_0 = getPointer(self):GetAsync(loadString(memory, url_addr, url_len), nocache == 1);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_humanoid_auto_jump_enabled(self)
	local result_0 = getPointer(self).AutoJumpEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_auto_jump_enabled_set_auto_jump_enabled(self, value)
	getPointer(self).AutoJumpEnabled = value == 1;
end
function abi.ffi.property_getter_humanoid_auto_rotate(self)
	local result_0 = getPointer(self).AutoRotate;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_auto_rotate_set_auto_rotate(self, value)
	getPointer(self).AutoRotate = value == 1;
end
function abi.ffi.property_getter_humanoid_automatic_scaling_enabled(self)
	local result_0 = getPointer(self).AutomaticScalingEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_automatic_scaling_enabled_set_automatic_scaling_enabled(self, value)
	getPointer(self).AutomaticScalingEnabled = value == 1;
end
function abi.ffi.property_getter_humanoid_break_joints_on_death(self)
	local result_0 = getPointer(self).BreakJointsOnDeath;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_break_joints_on_death_set_break_joints_on_death(self, value)
	getPointer(self).BreakJointsOnDeath = value == 1;
end
function abi.ffi.property_getter_humanoid_camera_offset(self)
	local result_0 = getPointer(self).CameraOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_camera_offset_set_camera_offset(self, value)
	getPointer(self).CameraOffset = getPointer(value);
end
function abi.ffi.property_getter_humanoid_display_distance_type(self)
	local result_0 = getPointer(self).DisplayDistanceType;
	return result_0;
end
function abi.ffi.property_setter_humanoid_display_distance_type_set_display_distance_type(self, value)
	getPointer(self).DisplayDistanceType = value;
end
function abi.ffi.property_getter_humanoid_display_name(self)
	local result_0 = getPointer(self).DisplayName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_display_name_set_display_name(self, value_addr, value_len)
	getPointer(self).DisplayName = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_evaluate_state_machine(self)
	local result_0 = getPointer(self).EvaluateStateMachine;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_evaluate_state_machine_set_evaluate_state_machine(self, value)
	getPointer(self).EvaluateStateMachine = value == 1;
end
function abi.ffi.property_getter_humanoid_floor_material(self)
	local result_0 = getPointer(self).FloorMaterial;
	return result_0;
end
function abi.ffi.property_getter_humanoid_health(self)
	local result_0 = getPointer(self).Health;
	return result_0;
end
function abi.ffi.property_setter_humanoid_health_set_health(self, value)
	getPointer(self).Health = value;
end
function abi.ffi.property_getter_humanoid_health_display_distance(self)
	local result_0 = getPointer(self).HealthDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_humanoid_health_display_distance_set_health_display_distance(self, value)
	getPointer(self).HealthDisplayDistance = value;
end
function abi.ffi.property_getter_humanoid_health_display_type(self)
	local result_0 = getPointer(self).HealthDisplayType;
	return result_0;
end
function abi.ffi.property_setter_humanoid_health_display_type_set_health_display_type(self, value)
	getPointer(self).HealthDisplayType = value;
end
function abi.ffi.property_getter_humanoid_hip_height(self)
	local result_0 = getPointer(self).HipHeight;
	return result_0;
end
function abi.ffi.property_setter_humanoid_hip_height_set_hip_height(self, value)
	getPointer(self).HipHeight = value;
end
function abi.ffi.property_getter_humanoid_jump(self)
	local result_0 = getPointer(self).Jump;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_jump_set_jump(self, value)
	getPointer(self).Jump = value == 1;
end
function abi.ffi.property_getter_humanoid_jump_height(self)
	local result_0 = getPointer(self).JumpHeight;
	return result_0;
end
function abi.ffi.property_setter_humanoid_jump_height_set_jump_height(self, value)
	getPointer(self).JumpHeight = value;
end
function abi.ffi.property_getter_humanoid_jump_power(self)
	local result_0 = getPointer(self).JumpPower;
	return result_0;
end
function abi.ffi.property_setter_humanoid_jump_power_set_jump_power(self, value)
	getPointer(self).JumpPower = value;
end
function abi.ffi.property_getter_humanoid_max_health(self)
	local result_0 = getPointer(self).MaxHealth;
	return result_0;
end
function abi.ffi.property_setter_humanoid_max_health_set_max_health(self, value)
	getPointer(self).MaxHealth = value;
end
function abi.ffi.property_getter_humanoid_max_slope_angle(self)
	local result_0 = getPointer(self).MaxSlopeAngle;
	return result_0;
end
function abi.ffi.property_setter_humanoid_max_slope_angle_set_max_slope_angle(self, value)
	getPointer(self).MaxSlopeAngle = value;
end
function abi.ffi.property_getter_humanoid_move_direction(self)
	local result_0 = getPointer(self).MoveDirection;
	return createPointer(result_0);
end
function abi.ffi.property_getter_humanoid_name_display_distance(self)
	local result_0 = getPointer(self).NameDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_humanoid_name_display_distance_set_name_display_distance(self, value)
	getPointer(self).NameDisplayDistance = value;
end
function abi.ffi.property_getter_humanoid_name_occlusion(self)
	local result_0 = getPointer(self).NameOcclusion;
	return result_0;
end
function abi.ffi.property_setter_humanoid_name_occlusion_set_name_occlusion(self, value)
	getPointer(self).NameOcclusion = value;
end
function abi.ffi.property_getter_humanoid_platform_stand(self)
	local result_0 = getPointer(self).PlatformStand;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_platform_stand_set_platform_stand(self, value)
	getPointer(self).PlatformStand = value == 1;
end
function abi.ffi.property_getter_humanoid_requires_neck(self)
	local result_0 = getPointer(self).RequiresNeck;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_requires_neck_set_requires_neck(self, value)
	getPointer(self).RequiresNeck = value == 1;
end
function abi.ffi.property_getter_humanoid_rig_type(self)
	local result_0 = getPointer(self).RigType;
	return result_0;
end
function abi.ffi.property_setter_humanoid_rig_type_set_rig_type(self, value)
	getPointer(self).RigType = value;
end
function abi.ffi.property_getter_humanoid_root_part(self)
	local result_0 = getPointer(self).RootPart;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_humanoid_seat_part(self)
	local result_0 = getPointer(self).SeatPart;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_humanoid_sit(self)
	local result_0 = getPointer(self).Sit;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_sit_set_sit(self, value)
	getPointer(self).Sit = value == 1;
end
function abi.ffi.property_getter_humanoid_target_point(self)
	local result_0 = getPointer(self).TargetPoint;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_target_point_set_target_point(self, value)
	getPointer(self).TargetPoint = getPointer(value);
end
function abi.ffi.property_getter_humanoid_use_jump_power(self)
	local result_0 = getPointer(self).UseJumpPower;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_humanoid_use_jump_power_set_use_jump_power(self, value)
	getPointer(self).UseJumpPower = value == 1;
end
function abi.ffi.property_getter_humanoid_walk_speed(self)
	local result_0 = getPointer(self).WalkSpeed;
	return result_0;
end
function abi.ffi.property_setter_humanoid_walk_speed_set_walk_speed(self, value)
	getPointer(self).WalkSpeed = value;
end
function abi.ffi.property_getter_humanoid_walk_to_part(self)
	local result_0 = getPointer(self).WalkToPart;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_humanoid_walk_to_part_set_walk_to_part(self, value)
	getPointer(self).WalkToPart = getPointer(value);
end
function abi.ffi.property_getter_humanoid_walk_to_point(self)
	local result_0 = getPointer(self).WalkToPoint;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_walk_to_point_set_walk_to_point(self, value)
	getPointer(self).WalkToPoint = getPointer(value);
end
function abi.ffi.method_humanoid_add_accessory(self, accessory)
	getPointer(self):AddAccessory(getPointer(accessory))
end
function abi.ffi.method_humanoid_build_rig_from_attachments(self)
	getPointer(self):BuildRigFromAttachments()
end
function abi.ffi.method_humanoid_change_state(self, state)
	getPointer(self):ChangeState(state)
end
function abi.ffi.method_humanoid_equip_tool(self, tool)
	getPointer(self):EquipTool(getPointer(tool))
end
function abi.ffi.method_humanoid_get_applied_description(self)
	local result_0 = getPointer(self):GetAppliedDescription();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_humanoid_get_body_part_r_15(self, part)
	local result_0 = getPointer(self):GetBodyPartR15(getPointer(part));
	return result_0;
end
function abi.ffi.method_humanoid_get_limb(self, part)
	local result_0 = getPointer(self):GetLimb(getPointer(part));
	return result_0;
end
function abi.ffi.method_humanoid_get_state(self)
	local result_0 = getPointer(self):GetState();
	return result_0;
end
function abi.ffi.method_humanoid_get_state_enabled(self, state)
	local result_0 = getPointer(self):GetStateEnabled(state);
	return result_0 and 1 or 0;
end
function abi.ffi.method_humanoid_move(self, move_direction, relative_to_camera)
	getPointer(self):Move(getPointer(move_direction), relative_to_camera == 1)
end
function abi.ffi.method_humanoid_move_to(self, location, part)
	getPointer(self):MoveTo(getPointer(location), getPointer(part))
end
function abi.ffi.method_humanoid_remove_accessories(self)
	getPointer(self):RemoveAccessories()
end
function abi.ffi.method_humanoid_replace_body_part_r_15(self, body_part, part)
	local result_0 = getPointer(self):ReplaceBodyPartR15(body_part, getPointer(part));
	return result_0 and 1 or 0;
end
function abi.ffi.method_humanoid_set_state_enabled(self, state, enabled)
	getPointer(self):SetStateEnabled(state, enabled == 1)
end
function abi.ffi.method_humanoid_take_damage(self, amount)
	getPointer(self):TakeDamage(amount)
end
function abi.ffi.method_humanoid_unequip_tools(self)
	getPointer(self):UnequipTools()
end
function abi.ffi.method_humanoid_apply_description(self, humanoid_description, asset_type_verification)
	getPointer(self):ApplyDescription(getPointer(humanoid_description), asset_type_verification)
end
function abi.ffi.method_humanoid_apply_description_reset(self, humanoid_description, asset_type_verification)
	getPointer(self):ApplyDescriptionReset(getPointer(humanoid_description), asset_type_verification)
end
function abi.ffi.method_humanoid_play_emote(self, emote_name_addr, emote_name_len)
	local result_0 = getPointer(self):PlayEmote(loadString(memory, emote_name_addr, emote_name_len));
	return result_0 and 1 or 0;
end
function abi.ffi.event_humanoid_climbing_on_climbing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Climbing:Connect(function(speed)
		invokeFunction(callback_data, callback_vtable, speed)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_died_on_died(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Died:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_falling_down_on_falling_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).FallingDown:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_free_falling_on_free_falling(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).FreeFalling:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_getting_up_on_getting_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).GettingUp:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_health_changed_on_health_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).HealthChanged:Connect(function(health)
		invokeFunction(callback_data, callback_vtable, health)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_jumping_on_jumping(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Jumping:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_move_to_finished_on_move_to_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MoveToFinished:Connect(function(reached)
		invokeFunction(callback_data, callback_vtable, reached and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_platform_standing_on_platform_standing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlatformStanding:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_ragdoll_on_ragdoll(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Ragdoll:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_running_on_running(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Running:Connect(function(speed)
		invokeFunction(callback_data, callback_vtable, speed)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_seated_on_seated(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Seated:Connect(function(active, current_seat_part)
		local current_seat_part_optional, current_seat_part_optional_0 = 0, 0;
		if (current_seat_part ~= nil) then
			current_seat_part_optional, current_seat_part_optional_0 = 1, createPointer(current_seat_part);
		end
		invokeFunction(callback_data, callback_vtable, active and 1 or 0, current_seat_part_optional, current_seat_part_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_state_changed_on_state_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).StateChanged:Connect(function(old, new)
		invokeFunction(callback_data, callback_vtable, old, new)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_state_enabled_changed_on_state_enabled_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).StateEnabledChanged:Connect(function(state, is_enabled)
		invokeFunction(callback_data, callback_vtable, state, is_enabled and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_strafing_on_strafing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Strafing:Connect(function(active)
		invokeFunction(callback_data, callback_vtable, active and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_swimming_on_swimming(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Swimming:Connect(function(speed)
		invokeFunction(callback_data, callback_vtable, speed)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_humanoid_touched_on_humanoid_touched(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Touched:Connect(function(part, limb)
		invokeFunction(callback_data, callback_vtable, createPointer(part), createPointer(limb))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_humanoid_description_back_accessory(self)
	local result_0 = getPointer(self).BackAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_back_accessory_set_back_accessory(self, value_addr, value_len)
	getPointer(self).BackAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_body_type_scale(self)
	local result_0 = getPointer(self).BodyTypeScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_body_type_scale_set_body_type_scale(self, value)
	getPointer(self).BodyTypeScale = value;
end
function abi.ffi.property_getter_humanoid_description_climb_animation(self)
	local result_0 = getPointer(self).ClimbAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_climb_animation_set_climb_animation(self, value)
	getPointer(self).ClimbAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_depth_scale(self)
	local result_0 = getPointer(self).DepthScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_depth_scale_set_depth_scale(self, value)
	getPointer(self).DepthScale = value;
end
function abi.ffi.property_getter_humanoid_description_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_humanoid_description_face_accessory(self)
	local result_0 = getPointer(self).FaceAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_face_accessory_set_face_accessory(self, value_addr, value_len)
	getPointer(self).FaceAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_fall_animation(self)
	local result_0 = getPointer(self).FallAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_fall_animation_set_fall_animation(self, value)
	getPointer(self).FallAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_front_accessory(self)
	local result_0 = getPointer(self).FrontAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_front_accessory_set_front_accessory(self, value_addr, value_len)
	getPointer(self).FrontAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_graphic_t_shirt(self)
	local result_0 = getPointer(self).GraphicTShirt;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_graphic_t_shirt_set_graphic_t_shirt(self, value)
	getPointer(self).GraphicTShirt = value;
end
function abi.ffi.property_getter_humanoid_description_hair_accessory(self)
	local result_0 = getPointer(self).HairAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_hair_accessory_set_hair_accessory(self, value_addr, value_len)
	getPointer(self).HairAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_hat_accessory(self)
	local result_0 = getPointer(self).HatAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_hat_accessory_set_hat_accessory(self, value_addr, value_len)
	getPointer(self).HatAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_head(self)
	local result_0 = getPointer(self).Head;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_head_set_head(self, value)
	getPointer(self).Head = value;
end
function abi.ffi.property_getter_humanoid_description_head_color(self)
	local result_0 = getPointer(self).HeadColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_head_color_set_head_color(self, value)
	getPointer(self).HeadColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_head_scale(self)
	local result_0 = getPointer(self).HeadScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_head_scale_set_head_scale(self, value)
	getPointer(self).HeadScale = value;
end
function abi.ffi.property_getter_humanoid_description_height_scale(self)
	local result_0 = getPointer(self).HeightScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_height_scale_set_height_scale(self, value)
	getPointer(self).HeightScale = value;
end
function abi.ffi.property_getter_humanoid_description_idle_animation(self)
	local result_0 = getPointer(self).IdleAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_idle_animation_set_idle_animation(self, value)
	getPointer(self).IdleAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_jump_animation(self)
	local result_0 = getPointer(self).JumpAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_jump_animation_set_jump_animation(self, value)
	getPointer(self).JumpAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_left_arm(self)
	local result_0 = getPointer(self).LeftArm;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_left_arm_set_left_arm(self, value)
	getPointer(self).LeftArm = value;
end
function abi.ffi.property_getter_humanoid_description_left_arm_color(self)
	local result_0 = getPointer(self).LeftArmColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_left_arm_color_set_left_arm_color(self, value)
	getPointer(self).LeftArmColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_left_leg(self)
	local result_0 = getPointer(self).LeftLeg;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_left_leg_set_left_leg(self, value)
	getPointer(self).LeftLeg = value;
end
function abi.ffi.property_getter_humanoid_description_left_leg_color(self)
	local result_0 = getPointer(self).LeftLegColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_left_leg_color_set_left_leg_color(self, value)
	getPointer(self).LeftLegColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_mood_animation(self)
	local result_0 = getPointer(self).MoodAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_mood_animation_set_mood_animation(self, value)
	getPointer(self).MoodAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_neck_accessory(self)
	local result_0 = getPointer(self).NeckAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_neck_accessory_set_neck_accessory(self, value_addr, value_len)
	getPointer(self).NeckAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_pants(self)
	local result_0 = getPointer(self).Pants;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_pants_set_pants(self, value)
	getPointer(self).Pants = value;
end
function abi.ffi.property_getter_humanoid_description_proportion_scale(self)
	local result_0 = getPointer(self).ProportionScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_proportion_scale_set_proportion_scale(self, value)
	getPointer(self).ProportionScale = value;
end
function abi.ffi.property_getter_humanoid_description_right_arm(self)
	local result_0 = getPointer(self).RightArm;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_right_arm_set_right_arm(self, value)
	getPointer(self).RightArm = value;
end
function abi.ffi.property_getter_humanoid_description_right_arm_color(self)
	local result_0 = getPointer(self).RightArmColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_right_arm_color_set_right_arm_color(self, value)
	getPointer(self).RightArmColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_right_leg(self)
	local result_0 = getPointer(self).RightLeg;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_right_leg_set_right_leg(self, value)
	getPointer(self).RightLeg = value;
end
function abi.ffi.property_getter_humanoid_description_right_leg_color(self)
	local result_0 = getPointer(self).RightLegColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_right_leg_color_set_right_leg_color(self, value)
	getPointer(self).RightLegColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_run_animation(self)
	local result_0 = getPointer(self).RunAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_run_animation_set_run_animation(self, value)
	getPointer(self).RunAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_shirt(self)
	local result_0 = getPointer(self).Shirt;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_shirt_set_shirt(self, value)
	getPointer(self).Shirt = value;
end
function abi.ffi.property_getter_humanoid_description_shoulders_accessory(self)
	local result_0 = getPointer(self).ShouldersAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_shoulders_accessory_set_shoulders_accessory(self, value_addr, value_len)
	getPointer(self).ShouldersAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_swim_animation(self)
	local result_0 = getPointer(self).SwimAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_swim_animation_set_swim_animation(self, value)
	getPointer(self).SwimAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_torso(self)
	local result_0 = getPointer(self).Torso;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_torso_set_torso(self, value)
	getPointer(self).Torso = value;
end
function abi.ffi.property_getter_humanoid_description_torso_color(self)
	local result_0 = getPointer(self).TorsoColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_humanoid_description_torso_color_set_torso_color(self, value)
	getPointer(self).TorsoColor = getPointer(value);
end
function abi.ffi.property_getter_humanoid_description_waist_accessory(self)
	local result_0 = getPointer(self).WaistAccessory;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_humanoid_description_waist_accessory_set_waist_accessory(self, value_addr, value_len)
	getPointer(self).WaistAccessory = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_humanoid_description_walk_animation(self)
	local result_0 = getPointer(self).WalkAnimation;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_walk_animation_set_walk_animation(self, value)
	getPointer(self).WalkAnimation = value;
end
function abi.ffi.property_getter_humanoid_description_width_scale(self)
	local result_0 = getPointer(self).WidthScale;
	return result_0;
end
function abi.ffi.property_setter_humanoid_description_width_scale_set_width_scale(self, value)
	getPointer(self).WidthScale = value;
end
function abi.ffi.method_humanoid_description_add_emote(self, name_addr, name_len, asset_id)
	getPointer(self):AddEmote(loadString(memory, name_addr, name_len), asset_id)
end
function abi.ffi.method_humanoid_description_remove_emote(self, name_addr, name_len)
	getPointer(self):RemoveEmote(loadString(memory, name_addr, name_len))
end
function abi.ffi.property_getter_ik_control_alignment_offset(self)
	local result_0 = getPointer(self).AlignmentOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ik_control_alignment_offset_set_alignment_offset(self, value)
	getPointer(self).AlignmentOffset = getPointer(value);
end
function abi.ffi.property_getter_ik_control_chain_root(self)
	local result_0 = getPointer(self).ChainRoot;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_ik_control_chain_root_set_chain_root(self, value)
	getPointer(self).ChainRoot = getPointer(value);
end
function abi.ffi.property_getter_ik_control_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ik_control_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_ik_control_end_effector(self)
	local result_0 = getPointer(self).EndEffector;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_ik_control_end_effector_set_end_effector(self, value)
	getPointer(self).EndEffector = getPointer(value);
end
function abi.ffi.property_getter_ik_control_offset(self)
	local result_0 = getPointer(self).Offset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ik_control_offset_set_offset(self, value)
	getPointer(self).Offset = getPointer(value);
end
function abi.ffi.property_getter_ik_control_pole(self)
	local result_0 = getPointer(self).Pole;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_ik_control_pole_set_pole(self, value)
	getPointer(self).Pole = getPointer(value);
end
function abi.ffi.property_getter_ik_control_priority(self)
	local result_0 = getPointer(self).Priority;
	return result_0;
end
function abi.ffi.property_setter_ik_control_priority_set_priority(self, value)
	getPointer(self).Priority = value;
end
function abi.ffi.property_getter_ik_control_target(self)
	local result_0 = getPointer(self).Target;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_ik_control_target_set_target(self, value)
	getPointer(self).Target = getPointer(value);
end
function abi.ffi.property_getter_ik_control_type(self)
	local result_0 = getPointer(self).Type;
	return result_0;
end
function abi.ffi.property_setter_ik_control_type_set_type(self, value)
	getPointer(self).Type = value;
end
function abi.ffi.property_getter_ik_control_weight(self)
	local result_0 = getPointer(self).Weight;
	return result_0;
end
function abi.ffi.property_setter_ik_control_weight_set_weight(self, value)
	getPointer(self).Weight = value;
end
function abi.ffi.property_getter_importer_base_settings_id(self)
	local result_0 = getPointer(self).Id;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_importer_base_settings_import_name(self)
	local result_0 = getPointer(self).ImportName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_importer_base_settings_import_name_set_import_name(self, value_addr, value_len)
	getPointer(self).ImportName = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_importer_base_settings_should_import(self)
	local result_0 = getPointer(self).ShouldImport;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_base_settings_should_import_set_should_import(self, value)
	getPointer(self).ShouldImport = value == 1;
end
function abi.ffi.property_getter_importer_group_settings_anchored(self)
	local result_0 = getPointer(self).Anchored;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_group_settings_anchored_set_anchored(self, value)
	getPointer(self).Anchored = value == 1;
end
function abi.ffi.property_getter_importer_group_settings_import_as_model_asset(self)
	local result_0 = getPointer(self).ImportAsModelAsset;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_group_settings_import_as_model_asset_set_import_as_model_asset(self, value)
	getPointer(self).ImportAsModelAsset = value == 1;
end
function abi.ffi.property_getter_importer_group_settings_insert_in_workspace(self)
	local result_0 = getPointer(self).InsertInWorkspace;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_group_settings_insert_in_workspace_set_insert_in_workspace(self, value)
	getPointer(self).InsertInWorkspace = value == 1;
end
function abi.ffi.property_getter_importer_material_settings_diffuse_file_path(self)
	local result_0 = getPointer(self).DiffuseFilePath;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_importer_material_settings_diffuse_file_path_set_diffuse_file_path(self, value_addr, value_len)
	getPointer(self).DiffuseFilePath = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_importer_material_settings_is_pbr(self)
	local result_0 = getPointer(self).IsPbr;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_material_settings_metalness_file_path(self)
	local result_0 = getPointer(self).MetalnessFilePath;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_importer_material_settings_metalness_file_path_set_metalness_file_path(self, value_addr, value_len)
	getPointer(self).MetalnessFilePath = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_importer_material_settings_normal_file_path(self)
	local result_0 = getPointer(self).NormalFilePath;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_importer_material_settings_normal_file_path_set_normal_file_path(self, value_addr, value_len)
	getPointer(self).NormalFilePath = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_importer_material_settings_roughness_file_path(self)
	local result_0 = getPointer(self).RoughnessFilePath;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_importer_material_settings_roughness_file_path_set_roughness_file_path(self, value_addr, value_len)
	getPointer(self).RoughnessFilePath = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_importer_mesh_settings_anchored(self)
	local result_0 = getPointer(self).Anchored;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_anchored_set_anchored(self, value)
	getPointer(self).Anchored = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_manifold(self)
	local result_0 = getPointer(self).CageManifold;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_mesh_intersected_preview(self)
	local result_0 = getPointer(self).CageMeshIntersectedPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_cage_mesh_intersected_preview_set_cage_mesh_intersected_preview(self, value)
	getPointer(self).CageMeshIntersectedPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_mesh_not_intersected(self)
	local result_0 = getPointer(self).CageMeshNotIntersected;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_no_overlapping_vertices(self)
	local result_0 = getPointer(self).CageNoOverlappingVertices;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_non_manifold_preview(self)
	local result_0 = getPointer(self).CageNonManifoldPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_cage_non_manifold_preview_set_cage_non_manifold_preview(self, value)
	getPointer(self).CageNonManifoldPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_overlapping_vertices_preview(self)
	local result_0 = getPointer(self).CageOverlappingVerticesPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_cage_overlapping_vertices_preview_set_cage_overlapping_vertices_preview(self, value)
	getPointer(self).CageOverlappingVerticesPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_uv_matched(self)
	local result_0 = getPointer(self).CageUVMatched;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_cage_uv_mis_matched_preview(self)
	local result_0 = getPointer(self).CageUVMisMatchedPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_cage_uv_mis_matched_preview_set_cage_uv_mis_matched_preview(self, value)
	getPointer(self).CageUVMisMatchedPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_dimensions(self)
	local result_0 = getPointer(self).Dimensions;
	return createPointer(result_0);
end
function abi.ffi.property_getter_importer_mesh_settings_double_sided(self)
	local result_0 = getPointer(self).DoubleSided;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_double_sided_set_double_sided(self, value)
	getPointer(self).DoubleSided = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_ignore_vertex_colors(self)
	local result_0 = getPointer(self).IgnoreVertexColors;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_ignore_vertex_colors_set_ignore_vertex_colors(self, value)
	getPointer(self).IgnoreVertexColors = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_irrelevant_cage_modified_preview(self)
	local result_0 = getPointer(self).IrrelevantCageModifiedPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_irrelevant_cage_modified_preview_set_irrelevant_cage_modified_preview(self, value)
	getPointer(self).IrrelevantCageModifiedPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_mesh_hole_detected_preview(self)
	local result_0 = getPointer(self).MeshHoleDetectedPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_mesh_hole_detected_preview_set_mesh_hole_detected_preview(self, value)
	getPointer(self).MeshHoleDetectedPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_mesh_no_hole_detected(self)
	local result_0 = getPointer(self).MeshNoHoleDetected;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_no_irrelevant_cage_modified(self)
	local result_0 = getPointer(self).NoIrrelevantCageModified;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_no_outer_cage_far_extended_from_mesh(self)
	local result_0 = getPointer(self).NoOuterCageFarExtendedFromMesh;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_importer_mesh_settings_outer_cage_far_extended_from_mesh_preview(self)
	local result_0 = getPointer(self).OuterCageFarExtendedFromMeshPreview;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_outer_cage_far_extended_from_mesh_preview_set_outer_cage_far_extended_from_mesh_preview(self, value)
	getPointer(self).OuterCageFarExtendedFromMeshPreview = value == 1;
end
function abi.ffi.property_getter_importer_mesh_settings_polygon_count(self)
	local result_0 = getPointer(self).PolygonCount;
	return result_0;
end
function abi.ffi.property_getter_importer_mesh_settings_use_imported_pivot(self)
	local result_0 = getPointer(self).UseImportedPivot;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_mesh_settings_use_imported_pivot_set_use_imported_pivot(self, value)
	getPointer(self).UseImportedPivot = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_anchored(self)
	local result_0 = getPointer(self).Anchored;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_anchored_set_anchored(self, value)
	getPointer(self).Anchored = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_file_dimensions(self)
	local result_0 = getPointer(self).FileDimensions;
	return createPointer(result_0);
end
function abi.ffi.property_getter_importer_root_settings_import_as_model_asset(self)
	local result_0 = getPointer(self).ImportAsModelAsset;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_import_as_model_asset_set_import_as_model_asset(self, value)
	getPointer(self).ImportAsModelAsset = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_insert_in_workspace(self)
	local result_0 = getPointer(self).InsertInWorkspace;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_insert_in_workspace_set_insert_in_workspace(self, value)
	getPointer(self).InsertInWorkspace = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_insert_with_scene_position(self)
	local result_0 = getPointer(self).InsertWithScenePosition;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_insert_with_scene_position_set_insert_with_scene_position(self, value)
	getPointer(self).InsertWithScenePosition = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_invert_negative_faces(self)
	local result_0 = getPointer(self).InvertNegativeFaces;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_invert_negative_faces_set_invert_negative_faces(self, value)
	getPointer(self).InvertNegativeFaces = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_merge_meshes(self)
	local result_0 = getPointer(self).MergeMeshes;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_merge_meshes_set_merge_meshes(self, value)
	getPointer(self).MergeMeshes = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_polygon_count(self)
	local result_0 = getPointer(self).PolygonCount;
	return result_0;
end
function abi.ffi.property_getter_importer_root_settings_rig_type(self)
	local result_0 = getPointer(self).RigType;
	return result_0;
end
function abi.ffi.property_setter_importer_root_settings_rig_type_set_rig_type(self, value)
	getPointer(self).RigType = value;
end
function abi.ffi.property_getter_importer_root_settings_scale_unit(self)
	local result_0 = getPointer(self).ScaleUnit;
	return result_0;
end
function abi.ffi.property_setter_importer_root_settings_scale_unit_set_scale_unit(self, value)
	getPointer(self).ScaleUnit = value;
end
function abi.ffi.property_getter_importer_root_settings_use_scene_origin_as_pivot(self)
	local result_0 = getPointer(self).UseSceneOriginAsPivot;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_importer_root_settings_use_scene_origin_as_pivot_set_use_scene_origin_as_pivot(self, value)
	getPointer(self).UseSceneOriginAsPivot = value == 1;
end
function abi.ffi.property_getter_importer_root_settings_world_forward(self)
	local result_0 = getPointer(self).WorldForward;
	return result_0;
end
function abi.ffi.property_setter_importer_root_settings_world_forward_set_world_forward(self, value)
	getPointer(self).WorldForward = value;
end
function abi.ffi.property_getter_importer_root_settings_world_up(self)
	local result_0 = getPointer(self).WorldUp;
	return result_0;
end
function abi.ffi.property_setter_importer_root_settings_world_up_set_world_up(self, value)
	getPointer(self).WorldUp = value;
end
function abi.ffi.property_getter_input_object_delta(self)
	local result_0 = getPointer(self).Delta;
	return createPointer(result_0);
end
function abi.ffi.property_setter_input_object_delta_set_delta(self, value)
	getPointer(self).Delta = getPointer(value);
end
function abi.ffi.property_getter_input_object_key_code(self)
	local result_0 = getPointer(self).KeyCode;
	return result_0;
end
function abi.ffi.property_setter_input_object_key_code_set_key_code(self, value)
	getPointer(self).KeyCode = value;
end
function abi.ffi.property_getter_input_object_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_input_object_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_input_object_user_input_state(self)
	local result_0 = getPointer(self).UserInputState;
	return result_0;
end
function abi.ffi.property_setter_input_object_user_input_state_set_user_input_state(self, value)
	getPointer(self).UserInputState = value;
end
function abi.ffi.property_getter_input_object_user_input_type(self)
	local result_0 = getPointer(self).UserInputType;
	return result_0;
end
function abi.ffi.property_setter_input_object_user_input_type_set_user_input_type(self, value)
	getPointer(self).UserInputType = value;
end
function abi.ffi.method_input_object_is_modifier_key_down(self, modifier_key)
	local result_0 = getPointer(self):IsModifierKeyDown(modifier_key);
	return result_0 and 1 or 0;
end
function abi.ffi.method_insert_service_get_latest_asset_version_async(self, asset_id)
	local result_0 = getPointer(self):GetLatestAssetVersionAsync(asset_id);
	return result_0;
end
function abi.ffi.method_insert_service_load_asset(self, asset_id)
	local result_0 = getPointer(self):LoadAsset(asset_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_insert_service_load_asset_version(self, asset_version_id)
	local result_0 = getPointer(self):LoadAssetVersion(asset_version_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_joint_instance_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_joint_instance_c_0(self)
	local result_0 = getPointer(self).C0;
	return createPointer(result_0);
end
function abi.ffi.property_setter_joint_instance_c_0_set_c_0(self, value)
	getPointer(self).C0 = getPointer(value);
end
function abi.ffi.property_getter_joint_instance_c_1(self)
	local result_0 = getPointer(self).C1;
	return createPointer(result_0);
end
function abi.ffi.property_setter_joint_instance_c_1_set_c_1(self, value)
	getPointer(self).C1 = getPointer(value);
end
function abi.ffi.property_getter_joint_instance_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_joint_instance_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_joint_instance_part_0(self)
	local result_0 = getPointer(self).Part0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_joint_instance_part_0_set_part_0(self, value)
	getPointer(self).Part0 = getPointer(value);
end
function abi.ffi.property_getter_joint_instance_part_1(self)
	local result_0 = getPointer(self).Part1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_joint_instance_part_1_set_part_1(self, value)
	getPointer(self).Part1 = getPointer(value);
end
function abi.ffi.property_getter_dynamic_rotate_base_angle(self)
	local result_0 = getPointer(self).BaseAngle;
	return result_0;
end
function abi.ffi.property_setter_dynamic_rotate_base_angle_set_base_angle(self, value)
	getPointer(self).BaseAngle = value;
end
function abi.ffi.property_getter_motor_current_angle(self)
	local result_0 = getPointer(self).CurrentAngle;
	return result_0;
end
function abi.ffi.property_setter_motor_current_angle_set_current_angle(self, value)
	getPointer(self).CurrentAngle = value;
end
function abi.ffi.property_getter_motor_desired_angle(self)
	local result_0 = getPointer(self).DesiredAngle;
	return result_0;
end
function abi.ffi.property_setter_motor_desired_angle_set_desired_angle(self, value)
	getPointer(self).DesiredAngle = value;
end
function abi.ffi.property_getter_motor_max_velocity(self)
	local result_0 = getPointer(self).MaxVelocity;
	return result_0;
end
function abi.ffi.property_setter_motor_max_velocity_set_max_velocity(self, value)
	getPointer(self).MaxVelocity = value;
end
function abi.ffi.method_motor_set_desired_angle_fn_set_desired_angle(self, value)
	getPointer(self):SetDesiredAngle(value)
end
function abi.ffi.property_getter_motor_6_d_transform(self)
	local result_0 = getPointer(self).Transform;
	return createPointer(result_0);
end
function abi.ffi.property_setter_motor_6_d_transform_set_transform(self, value)
	getPointer(self).Transform = getPointer(value);
end
function abi.ffi.property_getter_velocity_motor_current_angle(self)
	local result_0 = getPointer(self).CurrentAngle;
	return result_0;
end
function abi.ffi.property_setter_velocity_motor_current_angle_set_current_angle(self, value)
	getPointer(self).CurrentAngle = value;
end
function abi.ffi.property_getter_velocity_motor_desired_angle(self)
	local result_0 = getPointer(self).DesiredAngle;
	return result_0;
end
function abi.ffi.property_setter_velocity_motor_desired_angle_set_desired_angle(self, value)
	getPointer(self).DesiredAngle = value;
end
function abi.ffi.property_getter_velocity_motor_max_velocity(self)
	local result_0 = getPointer(self).MaxVelocity;
	return result_0;
end
function abi.ffi.property_setter_velocity_motor_max_velocity_set_max_velocity(self, value)
	getPointer(self).MaxVelocity = value;
end
function abi.ffi.property_getter_keyframe_time(self)
	local result_0 = getPointer(self).Time;
	return result_0;
end
function abi.ffi.property_setter_keyframe_time_set_time(self, value)
	getPointer(self).Time = value;
end
function abi.ffi.method_keyframe_add_marker(self, marker)
	getPointer(self):AddMarker(getPointer(marker))
end
function abi.ffi.method_keyframe_add_pose(self, pose)
	getPointer(self):AddPose(getPointer(pose))
end
function abi.ffi.method_keyframe_remove_marker(self, marker)
	getPointer(self):RemoveMarker(getPointer(marker))
end
function abi.ffi.method_keyframe_remove_pose(self, pose)
	getPointer(self):RemovePose(getPointer(pose))
end
function abi.ffi.property_getter_keyframe_marker_value(self)
	local result_0 = getPointer(self).Value;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_keyframe_marker_value_set_value(self, value_addr, value_len)
	getPointer(self).Value = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_keyframe_sequence_provider_register_active_keyframe_sequence(self, keyframe_sequence)
	local result_0 = getPointer(self):RegisterActiveKeyframeSequence(getPointer(keyframe_sequence));
	return createPointer(result_0);
end
function abi.ffi.method_keyframe_sequence_provider_register_keyframe_sequence(self, keyframe_sequence)
	local result_0 = getPointer(self):RegisterKeyframeSequence(getPointer(keyframe_sequence));
	return createPointer(result_0);
end
function abi.ffi.method_keyframe_sequence_provider_get_animations(self, user_id)
	local result_0 = getPointer(self):GetAnimations(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_keyframe_sequence_provider_get_keyframe_sequence_async(self, asset_id)
	local result_0 = getPointer(self):GetKeyframeSequenceAsync(getPointer(asset_id));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_light_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_light_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_light_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_light_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_light_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_light_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_light_shadows(self)
	local result_0 = getPointer(self).Shadows;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_light_shadows_set_shadows(self, value)
	getPointer(self).Shadows = value == 1;
end
function abi.ffi.property_getter_point_light_range(self)
	local result_0 = getPointer(self).Range;
	return result_0;
end
function abi.ffi.property_setter_point_light_range_set_range(self, value)
	getPointer(self).Range = value;
end
function abi.ffi.property_getter_spot_light_angle(self)
	local result_0 = getPointer(self).Angle;
	return result_0;
end
function abi.ffi.property_setter_spot_light_angle_set_angle(self, value)
	getPointer(self).Angle = value;
end
function abi.ffi.property_getter_spot_light_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_spot_light_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_spot_light_range(self)
	local result_0 = getPointer(self).Range;
	return result_0;
end
function abi.ffi.property_setter_spot_light_range_set_range(self, value)
	getPointer(self).Range = value;
end
function abi.ffi.property_getter_surface_light_angle(self)
	local result_0 = getPointer(self).Angle;
	return result_0;
end
function abi.ffi.property_setter_surface_light_angle_set_angle(self, value)
	getPointer(self).Angle = value;
end
function abi.ffi.property_getter_surface_light_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_surface_light_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_surface_light_range(self)
	local result_0 = getPointer(self).Range;
	return result_0;
end
function abi.ffi.property_setter_surface_light_range_set_range(self, value)
	getPointer(self).Range = value;
end
function abi.ffi.property_getter_lighting_ambient(self)
	local result_0 = getPointer(self).Ambient;
	return createPointer(result_0);
end
function abi.ffi.property_setter_lighting_ambient_set_ambient(self, value)
	getPointer(self).Ambient = getPointer(value);
end
function abi.ffi.property_getter_lighting_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_lighting_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_lighting_clock_time(self)
	local result_0 = getPointer(self).ClockTime;
	return result_0;
end
function abi.ffi.property_setter_lighting_clock_time_set_clock_time(self, value)
	getPointer(self).ClockTime = value;
end
function abi.ffi.property_getter_lighting_color_shift_bottom(self)
	local result_0 = getPointer(self).ColorShift_Bottom;
	return createPointer(result_0);
end
function abi.ffi.property_setter_lighting_color_shift_bottom_set_color_shift_bottom(self, value)
	getPointer(self).ColorShift_Bottom = getPointer(value);
end
function abi.ffi.property_getter_lighting_color_shift_top(self)
	local result_0 = getPointer(self).ColorShift_Top;
	return createPointer(result_0);
end
function abi.ffi.property_setter_lighting_color_shift_top_set_color_shift_top(self, value)
	getPointer(self).ColorShift_Top = getPointer(value);
end
function abi.ffi.property_getter_lighting_environment_diffuse_scale(self)
	local result_0 = getPointer(self).EnvironmentDiffuseScale;
	return result_0;
end
function abi.ffi.property_setter_lighting_environment_diffuse_scale_set_environment_diffuse_scale(self, value)
	getPointer(self).EnvironmentDiffuseScale = value;
end
function abi.ffi.property_getter_lighting_environment_specular_scale(self)
	local result_0 = getPointer(self).EnvironmentSpecularScale;
	return result_0;
end
function abi.ffi.property_setter_lighting_environment_specular_scale_set_environment_specular_scale(self, value)
	getPointer(self).EnvironmentSpecularScale = value;
end
function abi.ffi.property_getter_lighting_exposure_compensation(self)
	local result_0 = getPointer(self).ExposureCompensation;
	return result_0;
end
function abi.ffi.property_setter_lighting_exposure_compensation_set_exposure_compensation(self, value)
	getPointer(self).ExposureCompensation = value;
end
function abi.ffi.property_getter_lighting_fog_color(self)
	local result_0 = getPointer(self).FogColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_lighting_fog_color_set_fog_color(self, value)
	getPointer(self).FogColor = getPointer(value);
end
function abi.ffi.property_getter_lighting_fog_end(self)
	local result_0 = getPointer(self).FogEnd;
	return result_0;
end
function abi.ffi.property_setter_lighting_fog_end_set_fog_end(self, value)
	getPointer(self).FogEnd = value;
end
function abi.ffi.property_getter_lighting_fog_start(self)
	local result_0 = getPointer(self).FogStart;
	return result_0;
end
function abi.ffi.property_setter_lighting_fog_start_set_fog_start(self, value)
	getPointer(self).FogStart = value;
end
function abi.ffi.property_getter_lighting_geographic_latitude(self)
	local result_0 = getPointer(self).GeographicLatitude;
	return result_0;
end
function abi.ffi.property_setter_lighting_geographic_latitude_set_geographic_latitude(self, value)
	getPointer(self).GeographicLatitude = value;
end
function abi.ffi.property_getter_lighting_global_shadows(self)
	local result_0 = getPointer(self).GlobalShadows;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_lighting_global_shadows_set_global_shadows(self, value)
	getPointer(self).GlobalShadows = value == 1;
end
function abi.ffi.property_getter_lighting_outdoor_ambient(self)
	local result_0 = getPointer(self).OutdoorAmbient;
	return createPointer(result_0);
end
function abi.ffi.property_setter_lighting_outdoor_ambient_set_outdoor_ambient(self, value)
	getPointer(self).OutdoorAmbient = getPointer(value);
end
function abi.ffi.property_getter_lighting_shadow_softness(self)
	local result_0 = getPointer(self).ShadowSoftness;
	return result_0;
end
function abi.ffi.property_setter_lighting_shadow_softness_set_shadow_softness(self, value)
	getPointer(self).ShadowSoftness = value;
end
function abi.ffi.property_getter_lighting_time_of_day(self)
	local result_0 = getPointer(self).TimeOfDay;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_lighting_time_of_day_set_time_of_day(self, value_addr, value_len)
	getPointer(self).TimeOfDay = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_lighting_get_minutes_after_midnight(self)
	local result_0 = getPointer(self):GetMinutesAfterMidnight();
	return result_0;
end
function abi.ffi.method_lighting_get_moon_direction(self)
	local result_0 = getPointer(self):GetMoonDirection();
	return createPointer(result_0);
end
function abi.ffi.method_lighting_get_moon_phase(self)
	local result_0 = getPointer(self):GetMoonPhase();
	return result_0;
end
function abi.ffi.method_lighting_get_sun_direction(self)
	local result_0 = getPointer(self):GetSunDirection();
	return createPointer(result_0);
end
function abi.ffi.method_lighting_set_minutes_after_midnight(self, minutes)
	getPointer(self):SetMinutesAfterMidnight(minutes)
end
function abi.ffi.event_lighting_lighting_changed_on_lighting_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).LightingChanged:Connect(function(sky_changed)
		invokeFunction(callback_data, callback_vtable, sky_changed and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_localization_service_roblox_locale_id(self)
	local result_0 = getPointer(self).RobloxLocaleId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_localization_service_system_locale_id(self)
	local result_0 = getPointer(self).SystemLocaleId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_localization_service_get_translator_for_player(self, player)
	local result_0 = getPointer(self):GetTranslatorForPlayer(getPointer(player));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_localization_service_get_country_region_for_player_async(self, player)
	local result_0 = getPointer(self):GetCountryRegionForPlayerAsync(getPointer(player));
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_localization_service_get_translator_for_locale_async(self, locale_addr, locale_len)
	local result_0 = getPointer(self):GetTranslatorForLocaleAsync(loadString(memory, locale_addr, locale_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_localization_service_get_translator_for_player_async(self, player)
	local result_0 = getPointer(self):GetTranslatorForPlayerAsync(getPointer(player));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_localization_table_source_locale_id(self)
	local result_0 = getPointer(self).SourceLocaleId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_localization_table_source_locale_id_set_source_locale_id(self, value_addr, value_len)
	getPointer(self).SourceLocaleId = loadString(memory, value_addr, value_len);
end
function abi.ffi.method_localization_table_get_translator(self, locale_id_addr, locale_id_len)
	local result_0 = getPointer(self):GetTranslator(loadString(memory, locale_id_addr, locale_id_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_localization_table_remove_entry(self, key_addr, key_len, source_addr, source_len, context_addr, context_len)
	getPointer(self):RemoveEntry(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len))
end
function abi.ffi.method_localization_table_remove_entry_value(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, locale_id_addr, locale_id_len)
	getPointer(self):RemoveEntryValue(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, locale_id_addr, locale_id_len))
end
function abi.ffi.method_localization_table_remove_target_locale(self, locale_id_addr, locale_id_len)
	getPointer(self):RemoveTargetLocale(loadString(memory, locale_id_addr, locale_id_len))
end
function abi.ffi.method_localization_table_set_entry_context(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, new_context_addr, new_context_len)
	getPointer(self):SetEntryContext(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, new_context_addr, new_context_len))
end
function abi.ffi.method_localization_table_set_entry_example(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, example_addr, example_len)
	getPointer(self):SetEntryExample(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, example_addr, example_len))
end
function abi.ffi.method_localization_table_set_entry_key(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, new_key_addr, new_key_len)
	getPointer(self):SetEntryKey(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, new_key_addr, new_key_len))
end
function abi.ffi.method_localization_table_set_entry_source(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, new_source_addr, new_source_len)
	getPointer(self):SetEntrySource(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, new_source_addr, new_source_len))
end
function abi.ffi.method_localization_table_set_entry_value(self, key_addr, key_len, source_addr, source_len, context_addr, context_len, locale_id_addr, locale_id_len, text_addr, text_len)
	getPointer(self):SetEntryValue(loadString(memory, key_addr, key_len), loadString(memory, source_addr, source_len), loadString(memory, context_addr, context_len), loadString(memory, locale_id_addr, locale_id_len), loadString(memory, text_addr, text_len))
end
function abi.ffi.property_getter_lod_data_entity_entity_lod_enabled(self)
	local result_0 = getPointer(self).EntityLodEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_lod_data_entity_entity_lod_enabled_set_entity_lod_enabled(self, value)
	getPointer(self).EntityLodEnabled = value == 1;
end
function abi.ffi.event_log_service_message_out_on_message_out(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MessageOut:Connect(function(message, message_type)
		local message_len = #message;
		local message_content = allocString(message_len);
		for i = 1, message_len do
			storeU8(memory, message_content + (i - 1), string.byte(message:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, message_content, message_len, message_type)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_script_disabled(self)
	local result_0 = getPointer(self).Disabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_script_disabled_set_disabled(self, value)
	getPointer(self).Disabled = value == 1;
end
function abi.ffi.property_getter_base_script_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_script_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_base_script_linked_source(self)
	local result_0 = getPointer(self).LinkedSource;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_script_linked_source_set_linked_source(self, value)
	getPointer(self).LinkedSource = getPointer(value);
end
function abi.ffi.property_getter_module_script_linked_source(self)
	local result_0 = getPointer(self).LinkedSource;
	return createPointer(result_0);
end
function abi.ffi.property_setter_module_script_linked_source_set_linked_source(self, value)
	getPointer(self).LinkedSource = getPointer(value);
end
function abi.ffi.property_getter_marker_curve_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.method_marker_curve_remove_marker_at_index(self, starting_index, count)
	local result_0 = getPointer(self):RemoveMarkerAtIndex(starting_index, count);
	return result_0;
end
function abi.ffi.method_marketplace_service_prompt_bundle_purchase(self, player, bundle_id)
	getPointer(self):PromptBundlePurchase(getPointer(player), bundle_id)
end
function abi.ffi.method_marketplace_service_prompt_game_pass_purchase(self, player, game_pass_id)
	getPointer(self):PromptGamePassPurchase(getPointer(player), game_pass_id)
end
function abi.ffi.method_marketplace_service_prompt_premium_purchase(self, player)
	getPointer(self):PromptPremiumPurchase(getPointer(player))
end
function abi.ffi.method_marketplace_service_prompt_product_purchase(self, player, product_id, equip_if_purchased, currency_type)
	getPointer(self):PromptProductPurchase(getPointer(player), product_id, equip_if_purchased == 1, currency_type)
end
function abi.ffi.method_marketplace_service_prompt_purchase(self, player, asset_id, equip_if_purchased, currency_type)
	getPointer(self):PromptPurchase(getPointer(player), asset_id, equip_if_purchased == 1, currency_type)
end
function abi.ffi.method_marketplace_service_prompt_subscription_cancellation(self, player, subscription_id)
	getPointer(self):PromptSubscriptionCancellation(getPointer(player), subscription_id)
end
function abi.ffi.method_marketplace_service_prompt_subscription_purchase(self, player, subscription_id)
	getPointer(self):PromptSubscriptionPurchase(getPointer(player), subscription_id)
end
function abi.ffi.method_marketplace_service_get_developer_products_async(self)
	local result_0 = getPointer(self):GetDeveloperProductsAsync();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_marketplace_service_is_player_subscribed(self, player, subscription_id)
	local result_0 = getPointer(self):IsPlayerSubscribed(getPointer(player), subscription_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_marketplace_service_player_owns_asset(self, player, asset_id)
	local result_0 = getPointer(self):PlayerOwnsAsset(getPointer(player), asset_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_marketplace_service_player_owns_bundle(self, player, bundle_id)
	local result_0 = getPointer(self):PlayerOwnsBundle(getPointer(player), bundle_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_marketplace_service_user_owns_game_pass_async(self, user_id, game_pass_id)
	local result_0 = getPointer(self):UserOwnsGamePassAsync(user_id, game_pass_id);
	return result_0 and 1 or 0;
end
function abi.ffi.event_marketplace_service_prompt_bundle_purchase_finished_on_prompt_bundle_purchase_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptBundlePurchaseFinished:Connect(function(player, bundle_id, was_purchased)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, bundle_id, was_purchased and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_marketplace_service_prompt_game_pass_purchase_finished_on_prompt_game_pass_purchase_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptGamePassPurchaseFinished:Connect(function(player, game_pass_id, was_purchased)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, game_pass_id, was_purchased and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_marketplace_service_prompt_premium_purchase_finished_on_prompt_premium_purchase_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptPremiumPurchaseFinished:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_marketplace_service_prompt_purchase_finished_on_prompt_purchase_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptPurchaseFinished:Connect(function(player, asset_id, is_purchased)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, asset_id, is_purchased and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_marketplace_service_prompt_subscription_cancellation_finished_on_prompt_subscription_cancellation_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptSubscriptionCancellationFinished:Connect(function(player, subscription_id, was_canceled)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, subscription_id, was_canceled and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_marketplace_service_prompt_subscription_purchase_finished_on_prompt_subscription_purchase_finished(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptSubscriptionPurchaseFinished:Connect(function(player, subscription_id, was_purchased)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, subscription_id, was_purchased and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_material_service_get_base_material_override(self, material)
	local result_0 = getPointer(self):GetBaseMaterialOverride(material);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_material_service_get_material_variant(self, material, name_addr, name_len)
	local result_0 = getPointer(self):GetMaterialVariant(material, loadString(memory, name_addr, name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_material_service_set_base_material_override(self, material, name_addr, name_len)
	getPointer(self):SetBaseMaterialOverride(material, loadString(memory, name_addr, name_len))
end
function abi.ffi.property_getter_material_variant_custom_physical_properties(self)
	local result_0 = getPointer(self).CustomPhysicalProperties;
	return createPointer(result_0);
end
function abi.ffi.property_setter_material_variant_custom_physical_properties_set_custom_physical_properties(self, value)
	getPointer(self).CustomPhysicalProperties = getPointer(value);
end
function abi.ffi.property_getter_material_variant_material_pattern(self)
	local result_0 = getPointer(self).MaterialPattern;
	return result_0;
end
function abi.ffi.property_setter_material_variant_material_pattern_set_material_pattern(self, value)
	getPointer(self).MaterialPattern = value;
end
function abi.ffi.property_getter_material_variant_studs_per_tile(self)
	local result_0 = getPointer(self).StudsPerTile;
	return result_0;
end
function abi.ffi.property_setter_material_variant_studs_per_tile_set_studs_per_tile(self, value)
	getPointer(self).StudsPerTile = value;
end
function abi.ffi.method_memory_store_queue_remove_async(self, id_addr, id_len)
	getPointer(self):RemoveAsync(loadString(memory, id_addr, id_len))
end
function abi.ffi.method_memory_store_service_get_queue(self, name_addr, name_len, invisibility_timeout)
	local result_0 = getPointer(self):GetQueue(loadString(memory, name_addr, name_len), invisibility_timeout);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_memory_store_service_get_sorted_map(self, name_addr, name_len)
	local result_0 = getPointer(self):GetSortedMap(loadString(memory, name_addr, name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_memory_store_sorted_map_remove_async(self, key_addr, key_len)
	getPointer(self):RemoveAsync(loadString(memory, key_addr, key_len))
end
function abi.ffi.property_getter_mouse_hit(self)
	local result_0 = getPointer(self).Hit;
	return createPointer(result_0);
end
function abi.ffi.property_getter_mouse_icon(self)
	local result_0 = getPointer(self).Icon;
	return createPointer(result_0);
end
function abi.ffi.property_setter_mouse_icon_set_icon(self, value)
	getPointer(self).Icon = getPointer(value);
end
function abi.ffi.property_getter_mouse_origin(self)
	local result_0 = getPointer(self).Origin;
	return createPointer(result_0);
end
function abi.ffi.property_getter_mouse_target(self)
	local result_0 = getPointer(self).Target;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_mouse_target_filter(self)
	local result_0 = getPointer(self).TargetFilter;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_mouse_target_filter_set_target_filter(self, value)
	getPointer(self).TargetFilter = getPointer(value);
end
function abi.ffi.property_getter_mouse_target_surface(self)
	local result_0 = getPointer(self).TargetSurface;
	return result_0;
end
function abi.ffi.property_getter_mouse_unit_ray(self)
	local result_0 = getPointer(self).UnitRay;
	return createPointer(result_0);
end
function abi.ffi.property_getter_mouse_view_size_x(self)
	local result_0 = getPointer(self).ViewSizeX;
	return result_0;
end
function abi.ffi.property_getter_mouse_view_size_y(self)
	local result_0 = getPointer(self).ViewSizeY;
	return result_0;
end
function abi.ffi.property_getter_mouse_x(self)
	local result_0 = getPointer(self).X;
	return result_0;
end
function abi.ffi.property_getter_mouse_y(self)
	local result_0 = getPointer(self).Y;
	return result_0;
end
function abi.ffi.event_mouse_button_1_down_on_button_1_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Button1Down:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_button_1_up_on_button_1_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Button1Up:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_button_2_down_on_button_2_down(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Button2Down:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_button_2_up_on_button_2_up(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Button2Up:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_idle_on_idle(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Idle:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_move_on_move(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Move:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_wheel_backward_on_wheel_backward(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).WheelBackward:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_mouse_wheel_forward_on_wheel_forward(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).WheelForward:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_network_marker_received_on_received(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Received:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_no_collision_constraint_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_no_collision_constraint_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_no_collision_constraint_part_0(self)
	local result_0 = getPointer(self).Part0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_no_collision_constraint_part_0_set_part_0(self, value)
	getPointer(self).Part0 = getPointer(value);
end
function abi.ffi.property_getter_no_collision_constraint_part_1(self)
	local result_0 = getPointer(self).Part1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_no_collision_constraint_part_1_set_part_1(self, value)
	getPointer(self).Part1 = getPointer(value);
end
function abi.ffi.method_pv_instance_get_pivot(self)
	local result_0 = getPointer(self):GetPivot();
	return createPointer(result_0);
end
function abi.ffi.method_pv_instance_pivot_to(self, target_c_frame)
	getPointer(self):PivotTo(getPointer(target_c_frame))
end
function abi.ffi.property_getter_base_part_anchored(self)
	local result_0 = getPointer(self).Anchored;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_anchored_set_anchored(self, value)
	getPointer(self).Anchored = value == 1;
end
function abi.ffi.property_getter_base_part_assembly_angular_velocity(self)
	local result_0 = getPointer(self).AssemblyAngularVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_assembly_angular_velocity_set_assembly_angular_velocity(self, value)
	getPointer(self).AssemblyAngularVelocity = getPointer(value);
end
function abi.ffi.property_getter_base_part_assembly_center_of_mass(self)
	local result_0 = getPointer(self).AssemblyCenterOfMass;
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_part_assembly_linear_velocity(self)
	local result_0 = getPointer(self).AssemblyLinearVelocity;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_assembly_linear_velocity_set_assembly_linear_velocity(self, value)
	getPointer(self).AssemblyLinearVelocity = getPointer(value);
end
function abi.ffi.property_getter_base_part_assembly_mass(self)
	local result_0 = getPointer(self).AssemblyMass;
	return result_0;
end
function abi.ffi.property_getter_base_part_assembly_root_part(self)
	local result_0 = getPointer(self).AssemblyRootPart;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_base_part_back_surface(self)
	local result_0 = getPointer(self).BackSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_back_surface_set_back_surface(self, value)
	getPointer(self).BackSurface = value;
end
function abi.ffi.property_getter_base_part_bottom_surface(self)
	local result_0 = getPointer(self).BottomSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_bottom_surface_set_bottom_surface(self, value)
	getPointer(self).BottomSurface = value;
end
function abi.ffi.property_getter_base_part_brick_color(self)
	local result_0 = getPointer(self).BrickColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_brick_color_set_brick_color(self, value)
	getPointer(self).BrickColor = getPointer(value);
end
function abi.ffi.property_getter_base_part_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.property_getter_base_part_can_collide(self)
	local result_0 = getPointer(self).CanCollide;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_can_collide_set_can_collide(self, value)
	getPointer(self).CanCollide = value == 1;
end
function abi.ffi.property_getter_base_part_can_query(self)
	local result_0 = getPointer(self).CanQuery;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_can_query_set_can_query(self, value)
	getPointer(self).CanQuery = value == 1;
end
function abi.ffi.property_getter_base_part_can_touch(self)
	local result_0 = getPointer(self).CanTouch;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_can_touch_set_can_touch(self, value)
	getPointer(self).CanTouch = value == 1;
end
function abi.ffi.property_getter_base_part_cast_shadow(self)
	local result_0 = getPointer(self).CastShadow;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_cast_shadow_set_cast_shadow(self, value)
	getPointer(self).CastShadow = value == 1;
end
function abi.ffi.property_getter_base_part_center_of_mass(self)
	local result_0 = getPointer(self).CenterOfMass;
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_part_collision_group(self)
	local result_0 = getPointer(self).CollisionGroup;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_base_part_collision_group_set_collision_group(self, value_addr, value_len)
	getPointer(self).CollisionGroup = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_base_part_collision_group_id(self)
	local result_0 = getPointer(self).CollisionGroupId;
	return result_0;
end
function abi.ffi.property_setter_base_part_collision_group_id_set_collision_group_id(self, value)
	getPointer(self).CollisionGroupId = value;
end
function abi.ffi.property_getter_base_part_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_base_part_current_physical_properties(self)
	local result_0 = getPointer(self).CurrentPhysicalProperties;
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_part_custom_physical_properties(self)
	local result_0 = getPointer(self).CustomPhysicalProperties;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_custom_physical_properties_set_custom_physical_properties(self, value)
	getPointer(self).CustomPhysicalProperties = getPointer(value);
end
function abi.ffi.property_getter_base_part_front_surface(self)
	local result_0 = getPointer(self).FrontSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_front_surface_set_front_surface(self, value)
	getPointer(self).FrontSurface = value;
end
function abi.ffi.property_getter_base_part_left_surface(self)
	local result_0 = getPointer(self).LeftSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_left_surface_set_left_surface(self, value)
	getPointer(self).LeftSurface = value;
end
function abi.ffi.property_getter_base_part_local_transparency_modifier(self)
	local result_0 = getPointer(self).LocalTransparencyModifier;
	return result_0;
end
function abi.ffi.property_setter_base_part_local_transparency_modifier_set_local_transparency_modifier(self, value)
	getPointer(self).LocalTransparencyModifier = value;
end
function abi.ffi.property_getter_base_part_locked(self)
	local result_0 = getPointer(self).Locked;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_locked_set_locked(self, value)
	getPointer(self).Locked = value == 1;
end
function abi.ffi.property_getter_base_part_mass(self)
	local result_0 = getPointer(self).Mass;
	return result_0;
end
function abi.ffi.property_getter_base_part_massless(self)
	local result_0 = getPointer(self).Massless;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_base_part_massless_set_massless(self, value)
	getPointer(self).Massless = value == 1;
end
function abi.ffi.property_getter_base_part_material(self)
	local result_0 = getPointer(self).Material;
	return result_0;
end
function abi.ffi.property_setter_base_part_material_set_material(self, value)
	getPointer(self).Material = value;
end
function abi.ffi.property_getter_base_part_material_variant(self)
	local result_0 = getPointer(self).MaterialVariant;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_base_part_material_variant_set_material_variant(self, value_addr, value_len)
	getPointer(self).MaterialVariant = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_base_part_orientation(self)
	local result_0 = getPointer(self).Orientation;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_orientation_set_orientation(self, value)
	getPointer(self).Orientation = getPointer(value);
end
function abi.ffi.property_getter_base_part_pivot_offset(self)
	local result_0 = getPointer(self).PivotOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_pivot_offset_set_pivot_offset(self, value)
	getPointer(self).PivotOffset = getPointer(value);
end
function abi.ffi.property_getter_base_part_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_position_set_position(self, value)
	getPointer(self).Position = getPointer(value);
end
function abi.ffi.property_getter_base_part_receive_age(self)
	local result_0 = getPointer(self).ReceiveAge;
	return result_0;
end
function abi.ffi.property_getter_base_part_reflectance(self)
	local result_0 = getPointer(self).Reflectance;
	return result_0;
end
function abi.ffi.property_setter_base_part_reflectance_set_reflectance(self, value)
	getPointer(self).Reflectance = value;
end
function abi.ffi.property_getter_base_part_resize_increment(self)
	local result_0 = getPointer(self).ResizeIncrement;
	return result_0;
end
function abi.ffi.property_getter_base_part_resizeable_faces(self)
	local result_0 = getPointer(self).ResizeableFaces;
	return createPointer(result_0);
end
function abi.ffi.property_getter_base_part_right_surface(self)
	local result_0 = getPointer(self).RightSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_right_surface_set_right_surface(self, value)
	getPointer(self).RightSurface = value;
end
function abi.ffi.property_getter_base_part_root_priority(self)
	local result_0 = getPointer(self).RootPriority;
	return result_0;
end
function abi.ffi.property_setter_base_part_root_priority_set_root_priority(self, value)
	getPointer(self).RootPriority = value;
end
function abi.ffi.property_getter_base_part_rotation(self)
	local result_0 = getPointer(self).Rotation;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_rotation_set_rotation(self, value)
	getPointer(self).Rotation = getPointer(value);
end
function abi.ffi.property_getter_base_part_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_base_part_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_base_part_top_surface(self)
	local result_0 = getPointer(self).TopSurface;
	return result_0;
end
function abi.ffi.property_setter_base_part_top_surface_set_top_surface(self, value)
	getPointer(self).TopSurface = value;
end
function abi.ffi.property_getter_base_part_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return result_0;
end
function abi.ffi.property_setter_base_part_transparency_set_transparency(self, value)
	getPointer(self).Transparency = value;
end
function abi.ffi.method_base_part_apply_angular_impulse(self, impulse)
	getPointer(self):ApplyAngularImpulse(getPointer(impulse))
end
function abi.ffi.method_base_part_apply_impulse(self, impulse)
	getPointer(self):ApplyImpulse(getPointer(impulse))
end
function abi.ffi.method_base_part_apply_impulse_at_position(self, impulse, position)
	getPointer(self):ApplyImpulseAtPosition(getPointer(impulse), getPointer(position))
end
function abi.ffi.method_base_part_break_joints(self)
	getPointer(self):BreakJoints()
end
function abi.ffi.method_base_part_can_collide_with(self, part)
	local result_0 = getPointer(self):CanCollideWith(getPointer(part));
	return result_0 and 1 or 0;
end
function abi.ffi.method_base_part_get_mass(self)
	local result_0 = getPointer(self):GetMass();
	return result_0;
end
function abi.ffi.method_base_part_get_network_owner(self)
	local result_0 = getPointer(self):GetNetworkOwner();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_base_part_get_network_ownership_auto(self)
	local result_0 = getPointer(self):GetNetworkOwnershipAuto();
	return result_0 and 1 or 0;
end
function abi.ffi.method_base_part_get_root_part(self)
	local result_0 = getPointer(self):GetRootPart();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_base_part_get_velocity_at_position(self, position)
	local result_0 = getPointer(self):GetVelocityAtPosition(getPointer(position));
	return createPointer(result_0);
end
function abi.ffi.method_base_part_is_grounded(self)
	local result_0 = getPointer(self):IsGrounded();
	return result_0 and 1 or 0;
end
function abi.ffi.method_base_part_make_joints(self)
	getPointer(self):MakeJoints()
end
function abi.ffi.method_base_part_resize(self, normal_id, delta_amount)
	local result_0 = getPointer(self):Resize(normal_id, delta_amount);
	return result_0 and 1 or 0;
end
function abi.ffi.method_base_part_set_network_owner(self, player_instance)
	getPointer(self):SetNetworkOwner(getPointer(player_instance))
end
function abi.ffi.method_base_part_set_network_ownership_auto(self)
	getPointer(self):SetNetworkOwnershipAuto()
end
function abi.ffi.event_base_part_touch_ended_on_touch_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchEnded:Connect(function(other_part)
		local other_part_optional, other_part_optional_0 = 0, 0;
		if (other_part ~= nil) then
			other_part_optional, other_part_optional_0 = 1, createPointer(other_part);
		end
		invokeFunction(callback_data, callback_vtable, other_part_optional, other_part_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_base_part_touched_on_touched(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Touched:Connect(function(part)
		invokeFunction(callback_data, callback_vtable, createPointer(part))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_part_shape(self)
	local result_0 = getPointer(self).Shape;
	return result_0;
end
function abi.ffi.property_setter_part_shape_set_shape(self, value)
	getPointer(self).Shape = value;
end
function abi.ffi.property_getter_seat_disabled(self)
	local result_0 = getPointer(self).Disabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_seat_disabled_set_disabled(self, value)
	getPointer(self).Disabled = value == 1;
end
function abi.ffi.property_getter_seat_occupant(self)
	local result_0 = getPointer(self).Occupant;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_seat_sit(self, humanoid)
	getPointer(self):Sit(getPointer(humanoid))
end
function abi.ffi.property_getter_spawn_location_allow_team_change_on_touch(self)
	local result_0 = getPointer(self).AllowTeamChangeOnTouch;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_spawn_location_allow_team_change_on_touch_set_allow_team_change_on_touch(self, value)
	getPointer(self).AllowTeamChangeOnTouch = value == 1;
end
function abi.ffi.property_getter_spawn_location_duration(self)
	local result_0 = getPointer(self).Duration;
	return result_0;
end
function abi.ffi.property_setter_spawn_location_duration_set_duration(self, value)
	getPointer(self).Duration = value;
end
function abi.ffi.property_getter_spawn_location_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_spawn_location_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_spawn_location_neutral(self)
	local result_0 = getPointer(self).Neutral;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_spawn_location_neutral_set_neutral(self, value)
	getPointer(self).Neutral = value == 1;
end
function abi.ffi.property_getter_spawn_location_team_color(self)
	local result_0 = getPointer(self).TeamColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_spawn_location_team_color_set_team_color(self, value)
	getPointer(self).TeamColor = getPointer(value);
end
function abi.ffi.property_getter_terrain_max_extents(self)
	local result_0 = getPointer(self).MaxExtents;
	return createPointer(result_0);
end
function abi.ffi.property_getter_terrain_water_color(self)
	local result_0 = getPointer(self).WaterColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_terrain_water_color_set_water_color(self, value)
	getPointer(self).WaterColor = getPointer(value);
end
function abi.ffi.property_getter_terrain_water_reflectance(self)
	local result_0 = getPointer(self).WaterReflectance;
	return result_0;
end
function abi.ffi.property_setter_terrain_water_reflectance_set_water_reflectance(self, value)
	getPointer(self).WaterReflectance = value;
end
function abi.ffi.property_getter_terrain_water_transparency(self)
	local result_0 = getPointer(self).WaterTransparency;
	return result_0;
end
function abi.ffi.property_setter_terrain_water_transparency_set_water_transparency(self, value)
	getPointer(self).WaterTransparency = value;
end
function abi.ffi.property_getter_terrain_water_wave_size(self)
	local result_0 = getPointer(self).WaterWaveSize;
	return result_0;
end
function abi.ffi.property_setter_terrain_water_wave_size_set_water_wave_size(self, value)
	getPointer(self).WaterWaveSize = value;
end
function abi.ffi.property_getter_terrain_water_wave_speed(self)
	local result_0 = getPointer(self).WaterWaveSpeed;
	return result_0;
end
function abi.ffi.property_setter_terrain_water_wave_speed_set_water_wave_speed(self, value)
	getPointer(self).WaterWaveSpeed = value;
end
function abi.ffi.method_terrain_cell_center_to_world(self, x, y, z)
	local result_0 = getPointer(self):CellCenterToWorld(x, y, z);
	return createPointer(result_0);
end
function abi.ffi.method_terrain_cell_corner_to_world(self, x, y, z)
	local result_0 = getPointer(self):CellCornerToWorld(x, y, z);
	return createPointer(result_0);
end
function abi.ffi.method_terrain_clear(self)
	getPointer(self):Clear()
end
function abi.ffi.method_terrain_copy_region(self, region)
	local result_0 = getPointer(self):CopyRegion(getPointer(region));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_terrain_count_cells(self)
	local result_0 = getPointer(self):CountCells();
	return result_0;
end
function abi.ffi.method_terrain_fill_ball(self, center, radius, material)
	getPointer(self):FillBall(getPointer(center), radius, material)
end
function abi.ffi.method_terrain_fill_block(self, cframe, size, material)
	getPointer(self):FillBlock(getPointer(cframe), getPointer(size), material)
end
function abi.ffi.method_terrain_fill_cylinder(self, cframe, height, radius, material)
	getPointer(self):FillCylinder(getPointer(cframe), height, radius, material)
end
function abi.ffi.method_terrain_fill_region(self, region, resolution, material)
	getPointer(self):FillRegion(getPointer(region), resolution, material)
end
function abi.ffi.method_terrain_fill_wedge(self, cframe, size, material)
	getPointer(self):FillWedge(getPointer(cframe), getPointer(size), material)
end
function abi.ffi.method_terrain_get_material_color(self, material)
	local result_0 = getPointer(self):GetMaterialColor(material);
	return createPointer(result_0);
end
function abi.ffi.method_terrain_paste_region(self, region, corner, paste_empty_cells)
	getPointer(self):PasteRegion(getPointer(region), getPointer(corner), paste_empty_cells == 1)
end
function abi.ffi.method_terrain_replace_material(self, region, resolution, source_material, target_material)
	getPointer(self):ReplaceMaterial(getPointer(region), resolution, source_material, target_material)
end
function abi.ffi.method_terrain_set_material_color(self, material, value)
	getPointer(self):SetMaterialColor(material, getPointer(value))
end
function abi.ffi.method_terrain_world_to_cell(self, position)
	local result_0 = getPointer(self):WorldToCell(getPointer(position));
	return createPointer(result_0);
end
function abi.ffi.method_terrain_world_to_cell_prefer_empty(self, position)
	local result_0 = getPointer(self):WorldToCellPreferEmpty(getPointer(position));
	return createPointer(result_0);
end
function abi.ffi.method_terrain_world_to_cell_prefer_solid(self, position)
	local result_0 = getPointer(self):WorldToCellPreferSolid(getPointer(position));
	return createPointer(result_0);
end
function abi.ffi.property_getter_triangle_mesh_part_collision_fidelity(self)
	local result_0 = getPointer(self).CollisionFidelity;
	return result_0;
end
function abi.ffi.property_setter_triangle_mesh_part_collision_fidelity_set_collision_fidelity(self, value)
	getPointer(self).CollisionFidelity = value;
end
function abi.ffi.property_getter_triangle_mesh_part_mesh_size(self)
	local result_0 = getPointer(self).MeshSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_mesh_part_double_sided(self)
	local result_0 = getPointer(self).DoubleSided;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_mesh_part_double_sided_set_double_sided(self, value)
	getPointer(self).DoubleSided = value == 1;
end
function abi.ffi.property_getter_mesh_part_has_joint_offset(self)
	local result_0 = getPointer(self).HasJointOffset;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_mesh_part_has_joint_offset_set_has_joint_offset(self, value)
	getPointer(self).HasJointOffset = value == 1;
end
function abi.ffi.property_getter_mesh_part_has_skinned_mesh(self)
	local result_0 = getPointer(self).HasSkinnedMesh;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_mesh_part_has_skinned_mesh_set_has_skinned_mesh(self, value)
	getPointer(self).HasSkinnedMesh = value == 1;
end
function abi.ffi.property_getter_mesh_part_joint_offset(self)
	local result_0 = getPointer(self).JointOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_mesh_part_joint_offset_set_joint_offset(self, value)
	getPointer(self).JointOffset = getPointer(value);
end
function abi.ffi.property_getter_mesh_part_mesh_id(self)
	local result_0 = getPointer(self).MeshId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_mesh_part_mesh_id_set_mesh_id(self, value)
	getPointer(self).MeshId = getPointer(value);
end
function abi.ffi.property_getter_mesh_part_render_fidelity(self)
	local result_0 = getPointer(self).RenderFidelity;
	return result_0;
end
function abi.ffi.property_setter_mesh_part_render_fidelity_set_render_fidelity(self, value)
	getPointer(self).RenderFidelity = value;
end
function abi.ffi.property_getter_mesh_part_texture_id(self)
	local result_0 = getPointer(self).TextureID;
	return createPointer(result_0);
end
function abi.ffi.property_setter_mesh_part_texture_id_set_texture_id(self, value)
	getPointer(self).TextureID = getPointer(value);
end
function abi.ffi.method_mesh_part_apply_mesh(self, mesh_part)
	getPointer(self):ApplyMesh(getPointer(mesh_part))
end
function abi.ffi.property_getter_part_operation_render_fidelity(self)
	local result_0 = getPointer(self).RenderFidelity;
	return result_0;
end
function abi.ffi.property_setter_part_operation_render_fidelity_set_render_fidelity(self, value)
	getPointer(self).RenderFidelity = value;
end
function abi.ffi.property_getter_part_operation_smoothing_angle(self)
	local result_0 = getPointer(self).SmoothingAngle;
	return result_0;
end
function abi.ffi.property_setter_part_operation_smoothing_angle_set_smoothing_angle(self, value)
	getPointer(self).SmoothingAngle = value;
end
function abi.ffi.property_getter_part_operation_triangle_count(self)
	local result_0 = getPointer(self).TriangleCount;
	return result_0;
end
function abi.ffi.property_getter_part_operation_use_part_color(self)
	local result_0 = getPointer(self).UsePartColor;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_part_operation_use_part_color_set_use_part_color(self, value)
	getPointer(self).UsePartColor = value == 1;
end
function abi.ffi.property_getter_truss_part_style(self)
	local result_0 = getPointer(self).Style;
	return result_0;
end
function abi.ffi.property_setter_truss_part_style_set_style(self, value)
	getPointer(self).Style = value;
end
function abi.ffi.property_getter_vehicle_seat_are_hinges_detected(self)
	local result_0 = getPointer(self).AreHingesDetected;
	return result_0;
end
function abi.ffi.property_getter_vehicle_seat_disabled(self)
	local result_0 = getPointer(self).Disabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_vehicle_seat_disabled_set_disabled(self, value)
	getPointer(self).Disabled = value == 1;
end
function abi.ffi.property_getter_vehicle_seat_heads_up_display(self)
	local result_0 = getPointer(self).HeadsUpDisplay;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_vehicle_seat_heads_up_display_set_heads_up_display(self, value)
	getPointer(self).HeadsUpDisplay = value == 1;
end
function abi.ffi.property_getter_vehicle_seat_max_speed(self)
	local result_0 = getPointer(self).MaxSpeed;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_max_speed_set_max_speed(self, value)
	getPointer(self).MaxSpeed = value;
end
function abi.ffi.property_getter_vehicle_seat_occupant(self)
	local result_0 = getPointer(self).Occupant;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_vehicle_seat_steer(self)
	local result_0 = getPointer(self).Steer;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_steer_set_steer(self, value)
	getPointer(self).Steer = value;
end
function abi.ffi.property_getter_vehicle_seat_steer_float(self)
	local result_0 = getPointer(self).SteerFloat;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_steer_float_set_steer_float(self, value)
	getPointer(self).SteerFloat = value;
end
function abi.ffi.property_getter_vehicle_seat_throttle(self)
	local result_0 = getPointer(self).Throttle;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_throttle_set_throttle(self, value)
	getPointer(self).Throttle = value;
end
function abi.ffi.property_getter_vehicle_seat_throttle_float(self)
	local result_0 = getPointer(self).ThrottleFloat;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_throttle_float_set_throttle_float(self, value)
	getPointer(self).ThrottleFloat = value;
end
function abi.ffi.property_getter_vehicle_seat_torque(self)
	local result_0 = getPointer(self).Torque;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_torque_set_torque(self, value)
	getPointer(self).Torque = value;
end
function abi.ffi.property_getter_vehicle_seat_turn_speed(self)
	local result_0 = getPointer(self).TurnSpeed;
	return result_0;
end
function abi.ffi.property_setter_vehicle_seat_turn_speed_set_turn_speed(self, value)
	getPointer(self).TurnSpeed = value;
end
function abi.ffi.method_vehicle_seat_sit(self, humanoid)
	getPointer(self):Sit(getPointer(humanoid))
end
function abi.ffi.property_getter_model_model_streaming_mode(self)
	local result_0 = getPointer(self).ModelStreamingMode;
	return result_0;
end
function abi.ffi.property_setter_model_model_streaming_mode_set_model_streaming_mode(self, value)
	getPointer(self).ModelStreamingMode = value;
end
function abi.ffi.property_getter_model_primary_part(self)
	local result_0 = getPointer(self).PrimaryPart;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_model_primary_part_set_primary_part(self, value)
	getPointer(self).PrimaryPart = getPointer(value);
end
function abi.ffi.property_getter_model_world_pivot(self)
	local result_0 = getPointer(self).WorldPivot;
	return createPointer(result_0);
end
function abi.ffi.property_setter_model_world_pivot_set_world_pivot(self, value)
	getPointer(self).WorldPivot = getPointer(value);
end
function abi.ffi.method_model_break_joints(self)
	getPointer(self):BreakJoints()
end
function abi.ffi.method_model_get_extents_size(self)
	local result_0 = getPointer(self):GetExtentsSize();
	return createPointer(result_0);
end
function abi.ffi.method_model_make_joints(self)
	getPointer(self):MakeJoints()
end
function abi.ffi.method_model_move_to(self, position)
	getPointer(self):MoveTo(getPointer(position))
end
function abi.ffi.method_model_translate_by(self, delta)
	getPointer(self):TranslateBy(getPointer(delta))
end
function abi.ffi.method_world_root_raycast(self, origin, direction, raycast_params)
	local result_0 = getPointer(self):Raycast(getPointer(origin), getPointer(direction), getPointer(raycast_params));
	return createPointer(result_0);
end
function abi.ffi.property_getter_workspace_allow_third_party_sales(self)
	local result_0 = getPointer(self).AllowThirdPartySales;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_workspace_allow_third_party_sales_set_allow_third_party_sales(self, value)
	getPointer(self).AllowThirdPartySales = value == 1;
end
function abi.ffi.property_getter_workspace_client_animator_throttling(self)
	local result_0 = getPointer(self).ClientAnimatorThrottling;
	return result_0;
end
function abi.ffi.property_setter_workspace_client_animator_throttling_set_client_animator_throttling(self, value)
	getPointer(self).ClientAnimatorThrottling = value;
end
function abi.ffi.property_getter_workspace_current_camera(self)
	local result_0 = getPointer(self).CurrentCamera;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_workspace_current_camera_set_current_camera(self, value)
	getPointer(self).CurrentCamera = getPointer(value);
end
function abi.ffi.property_getter_workspace_distributed_game_time(self)
	local result_0 = getPointer(self).DistributedGameTime;
	return result_0;
end
function abi.ffi.property_setter_workspace_distributed_game_time_set_distributed_game_time(self, value)
	getPointer(self).DistributedGameTime = value;
end
function abi.ffi.property_getter_workspace_fallen_parts_destroy_height(self)
	local result_0 = getPointer(self).FallenPartsDestroyHeight;
	return result_0;
end
function abi.ffi.property_setter_workspace_fallen_parts_destroy_height_set_fallen_parts_destroy_height(self, value)
	getPointer(self).FallenPartsDestroyHeight = value;
end
function abi.ffi.property_getter_workspace_global_wind(self)
	local result_0 = getPointer(self).GlobalWind;
	return createPointer(result_0);
end
function abi.ffi.property_setter_workspace_global_wind_set_global_wind(self, value)
	getPointer(self).GlobalWind = getPointer(value);
end
function abi.ffi.property_getter_workspace_gravity(self)
	local result_0 = getPointer(self).Gravity;
	return result_0;
end
function abi.ffi.property_setter_workspace_gravity_set_gravity(self, value)
	getPointer(self).Gravity = value;
end
function abi.ffi.property_getter_workspace_interpolation_throttling(self)
	local result_0 = getPointer(self).InterpolationThrottling;
	return result_0;
end
function abi.ffi.property_setter_workspace_interpolation_throttling_set_interpolation_throttling(self, value)
	getPointer(self).InterpolationThrottling = value;
end
function abi.ffi.property_getter_workspace_retargeting(self)
	local result_0 = getPointer(self).Retargeting;
	return result_0;
end
function abi.ffi.property_setter_workspace_retargeting_set_retargeting(self, value)
	getPointer(self).Retargeting = value;
end
function abi.ffi.property_getter_workspace_streaming_enabled(self)
	local result_0 = getPointer(self).StreamingEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_workspace_streaming_enabled_set_streaming_enabled(self, value)
	getPointer(self).StreamingEnabled = value == 1;
end
function abi.ffi.property_getter_workspace_terrain(self)
	local result_0 = getPointer(self).Terrain;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_workspace_get_num_awake_parts(self)
	local result_0 = getPointer(self):GetNumAwakeParts();
	return result_0;
end
function abi.ffi.method_workspace_get_physics_throttling(self)
	local result_0 = getPointer(self):GetPhysicsThrottling();
	return result_0;
end
function abi.ffi.method_workspace_get_real_physics_fps(self)
	local result_0 = getPointer(self):GetRealPhysicsFPS();
	return result_0;
end
function abi.ffi.method_workspace_get_server_time_now(self)
	local result_0 = getPointer(self):GetServerTimeNow();
	return result_0;
end
function abi.ffi.method_workspace_pgs_is_enabled(self)
	local result_0 = getPointer(self):PGSIsEnabled();
	return result_0 and 1 or 0;
end
function abi.ffi.event_workspace_persistent_loaded_on_persistent_loaded(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PersistentLoaded:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_package_link_package_id(self)
	local result_0 = getPointer(self).PackageId;
	return createPointer(result_0);
end
function abi.ffi.property_getter_package_link_version_number(self)
	local result_0 = getPointer(self).VersionNumber;
	return result_0;
end
function abi.ffi.property_setter_package_link_version_number_set_version_number(self, value)
	getPointer(self).VersionNumber = value;
end
function abi.ffi.property_getter_pages_is_finished(self)
	local result_0 = getPointer(self).IsFinished;
	return result_0 and 1 or 0;
end
function abi.ffi.method_pages_advance_to_next_page_async(self)
	getPointer(self):AdvanceToNextPageAsync()
end
function abi.ffi.property_getter_data_store_key_pages_cursor(self)
	local result_0 = getPointer(self).Cursor;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_store_listing_pages_cursor(self)
	local result_0 = getPointer(self).Cursor;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_particle_emitter_acceleration(self)
	local result_0 = getPointer(self).Acceleration;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_acceleration_set_acceleration(self, value)
	getPointer(self).Acceleration = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_particle_emitter_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_drag(self)
	local result_0 = getPointer(self).Drag;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_drag_set_drag(self, value)
	getPointer(self).Drag = value;
end
function abi.ffi.property_getter_particle_emitter_emission_direction(self)
	local result_0 = getPointer(self).EmissionDirection;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_emission_direction_set_emission_direction(self, value)
	getPointer(self).EmissionDirection = value;
end
function abi.ffi.property_getter_particle_emitter_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_particle_emitter_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_particle_emitter_flipbook_framerate(self)
	local result_0 = getPointer(self).FlipbookFramerate;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_flipbook_framerate_set_flipbook_framerate(self, value)
	getPointer(self).FlipbookFramerate = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_flipbook_incompatible(self)
	local result_0 = getPointer(self).FlipbookIncompatible;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_particle_emitter_flipbook_incompatible_set_flipbook_incompatible(self, value_addr, value_len)
	getPointer(self).FlipbookIncompatible = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_particle_emitter_flipbook_layout(self)
	local result_0 = getPointer(self).FlipbookLayout;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_flipbook_layout_set_flipbook_layout(self, value)
	getPointer(self).FlipbookLayout = value;
end
function abi.ffi.property_getter_particle_emitter_flipbook_mode(self)
	local result_0 = getPointer(self).FlipbookMode;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_flipbook_mode_set_flipbook_mode(self, value)
	getPointer(self).FlipbookMode = value;
end
function abi.ffi.property_getter_particle_emitter_flipbook_start_random(self)
	local result_0 = getPointer(self).FlipbookStartRandom;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_particle_emitter_flipbook_start_random_set_flipbook_start_random(self, value)
	getPointer(self).FlipbookStartRandom = value == 1;
end
function abi.ffi.property_getter_particle_emitter_lifetime(self)
	local result_0 = getPointer(self).Lifetime;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_lifetime_set_lifetime(self, value)
	getPointer(self).Lifetime = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_light_emission(self)
	local result_0 = getPointer(self).LightEmission;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_light_emission_set_light_emission(self, value)
	getPointer(self).LightEmission = value;
end
function abi.ffi.property_getter_particle_emitter_light_influence(self)
	local result_0 = getPointer(self).LightInfluence;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_light_influence_set_light_influence(self, value)
	getPointer(self).LightInfluence = value;
end
function abi.ffi.property_getter_particle_emitter_locked_to_part(self)
	local result_0 = getPointer(self).LockedToPart;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_particle_emitter_locked_to_part_set_locked_to_part(self, value)
	getPointer(self).LockedToPart = value == 1;
end
function abi.ffi.property_getter_particle_emitter_orientation(self)
	local result_0 = getPointer(self).Orientation;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_orientation_set_orientation(self, value)
	getPointer(self).Orientation = value;
end
function abi.ffi.property_getter_particle_emitter_rate(self)
	local result_0 = getPointer(self).Rate;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_rate_set_rate(self, value)
	getPointer(self).Rate = value;
end
function abi.ffi.property_getter_particle_emitter_rot_speed(self)
	local result_0 = getPointer(self).RotSpeed;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_rot_speed_set_rot_speed(self, value)
	getPointer(self).RotSpeed = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_rotation(self)
	local result_0 = getPointer(self).Rotation;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_rotation_set_rotation(self, value)
	getPointer(self).Rotation = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_shape(self)
	local result_0 = getPointer(self).Shape;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_shape_set_shape(self, value)
	getPointer(self).Shape = value;
end
function abi.ffi.property_getter_particle_emitter_shape_in_out(self)
	local result_0 = getPointer(self).ShapeInOut;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_shape_in_out_set_shape_in_out(self, value)
	getPointer(self).ShapeInOut = value;
end
function abi.ffi.property_getter_particle_emitter_shape_partial(self)
	local result_0 = getPointer(self).ShapePartial;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_shape_partial_set_shape_partial(self, value)
	getPointer(self).ShapePartial = value;
end
function abi.ffi.property_getter_particle_emitter_shape_style(self)
	local result_0 = getPointer(self).ShapeStyle;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_shape_style_set_shape_style(self, value)
	getPointer(self).ShapeStyle = value;
end
function abi.ffi.property_getter_particle_emitter_size(self)
	local result_0 = getPointer(self).Size;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_size_set_size(self, value)
	getPointer(self).Size = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_speed(self)
	local result_0 = getPointer(self).Speed;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_speed_set_speed(self, value)
	getPointer(self).Speed = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_spread_angle(self)
	local result_0 = getPointer(self).SpreadAngle;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_spread_angle_set_spread_angle(self, value)
	getPointer(self).SpreadAngle = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_squash(self)
	local result_0 = getPointer(self).Squash;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_squash_set_squash(self, value)
	getPointer(self).Squash = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_texture(self)
	local result_0 = getPointer(self).Texture;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_texture_set_texture(self, value)
	getPointer(self).Texture = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_time_scale(self)
	local result_0 = getPointer(self).TimeScale;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_time_scale_set_time_scale(self, value)
	getPointer(self).TimeScale = value;
end
function abi.ffi.property_getter_particle_emitter_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return createPointer(result_0);
end
function abi.ffi.property_setter_particle_emitter_transparency_set_transparency(self, value)
	getPointer(self).Transparency = getPointer(value);
end
function abi.ffi.property_getter_particle_emitter_velocity_inheritance(self)
	local result_0 = getPointer(self).VelocityInheritance;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_velocity_inheritance_set_velocity_inheritance(self, value)
	getPointer(self).VelocityInheritance = value;
end
function abi.ffi.property_getter_particle_emitter_z_offset(self)
	local result_0 = getPointer(self).ZOffset;
	return result_0;
end
function abi.ffi.property_setter_particle_emitter_z_offset_set_z_offset(self, value)
	getPointer(self).ZOffset = value;
end
function abi.ffi.method_particle_emitter_clear(self)
	getPointer(self):Clear()
end
function abi.ffi.method_particle_emitter_emit(self, particle_count)
	getPointer(self):Emit(particle_count)
end
function abi.ffi.property_getter_path_status(self)
	local result_0 = getPointer(self).Status;
	return result_0;
end
function abi.ffi.method_path_check_occlusion_async(self, start)
	local result_0 = getPointer(self):CheckOcclusionAsync(start);
	return result_0;
end
function abi.ffi.method_path_compute_async(self, start, finish)
	getPointer(self):ComputeAsync(getPointer(start), getPointer(finish))
end
function abi.ffi.event_path_blocked_on_blocked(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Blocked:Connect(function(blocked_waypoint_idx)
		invokeFunction(callback_data, callback_vtable, blocked_waypoint_idx)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_path_unblocked_on_unblocked(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Unblocked:Connect(function(unblocked_waypoint_idx)
		invokeFunction(callback_data, callback_vtable, unblocked_waypoint_idx)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_pathfinding_link_attachment_0(self)
	local result_0 = getPointer(self).Attachment0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_pathfinding_link_attachment_0_set_attachment_0(self, value)
	getPointer(self).Attachment0 = getPointer(value);
end
function abi.ffi.property_getter_pathfinding_link_attachment_1(self)
	local result_0 = getPointer(self).Attachment1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_pathfinding_link_attachment_1_set_attachment_1(self, value)
	getPointer(self).Attachment1 = getPointer(value);
end
function abi.ffi.property_getter_pathfinding_link_is_bidirectional(self)
	local result_0 = getPointer(self).IsBidirectional;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_pathfinding_link_is_bidirectional_set_is_bidirectional(self, value)
	getPointer(self).IsBidirectional = value == 1;
end
function abi.ffi.property_getter_pathfinding_link_label(self)
	local result_0 = getPointer(self).Label;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_pathfinding_link_label_set_label(self, value_addr, value_len)
	getPointer(self).Label = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_pathfinding_modifier_label(self)
	local result_0 = getPointer(self).Label;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_pathfinding_modifier_label_set_label(self, value_addr, value_len)
	getPointer(self).Label = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_pathfinding_modifier_pass_through(self)
	local result_0 = getPointer(self).PassThrough;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_pathfinding_modifier_pass_through_set_pass_through(self, value)
	getPointer(self).PassThrough = value == 1;
end
function abi.ffi.method_pathfinding_service_find_path_async(self, start, finish)
	local result_0 = getPointer(self):FindPathAsync(getPointer(start), getPointer(finish));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_physics_service_collision_group_contains_part(self, name_addr, name_len, part)
	local result_0 = getPointer(self):CollisionGroupContainsPart(loadString(memory, name_addr, name_len), getPointer(part));
	return result_0 and 1 or 0;
end
function abi.ffi.method_physics_service_collision_group_set_collidable(self, name_1_addr, name_1_len, name_2_addr, name_2_len, collidable)
	getPointer(self):CollisionGroupSetCollidable(loadString(memory, name_1_addr, name_1_len), loadString(memory, name_2_addr, name_2_len), collidable == 1)
end
function abi.ffi.method_physics_service_collision_groups_are_collidable(self, name_1_addr, name_1_len, name_2_addr, name_2_len)
	local result_0 = getPointer(self):CollisionGroupsAreCollidable(loadString(memory, name_1_addr, name_1_len), loadString(memory, name_2_addr, name_2_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_physics_service_create_collision_group(self, name_addr, name_len)
	local result_0 = getPointer(self):CreateCollisionGroup(loadString(memory, name_addr, name_len));
	return result_0;
end
function abi.ffi.method_physics_service_get_collision_group_id(self, name_addr, name_len)
	local result_0 = getPointer(self):GetCollisionGroupId(loadString(memory, name_addr, name_len));
	return result_0;
end
function abi.ffi.method_physics_service_get_collision_group_name(self, name)
	local result_0 = getPointer(self):GetCollisionGroupName(name);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_physics_service_get_max_collision_groups(self)
	local result_0 = getPointer(self):GetMaxCollisionGroups();
	return result_0;
end
function abi.ffi.method_physics_service_is_collision_group_registered(self, name_addr, name_len)
	local result_0 = getPointer(self):IsCollisionGroupRegistered(loadString(memory, name_addr, name_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_physics_service_register_collision_group(self, name_addr, name_len)
	getPointer(self):RegisterCollisionGroup(loadString(memory, name_addr, name_len))
end
function abi.ffi.method_physics_service_remove_collision_group(self, name_addr, name_len)
	getPointer(self):RemoveCollisionGroup(loadString(memory, name_addr, name_len))
end
function abi.ffi.method_physics_service_rename_collision_group(self, from_addr, from_len, to_addr, to_len)
	getPointer(self):RenameCollisionGroup(loadString(memory, from_addr, from_len), loadString(memory, to_addr, to_len))
end
function abi.ffi.method_physics_service_set_part_collision_group(self, part, name_addr, name_len)
	getPointer(self):SetPartCollisionGroup(getPointer(part), loadString(memory, name_addr, name_len))
end
function abi.ffi.method_physics_service_unregister_collision_group(self, name_addr, name_len)
	getPointer(self):UnregisterCollisionGroup(loadString(memory, name_addr, name_len))
end
function abi.ffi.property_getter_player_account_age(self)
	local result_0 = getPointer(self).AccountAge;
	return result_0;
end
function abi.ffi.property_getter_player_auto_jump_enabled(self)
	local result_0 = getPointer(self).AutoJumpEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_player_auto_jump_enabled_set_auto_jump_enabled(self, value)
	getPointer(self).AutoJumpEnabled = value == 1;
end
function abi.ffi.property_getter_player_camera_max_zoom_distance(self)
	local result_0 = getPointer(self).CameraMaxZoomDistance;
	return result_0;
end
function abi.ffi.property_setter_player_camera_max_zoom_distance_set_camera_max_zoom_distance(self, value)
	getPointer(self).CameraMaxZoomDistance = value;
end
function abi.ffi.property_getter_player_camera_min_zoom_distance(self)
	local result_0 = getPointer(self).CameraMinZoomDistance;
	return result_0;
end
function abi.ffi.property_setter_player_camera_min_zoom_distance_set_camera_min_zoom_distance(self, value)
	getPointer(self).CameraMinZoomDistance = value;
end
function abi.ffi.property_getter_player_camera_mode(self)
	local result_0 = getPointer(self).CameraMode;
	return result_0;
end
function abi.ffi.property_setter_player_camera_mode_set_camera_mode(self, value)
	getPointer(self).CameraMode = value;
end
function abi.ffi.property_getter_player_can_load_character_appearance(self)
	local result_0 = getPointer(self).CanLoadCharacterAppearance;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_player_can_load_character_appearance_set_can_load_character_appearance(self, value)
	getPointer(self).CanLoadCharacterAppearance = value == 1;
end
function abi.ffi.property_getter_player_character(self)
	local result_0 = getPointer(self).Character;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_player_character_set_character(self, value)
	getPointer(self).Character = getPointer(value);
end
function abi.ffi.property_getter_player_character_appearance_id(self)
	local result_0 = getPointer(self).CharacterAppearanceId;
	return result_0;
end
function abi.ffi.property_setter_player_character_appearance_id_set_character_appearance_id(self, value)
	getPointer(self).CharacterAppearanceId = value;
end
function abi.ffi.property_getter_player_dev_camera_occlusion_mode(self)
	local result_0 = getPointer(self).DevCameraOcclusionMode;
	return result_0;
end
function abi.ffi.property_setter_player_dev_camera_occlusion_mode_set_dev_camera_occlusion_mode(self, value)
	getPointer(self).DevCameraOcclusionMode = value;
end
function abi.ffi.property_getter_player_dev_computer_camera_mode(self)
	local result_0 = getPointer(self).DevComputerCameraMode;
	return result_0;
end
function abi.ffi.property_setter_player_dev_computer_camera_mode_set_dev_computer_camera_mode(self, value)
	getPointer(self).DevComputerCameraMode = value;
end
function abi.ffi.property_getter_player_dev_computer_movement_mode(self)
	local result_0 = getPointer(self).DevComputerMovementMode;
	return result_0;
end
function abi.ffi.property_setter_player_dev_computer_movement_mode_set_dev_computer_movement_mode(self, value)
	getPointer(self).DevComputerMovementMode = value;
end
function abi.ffi.property_getter_player_dev_enable_mouse_lock(self)
	local result_0 = getPointer(self).DevEnableMouseLock;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_player_dev_enable_mouse_lock_set_dev_enable_mouse_lock(self, value)
	getPointer(self).DevEnableMouseLock = value == 1;
end
function abi.ffi.property_getter_player_dev_touch_camera_mode(self)
	local result_0 = getPointer(self).DevTouchCameraMode;
	return result_0;
end
function abi.ffi.property_setter_player_dev_touch_camera_mode_set_dev_touch_camera_mode(self, value)
	getPointer(self).DevTouchCameraMode = value;
end
function abi.ffi.property_getter_player_dev_touch_movement_mode(self)
	local result_0 = getPointer(self).DevTouchMovementMode;
	return result_0;
end
function abi.ffi.property_setter_player_dev_touch_movement_mode_set_dev_touch_movement_mode(self, value)
	getPointer(self).DevTouchMovementMode = value;
end
function abi.ffi.property_getter_player_display_name(self)
	local result_0 = getPointer(self).DisplayName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_player_display_name_set_display_name(self, value_addr, value_len)
	getPointer(self).DisplayName = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_player_follow_user_id(self)
	local result_0 = getPointer(self).FollowUserId;
	return result_0;
end
function abi.ffi.property_getter_player_gameplay_paused(self)
	local result_0 = getPointer(self).GameplayPaused;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_player_gameplay_paused_set_gameplay_paused(self, value)
	getPointer(self).GameplayPaused = value == 1;
end
function abi.ffi.property_getter_player_health_display_distance(self)
	local result_0 = getPointer(self).HealthDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_player_health_display_distance_set_health_display_distance(self, value)
	getPointer(self).HealthDisplayDistance = value;
end
function abi.ffi.property_getter_player_locale_id(self)
	local result_0 = getPointer(self).LocaleId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_player_membership_type(self)
	local result_0 = getPointer(self).MembershipType;
	return result_0;
end
function abi.ffi.property_getter_player_name_display_distance(self)
	local result_0 = getPointer(self).NameDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_player_name_display_distance_set_name_display_distance(self, value)
	getPointer(self).NameDisplayDistance = value;
end
function abi.ffi.property_getter_player_neutral(self)
	local result_0 = getPointer(self).Neutral;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_player_neutral_set_neutral(self, value)
	getPointer(self).Neutral = value == 1;
end
function abi.ffi.property_getter_player_replication_focus(self)
	local result_0 = getPointer(self).ReplicationFocus;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_player_replication_focus_set_replication_focus(self, value)
	getPointer(self).ReplicationFocus = getPointer(value);
end
function abi.ffi.property_getter_player_respawn_location(self)
	local result_0 = getPointer(self).RespawnLocation;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_player_respawn_location_set_respawn_location(self, value)
	getPointer(self).RespawnLocation = getPointer(value);
end
function abi.ffi.property_getter_player_team(self)
	local result_0 = getPointer(self).Team;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_player_team_set_team(self, value)
	getPointer(self).Team = getPointer(value);
end
function abi.ffi.property_getter_player_team_color(self)
	local result_0 = getPointer(self).TeamColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_player_team_color_set_team_color(self, value)
	getPointer(self).TeamColor = getPointer(value);
end
function abi.ffi.property_getter_player_user_id(self)
	local result_0 = getPointer(self).UserId;
	return result_0;
end
function abi.ffi.property_setter_player_user_id_set_user_id(self, value)
	getPointer(self).UserId = value;
end
function abi.ffi.method_player_clear_character_appearance(self)
	getPointer(self):ClearCharacterAppearance()
end
function abi.ffi.method_player_distance_from_character(self, point)
	local result_0 = getPointer(self):DistanceFromCharacter(getPointer(point));
	return result_0;
end
function abi.ffi.method_player_get_mouse(self)
	local result_0 = getPointer(self):GetMouse();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_player_get_network_ping(self)
	local result_0 = getPointer(self):GetNetworkPing();
	return result_0;
end
function abi.ffi.method_player_has_appearance_loaded(self)
	local result_0 = getPointer(self):HasAppearanceLoaded();
	return result_0 and 1 or 0;
end
function abi.ffi.method_player_kick(self, message_addr, message_len)
	getPointer(self):Kick(loadString(memory, message_addr, message_len))
end
function abi.ffi.method_player_move(self, walk_direction, relative_to_camera)
	getPointer(self):Move(getPointer(walk_direction), relative_to_camera == 1)
end
function abi.ffi.method_player_get_rank_in_group(self, group_id)
	local result_0 = getPointer(self):GetRankInGroup(group_id);
	return result_0;
end
function abi.ffi.method_player_get_role_in_group(self, group_id)
	local result_0 = getPointer(self):GetRoleInGroup(group_id);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_player_is_friends_with(self, user_id)
	local result_0 = getPointer(self):IsFriendsWith(user_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_player_is_in_group(self, group_id)
	local result_0 = getPointer(self):IsInGroup(group_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_player_load_character(self)
	getPointer(self):LoadCharacter()
end
function abi.ffi.method_player_load_character_with_humanoid_description(self, humanoid_description)
	getPointer(self):LoadCharacterWithHumanoidDescription(getPointer(humanoid_description))
end
function abi.ffi.method_player_request_stream_around_async(self, position, time_out)
	getPointer(self):RequestStreamAroundAsync(getPointer(position), time_out)
end
function abi.ffi.event_player_character_added_on_character_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).CharacterAdded:Connect(function(character)
		local character_optional, character_optional_0 = 0, 0;
		if (character ~= nil) then
			character_optional, character_optional_0 = 1, createPointer(character);
		end
		invokeFunction(callback_data, callback_vtable, character_optional, character_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_player_character_appearance_loaded_on_character_appearance_loaded(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).CharacterAppearanceLoaded:Connect(function(character)
		local character_optional, character_optional_0 = 0, 0;
		if (character ~= nil) then
			character_optional, character_optional_0 = 1, createPointer(character);
		end
		invokeFunction(callback_data, callback_vtable, character_optional, character_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_player_character_removing_on_character_removing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).CharacterRemoving:Connect(function(character)
		local character_optional, character_optional_0 = 0, 0;
		if (character ~= nil) then
			character_optional, character_optional_0 = 1, createPointer(character);
		end
		invokeFunction(callback_data, callback_vtable, character_optional, character_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_player_chatted_on_chatted(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Chatted:Connect(function(message, recipient)
		local message_len = #message;
		local message_content = allocString(message_len);
		for i = 1, message_len do
			storeU8(memory, message_content + (i - 1), string.byte(message:sub(i, i)));
		end
		local recipient_optional, recipient_optional_0 = 0, 0;
		if (recipient ~= nil) then
			recipient_optional, recipient_optional_0 = 1, createPointer(recipient);
		end
		invokeFunction(callback_data, callback_vtable, message_content, message_len, recipient_optional, recipient_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_player_idled_on_idled(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Idled:Connect(function(time)
		invokeFunction(callback_data, callback_vtable, time)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_player_on_teleport_on_on_teleport(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).OnTeleport:Connect(function(teleport_state, place_id, spawn_name)
		local spawn_name_len = #spawn_name;
		local spawn_name_content = allocString(spawn_name_len);
		for i = 1, spawn_name_len do
			storeU8(memory, spawn_name_content + (i - 1), string.byte(spawn_name:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, teleport_state, place_id, spawn_name_content, spawn_name_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_player_scripts_clear_computer_camera_movement_modes(self)
	getPointer(self):ClearComputerCameraMovementModes()
end
function abi.ffi.method_player_scripts_clear_computer_movement_modes(self)
	getPointer(self):ClearComputerMovementModes()
end
function abi.ffi.method_player_scripts_clear_touch_camera_movement_modes(self)
	getPointer(self):ClearTouchCameraMovementModes()
end
function abi.ffi.method_player_scripts_clear_touch_movement_modes(self)
	getPointer(self):ClearTouchMovementModes()
end
function abi.ffi.method_player_scripts_register_computer_camera_movement_mode(self, camera_movement_mode)
	getPointer(self):RegisterComputerCameraMovementMode(camera_movement_mode)
end
function abi.ffi.method_player_scripts_register_computer_movement_mode(self, movement_mode)
	getPointer(self):RegisterComputerMovementMode(movement_mode)
end
function abi.ffi.method_player_scripts_register_touch_camera_movement_mode(self, camera_movement_mode)
	getPointer(self):RegisterTouchCameraMovementMode(camera_movement_mode)
end
function abi.ffi.method_player_scripts_register_touch_movement_mode(self, movement_mode)
	getPointer(self):RegisterTouchMovementMode(movement_mode)
end
function abi.ffi.property_getter_players_bubble_chat(self)
	local result_0 = getPointer(self).BubbleChat;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_players_character_auto_loads(self)
	local result_0 = getPointer(self).CharacterAutoLoads;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_players_character_auto_loads_set_character_auto_loads(self, value)
	getPointer(self).CharacterAutoLoads = value == 1;
end
function abi.ffi.property_getter_players_classic_chat(self)
	local result_0 = getPointer(self).ClassicChat;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_players_local_player(self)
	local result_0 = getPointer(self).LocalPlayer;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_players_max_players(self)
	local result_0 = getPointer(self).MaxPlayers;
	return result_0;
end
function abi.ffi.property_getter_players_preferred_players(self)
	local result_0 = getPointer(self).PreferredPlayers;
	return result_0;
end
function abi.ffi.property_getter_players_respawn_time(self)
	local result_0 = getPointer(self).RespawnTime;
	return result_0;
end
function abi.ffi.property_setter_players_respawn_time_set_respawn_time(self, value)
	getPointer(self).RespawnTime = value;
end
function abi.ffi.method_players_get_player_by_user_id(self, user_id)
	local result_0 = getPointer(self):GetPlayerByUserId(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_get_player_from_character(self, character)
	local result_0 = getPointer(self):GetPlayerFromCharacter(getPointer(character));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_create_humanoid_model_from_description(self, description, rig_type, asset_type_verification)
	local result_0 = getPointer(self):CreateHumanoidModelFromDescription(getPointer(description), rig_type, asset_type_verification);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_create_humanoid_model_from_user_id(self, user_id)
	local result_0 = getPointer(self):CreateHumanoidModelFromUserId(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_get_friends_async(self, user_id)
	local result_0 = getPointer(self):GetFriendsAsync(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_get_humanoid_description_from_outfit_id(self, outfit_id)
	local result_0 = getPointer(self):GetHumanoidDescriptionFromOutfitId(outfit_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_get_humanoid_description_from_user_id(self, user_id)
	local result_0 = getPointer(self):GetHumanoidDescriptionFromUserId(user_id);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_players_get_name_from_user_id_async(self, user_id)
	local result_0 = getPointer(self):GetNameFromUserIdAsync(user_id);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_players_get_user_id_from_name_async(self, user_name_addr, user_name_len)
	local result_0 = getPointer(self):GetUserIdFromNameAsync(loadString(memory, user_name_addr, user_name_len));
	return result_0;
end
function abi.ffi.event_players_player_added_on_player_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlayerAdded:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_players_player_membership_changed_on_player_membership_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlayerMembershipChanged:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_players_player_removing_on_player_removing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlayerRemoving:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_pose_base_easing_direction(self)
	local result_0 = getPointer(self).EasingDirection;
	return result_0;
end
function abi.ffi.property_setter_pose_base_easing_direction_set_easing_direction(self, value)
	getPointer(self).EasingDirection = value;
end
function abi.ffi.property_getter_pose_base_easing_style(self)
	local result_0 = getPointer(self).EasingStyle;
	return result_0;
end
function abi.ffi.property_setter_pose_base_easing_style_set_easing_style(self, value)
	getPointer(self).EasingStyle = value;
end
function abi.ffi.property_getter_pose_base_weight(self)
	local result_0 = getPointer(self).Weight;
	return result_0;
end
function abi.ffi.property_setter_pose_base_weight_set_weight(self, value)
	getPointer(self).Weight = value;
end
function abi.ffi.property_getter_number_pose_value(self)
	local result_0 = getPointer(self).Value;
	return result_0;
end
function abi.ffi.property_setter_number_pose_value_set_value(self, value)
	getPointer(self).Value = value;
end
function abi.ffi.property_getter_pose_c_frame(self)
	local result_0 = getPointer(self).CFrame;
	return createPointer(result_0);
end
function abi.ffi.property_setter_pose_c_frame_set_c_frame(self, value)
	getPointer(self).CFrame = getPointer(value);
end
function abi.ffi.method_pose_add_sub_pose(self, pose)
	getPointer(self):AddSubPose(getPointer(pose))
end
function abi.ffi.method_pose_remove_sub_pose(self, pose)
	getPointer(self):RemoveSubPose(getPointer(pose))
end
function abi.ffi.property_getter_post_effect_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_post_effect_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_bloom_effect_intensity(self)
	local result_0 = getPointer(self).Intensity;
	return result_0;
end
function abi.ffi.property_setter_bloom_effect_intensity_set_intensity(self, value)
	getPointer(self).Intensity = value;
end
function abi.ffi.property_getter_bloom_effect_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_bloom_effect_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_bloom_effect_threshold(self)
	local result_0 = getPointer(self).Threshold;
	return result_0;
end
function abi.ffi.property_setter_bloom_effect_threshold_set_threshold(self, value)
	getPointer(self).Threshold = value;
end
function abi.ffi.property_getter_blur_effect_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_blur_effect_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_color_correction_effect_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_color_correction_effect_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_color_correction_effect_contrast(self)
	local result_0 = getPointer(self).Contrast;
	return result_0;
end
function abi.ffi.property_setter_color_correction_effect_contrast_set_contrast(self, value)
	getPointer(self).Contrast = value;
end
function abi.ffi.property_getter_color_correction_effect_saturation(self)
	local result_0 = getPointer(self).Saturation;
	return result_0;
end
function abi.ffi.property_setter_color_correction_effect_saturation_set_saturation(self, value)
	getPointer(self).Saturation = value;
end
function abi.ffi.property_getter_color_correction_effect_tint_color(self)
	local result_0 = getPointer(self).TintColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_color_correction_effect_tint_color_set_tint_color(self, value)
	getPointer(self).TintColor = getPointer(value);
end
function abi.ffi.property_getter_depth_of_field_effect_far_intensity(self)
	local result_0 = getPointer(self).FarIntensity;
	return result_0;
end
function abi.ffi.property_setter_depth_of_field_effect_far_intensity_set_far_intensity(self, value)
	getPointer(self).FarIntensity = value;
end
function abi.ffi.property_getter_depth_of_field_effect_focus_distance(self)
	local result_0 = getPointer(self).FocusDistance;
	return result_0;
end
function abi.ffi.property_setter_depth_of_field_effect_focus_distance_set_focus_distance(self, value)
	getPointer(self).FocusDistance = value;
end
function abi.ffi.property_getter_depth_of_field_effect_in_focus_radius(self)
	local result_0 = getPointer(self).InFocusRadius;
	return result_0;
end
function abi.ffi.property_setter_depth_of_field_effect_in_focus_radius_set_in_focus_radius(self, value)
	getPointer(self).InFocusRadius = value;
end
function abi.ffi.property_getter_depth_of_field_effect_near_intensity(self)
	local result_0 = getPointer(self).NearIntensity;
	return result_0;
end
function abi.ffi.property_setter_depth_of_field_effect_near_intensity_set_near_intensity(self, value)
	getPointer(self).NearIntensity = value;
end
function abi.ffi.property_getter_sun_rays_effect_intensity(self)
	local result_0 = getPointer(self).Intensity;
	return result_0;
end
function abi.ffi.property_setter_sun_rays_effect_intensity_set_intensity(self, value)
	getPointer(self).Intensity = value;
end
function abi.ffi.property_getter_sun_rays_effect_spread(self)
	local result_0 = getPointer(self).Spread;
	return result_0;
end
function abi.ffi.property_setter_sun_rays_effect_spread_set_spread(self, value)
	getPointer(self).Spread = value;
end
function abi.ffi.property_getter_proximity_prompt_action_text(self)
	local result_0 = getPointer(self).ActionText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_proximity_prompt_action_text_set_action_text(self, value_addr, value_len)
	getPointer(self).ActionText = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_proximity_prompt_auto_localize(self)
	local result_0 = getPointer(self).AutoLocalize;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_proximity_prompt_auto_localize_set_auto_localize(self, value)
	getPointer(self).AutoLocalize = value == 1;
end
function abi.ffi.property_getter_proximity_prompt_clickable_prompt(self)
	local result_0 = getPointer(self).ClickablePrompt;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_proximity_prompt_clickable_prompt_set_clickable_prompt(self, value)
	getPointer(self).ClickablePrompt = value == 1;
end
function abi.ffi.property_getter_proximity_prompt_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_proximity_prompt_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_proximity_prompt_exclusivity(self)
	local result_0 = getPointer(self).Exclusivity;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_exclusivity_set_exclusivity(self, value)
	getPointer(self).Exclusivity = value;
end
function abi.ffi.property_getter_proximity_prompt_gamepad_key_code(self)
	local result_0 = getPointer(self).GamepadKeyCode;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_gamepad_key_code_set_gamepad_key_code(self, value)
	getPointer(self).GamepadKeyCode = value;
end
function abi.ffi.property_getter_proximity_prompt_hold_duration(self)
	local result_0 = getPointer(self).HoldDuration;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_hold_duration_set_hold_duration(self, value)
	getPointer(self).HoldDuration = value;
end
function abi.ffi.property_getter_proximity_prompt_keyboard_key_code(self)
	local result_0 = getPointer(self).KeyboardKeyCode;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_keyboard_key_code_set_keyboard_key_code(self, value)
	getPointer(self).KeyboardKeyCode = value;
end
function abi.ffi.property_getter_proximity_prompt_max_activation_distance(self)
	local result_0 = getPointer(self).MaxActivationDistance;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_max_activation_distance_set_max_activation_distance(self, value)
	getPointer(self).MaxActivationDistance = value;
end
function abi.ffi.property_getter_proximity_prompt_object_text(self)
	local result_0 = getPointer(self).ObjectText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_proximity_prompt_object_text_set_object_text(self, value_addr, value_len)
	getPointer(self).ObjectText = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_proximity_prompt_requires_line_of_sight(self)
	local result_0 = getPointer(self).RequiresLineOfSight;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_proximity_prompt_requires_line_of_sight_set_requires_line_of_sight(self, value)
	getPointer(self).RequiresLineOfSight = value == 1;
end
function abi.ffi.property_getter_proximity_prompt_root_localization_table(self)
	local result_0 = getPointer(self).RootLocalizationTable;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_proximity_prompt_root_localization_table_set_root_localization_table(self, value)
	getPointer(self).RootLocalizationTable = getPointer(value);
end
function abi.ffi.property_getter_proximity_prompt_style(self)
	local result_0 = getPointer(self).Style;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_style_set_style(self, value)
	getPointer(self).Style = value;
end
function abi.ffi.property_getter_proximity_prompt_ui_offset(self)
	local result_0 = getPointer(self).UIOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_proximity_prompt_ui_offset_set_ui_offset(self, value)
	getPointer(self).UIOffset = getPointer(value);
end
function abi.ffi.method_proximity_prompt_input_hold_begin(self)
	getPointer(self):InputHoldBegin()
end
function abi.ffi.method_proximity_prompt_input_hold_end(self)
	getPointer(self):InputHoldEnd()
end
function abi.ffi.event_proximity_prompt_prompt_button_hold_began_on_prompt_button_hold_began(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptButtonHoldBegan:Connect(function(player_who_triggered)
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_prompt_button_hold_ended_on_prompt_button_hold_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptButtonHoldEnded:Connect(function(player_who_triggered)
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_prompt_hidden_on_prompt_hidden(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptHidden:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_prompt_shown_on_prompt_shown(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptShown:Connect(function(input_type)
		invokeFunction(callback_data, callback_vtable, input_type)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_trigger_ended_on_trigger_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TriggerEnded:Connect(function(player_who_triggered)
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_triggered_on_triggered(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Triggered:Connect(function(player_who_triggered)
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_proximity_prompt_service_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_proximity_prompt_service_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_proximity_prompt_service_max_prompts_visible(self)
	local result_0 = getPointer(self).MaxPromptsVisible;
	return result_0;
end
function abi.ffi.property_setter_proximity_prompt_service_max_prompts_visible_set_max_prompts_visible(self, value)
	getPointer(self).MaxPromptsVisible = value;
end
function abi.ffi.event_proximity_prompt_service_prompt_button_hold_began_on_prompt_button_hold_began(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptButtonHoldBegan:Connect(function(prompt, player_who_triggered)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_service_prompt_button_hold_ended_on_prompt_button_hold_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptButtonHoldEnded:Connect(function(prompt, player_who_triggered)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_service_prompt_hidden_on_prompt_hidden(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptHidden:Connect(function(prompt)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_service_prompt_shown_on_prompt_shown(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptShown:Connect(function(prompt, input_type)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0, input_type)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_service_prompt_trigger_ended_on_prompt_trigger_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptTriggerEnded:Connect(function(prompt, player_who_triggered)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_proximity_prompt_service_prompt_triggered_on_prompt_triggered(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PromptTriggered:Connect(function(prompt, player_who_triggered)
		local prompt_optional, prompt_optional_0 = 0, 0;
		if (prompt ~= nil) then
			prompt_optional, prompt_optional_0 = 1, createPointer(prompt);
		end
		local player_who_triggered_optional, player_who_triggered_optional_0 = 0, 0;
		if (player_who_triggered ~= nil) then
			player_who_triggered_optional, player_who_triggered_optional_0 = 1, createPointer(player_who_triggered);
		end
		invokeFunction(callback_data, callback_vtable, prompt_optional, prompt_optional_0, player_who_triggered_optional, player_who_triggered_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_remote_event_on_server_event(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).OnServerEvent:Connect(function(player, ...)
		local values_tuple = { ... };
		local values_len = select("#", ...);
		local values_tuple_vec = allocVec(values_len * 4)
		for i = 1, values_len do
			local values_tuple_vec_value = values_tuple[i];
			storeU32(memory, values_tuple_vec + (i - 1) * 4 + 0, createPointer(values_tuple_vec_value));
		end
		invokeFunction(callback_data, callback_vtable, createPointer(player), values_tuple_vec, values_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_remote_event_on_client_event(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).OnClientEvent:Connect(function(...)
		local values_tuple = { ... };
		local values_len = select("#", ...);
		local values_tuple_vec = allocVec(values_len * 4)
		for i = 1, values_len do
			local values_tuple_vec_value = values_tuple[i];
			storeU32(memory, values_tuple_vec + (i - 1) * 4 + 0, createPointer(values_tuple_vec_value));
		end
		invokeFunction(callback_data, callback_vtable, values_tuple_vec, values_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_remote_event_fire_all_clients(self, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	getPointer(self):FireAllClients(unpack(values_vec, 1, values_len))
end
function abi.ffi.method_remote_event_fire_client(self, player, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	getPointer(self):FireClient(getPointer(player), unpack(values_vec, 1, values_len))
end
function abi.ffi.method_remote_event_fire_server(self, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	getPointer(self):FireServer(unpack(values_vec, 1, values_len))
end
function abi.ffi.callback_remote_function_on_server_invoke(self, callback_data, callback_vtable)
	getPointer(self).OnServerInvoke = function(player, ...)
		local values_tuple = { ... };
		local values_len = select("#", ...);
		local values_tuple_vec = allocVec(values_len * 4)
		for i = 1, values_len do
			local values_tuple_vec_value = values_tuple[i];
			storeU32(memory, values_tuple_vec + (i - 1) * 4 + 0, createPointer(values_tuple_vec_value));
		end
		local result_0, result_1 = invokeFunction(callback_data, callback_vtable, createPointer(player), values_tuple_vec, values_len);
		local callback_vec = table.create(result_1);
		for i = 1, result_1 do
			local vecElement_0 = loadU32(memory, result_0 + (i - 1) * 4 + 0)
			callback_vec[i] = getPointer(vecElement_0);
		end
		return unpack(callback_vec, 1, result_1);
	end;
end
function abi.ffi.callback_remote_function_on_client_invoke(self, callback_data, callback_vtable)
	getPointer(self).OnClientInvoke = function(...)
		local values_tuple = { ... };
		local values_len = select("#", ...);
		local values_tuple_vec = allocVec(values_len * 4)
		for i = 1, values_len do
			local values_tuple_vec_value = values_tuple[i];
			storeU32(memory, values_tuple_vec + (i - 1) * 4 + 0, createPointer(values_tuple_vec_value));
		end
		local result_0, result_1 = invokeFunction(callback_data, callback_vtable, values_tuple_vec, values_len);
		local callback_vec = table.create(result_1);
		for i = 1, result_1 do
			local vecElement_0 = loadU32(memory, result_0 + (i - 1) * 4 + 0)
			callback_vec[i] = getPointer(vecElement_0);
		end
		return unpack(callback_vec, 1, result_1);
	end;
end
function abi.ffi.method_remote_function_invoke_server(self, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	local result_0 = { getPointer(self):InvokeServer(unpack(values_vec, 1, values_len)) }
	local result_0_len = #result_0;
	local result_0_vec = allocVec(result_0_len * 4)
	for i = 1, result_0_len do
		local result_0_vec_value = result_0[i];
		storeU32(memory, result_0_vec + (i - 1) * 4 + 0, createPointer(result_0_vec_value));
	end
	return result_0_vec, result_0_len;
end
function abi.ffi.method_remote_function_invoke_client(self, player, values_addr, values_len)
	local values_vec = table.create(values_len);
	for i = 1, values_len do
		local vecElement_0 = loadU32(memory, values_addr + (i - 1) * 4 + 0)
		values_vec[i] = getPointer(vecElement_0);
	end
	local result_0 = { getPointer(self):InvokeClient(getPointer(player), unpack(values_vec, 1, values_len)) }
	local result_0_len = #result_0;
	local result_0_vec = allocVec(result_0_len * 4)
	for i = 1, result_0_len do
		local result_0_vec_value = result_0[i];
		storeU32(memory, result_0_vec + (i - 1) * 4 + 0, createPointer(result_0_vec_value));
	end
	return result_0_vec, result_0_len;
end
function abi.ffi.method_replicated_first_remove_default_loading_screen(self)
	getPointer(self):RemoveDefaultLoadingScreen()
end
function abi.ffi.property_getter_rotation_curve_length(self)
	local result_0 = getPointer(self).Length;
	return result_0;
end
function abi.ffi.method_rotation_curve_get_key_at_index(self, index)
	local result_0 = getPointer(self):GetKeyAtIndex(index);
	return createPointer(result_0);
end
function abi.ffi.method_rotation_curve_get_value_at_time(self, time)
	local result_0 = getPointer(self):GetValueAtTime(time);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_rotation_curve_remove_key_at_index(self, starting_index, count)
	local result_0 = getPointer(self):RemoveKeyAtIndex(starting_index, count);
	return result_0;
end
function abi.ffi.method_run_service_is_client(self)
	local result_0 = getPointer(self):IsClient();
	return result_0 and 1 or 0;
end
function abi.ffi.method_run_service_is_run_mode(self)
	local result_0 = getPointer(self):IsRunMode();
	return result_0 and 1 or 0;
end
function abi.ffi.method_run_service_is_running(self)
	local result_0 = getPointer(self):IsRunning();
	return result_0 and 1 or 0;
end
function abi.ffi.method_run_service_is_server(self)
	local result_0 = getPointer(self):IsServer();
	return result_0 and 1 or 0;
end
function abi.ffi.method_run_service_is_studio(self)
	local result_0 = getPointer(self):IsStudio();
	return result_0 and 1 or 0;
end
function abi.ffi.method_run_service_unbind_from_render_step(self, name_addr, name_len)
	getPointer(self):UnbindFromRenderStep(loadString(memory, name_addr, name_len))
end
function abi.ffi.event_run_service_heartbeat_on_heartbeat(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Heartbeat:Connect(function(delta_time)
		invokeFunction(callback_data, callback_vtable, delta_time)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_post_simulation_on_post_simulation(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PostSimulation:Connect(function(delta_time_sim)
		invokeFunction(callback_data, callback_vtable, delta_time_sim)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_pre_animation_on_pre_animation(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PreAnimation:Connect(function(delta_time_sim)
		invokeFunction(callback_data, callback_vtable, delta_time_sim)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_pre_render_on_pre_render(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PreRender:Connect(function(delta_time_render)
		invokeFunction(callback_data, callback_vtable, delta_time_render)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_pre_simulation_on_pre_simulation(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PreSimulation:Connect(function(delta_time_sim)
		invokeFunction(callback_data, callback_vtable, delta_time_sim)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_render_stepped_on_render_stepped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).RenderStepped:Connect(function(delta_time)
		invokeFunction(callback_data, callback_vtable, delta_time)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_run_service_stepped_on_stepped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Stepped:Connect(function(time, delta_time)
		invokeFunction(callback_data, callback_vtable, time, delta_time)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_screenshot_hud_camera_button_icon(self)
	local result_0 = getPointer(self).CameraButtonIcon;
	return createPointer(result_0);
end
function abi.ffi.property_setter_screenshot_hud_camera_button_icon_set_camera_button_icon(self, value)
	getPointer(self).CameraButtonIcon = getPointer(value);
end
function abi.ffi.property_getter_screenshot_hud_camera_button_position(self)
	local result_0 = getPointer(self).CameraButtonPosition;
	return createPointer(result_0);
end
function abi.ffi.property_setter_screenshot_hud_camera_button_position_set_camera_button_position(self, value)
	getPointer(self).CameraButtonPosition = getPointer(value);
end
function abi.ffi.property_getter_screenshot_hud_close_button_position(self)
	local result_0 = getPointer(self).CloseButtonPosition;
	return createPointer(result_0);
end
function abi.ffi.property_setter_screenshot_hud_close_button_position_set_close_button_position(self, value)
	getPointer(self).CloseButtonPosition = getPointer(value);
end
function abi.ffi.property_getter_screenshot_hud_close_when_screenshot_taken(self)
	local result_0 = getPointer(self).CloseWhenScreenshotTaken;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screenshot_hud_close_when_screenshot_taken_set_close_when_screenshot_taken(self, value)
	getPointer(self).CloseWhenScreenshotTaken = value == 1;
end
function abi.ffi.property_getter_screenshot_hud_experience_name_overlay_enabled(self)
	local result_0 = getPointer(self).ExperienceNameOverlayEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screenshot_hud_experience_name_overlay_enabled_set_experience_name_overlay_enabled(self, value)
	getPointer(self).ExperienceNameOverlayEnabled = value == 1;
end
function abi.ffi.property_getter_screenshot_hud_overlay_font(self)
	local result_0 = getPointer(self).OverlayFont;
	return result_0;
end
function abi.ffi.property_setter_screenshot_hud_overlay_font_set_overlay_font(self, value)
	getPointer(self).OverlayFont = value;
end
function abi.ffi.property_getter_screenshot_hud_username_overlay_enabled(self)
	local result_0 = getPointer(self).UsernameOverlayEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screenshot_hud_username_overlay_enabled_set_username_overlay_enabled(self, value)
	getPointer(self).UsernameOverlayEnabled = value == 1;
end
function abi.ffi.property_getter_screenshot_hud_visible(self)
	local result_0 = getPointer(self).Visible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_screenshot_hud_visible_set_visible(self, value)
	getPointer(self).Visible = value == 1;
end
function abi.ffi.event_script_context_error_on_error(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Error:Connect(function(message, stack_trace, script)
		local message_len = #message;
		local message_content = allocString(message_len);
		for i = 1, message_len do
			storeU8(memory, message_content + (i - 1), string.byte(message:sub(i, i)));
		end
		local stack_trace_len = #stack_trace;
		local stack_trace_content = allocString(stack_trace_len);
		for i = 1, stack_trace_len do
			storeU8(memory, stack_trace_content + (i - 1), string.byte(stack_trace:sub(i, i)));
		end
		local script_optional, script_optional_0 = 0, 0;
		if (script ~= nil) then
			script_optional, script_optional_0 = 1, createPointer(script);
		end
		invokeFunction(callback_data, callback_vtable, message_content, message_len, stack_trace_content, stack_trace_len, script_optional, script_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_service_provider_find_service(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):FindService(loadString(memory, class_name_addr, class_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_service_provider_get_service(self, class_name_addr, class_name_len)
	local result_0 = getPointer(self):GetService(loadString(memory, class_name_addr, class_name_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_service_provider_close_on_close(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Close:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_service_provider_service_added_on_service_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ServiceAdded:Connect(function(service)
		local service_optional, service_optional_0 = 0, 0;
		if (service ~= nil) then
			service_optional, service_optional_0 = 1, createPointer(service);
		end
		invokeFunction(callback_data, callback_vtable, service_optional, service_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_service_provider_service_removing_on_service_removing(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).ServiceRemoving:Connect(function(service)
		local service_optional, service_optional_0 = 0, 0;
		if (service ~= nil) then
			service_optional, service_optional_0 = 1, createPointer(service);
		end
		invokeFunction(callback_data, callback_vtable, service_optional, service_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_data_model_creator_id(self)
	local result_0 = getPointer(self).CreatorId;
	return result_0;
end
function abi.ffi.property_getter_data_model_creator_type(self)
	local result_0 = getPointer(self).CreatorType;
	return result_0;
end
function abi.ffi.property_getter_data_model_game_id(self)
	local result_0 = getPointer(self).GameId;
	return result_0;
end
function abi.ffi.property_getter_data_model_genre(self)
	local result_0 = getPointer(self).Genre;
	return result_0;
end
function abi.ffi.property_getter_data_model_job_id(self)
	local result_0 = getPointer(self).JobId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_model_place_id(self)
	local result_0 = getPointer(self).PlaceId;
	return result_0;
end
function abi.ffi.property_getter_data_model_place_version(self)
	local result_0 = getPointer(self).PlaceVersion;
	return result_0;
end
function abi.ffi.property_getter_data_model_private_server_id(self)
	local result_0 = getPointer(self).PrivateServerId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_data_model_private_server_owner_id(self)
	local result_0 = getPointer(self).PrivateServerOwnerId;
	return result_0;
end
function abi.ffi.property_getter_data_model_workspace(self)
	local result_0 = getPointer(self).Workspace;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_data_model_is_loaded(self)
	local result_0 = getPointer(self):IsLoaded();
	return result_0 and 1 or 0;
end
function abi.ffi.event_data_model_graphics_quality_change_request_on_graphics_quality_change_request(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).GraphicsQualityChangeRequest:Connect(function(better_quality)
		invokeFunction(callback_data, callback_vtable, better_quality and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_data_model_loaded_on_loaded(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Loaded:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_user_settings_is_user_feature_enabled(self, name_addr, name_len)
	local result_0 = getPointer(self):IsUserFeatureEnabled(loadString(memory, name_addr, name_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_settings_reset(self)
	getPointer(self):Reset()
end
function abi.ffi.property_getter_sky_celestial_bodies_shown(self)
	local result_0 = getPointer(self).CelestialBodiesShown;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sky_celestial_bodies_shown_set_celestial_bodies_shown(self, value)
	getPointer(self).CelestialBodiesShown = value == 1;
end
function abi.ffi.property_getter_sky_moon_angular_size(self)
	local result_0 = getPointer(self).MoonAngularSize;
	return result_0;
end
function abi.ffi.property_setter_sky_moon_angular_size_set_moon_angular_size(self, value)
	getPointer(self).MoonAngularSize = value;
end
function abi.ffi.property_getter_sky_moon_texture_id(self)
	local result_0 = getPointer(self).MoonTextureId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_moon_texture_id_set_moon_texture_id(self, value)
	getPointer(self).MoonTextureId = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_bk(self)
	local result_0 = getPointer(self).SkyboxBk;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_bk_set_skybox_bk(self, value)
	getPointer(self).SkyboxBk = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_dn(self)
	local result_0 = getPointer(self).SkyboxDn;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_dn_set_skybox_dn(self, value)
	getPointer(self).SkyboxDn = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_ft(self)
	local result_0 = getPointer(self).SkyboxFt;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_ft_set_skybox_ft(self, value)
	getPointer(self).SkyboxFt = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_lf(self)
	local result_0 = getPointer(self).SkyboxLf;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_lf_set_skybox_lf(self, value)
	getPointer(self).SkyboxLf = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_rt(self)
	local result_0 = getPointer(self).SkyboxRt;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_rt_set_skybox_rt(self, value)
	getPointer(self).SkyboxRt = getPointer(value);
end
function abi.ffi.property_getter_sky_skybox_up(self)
	local result_0 = getPointer(self).SkyboxUp;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_skybox_up_set_skybox_up(self, value)
	getPointer(self).SkyboxUp = getPointer(value);
end
function abi.ffi.property_getter_sky_star_count(self)
	local result_0 = getPointer(self).StarCount;
	return result_0;
end
function abi.ffi.property_setter_sky_star_count_set_star_count(self, value)
	getPointer(self).StarCount = value;
end
function abi.ffi.property_getter_sky_sun_angular_size(self)
	local result_0 = getPointer(self).SunAngularSize;
	return result_0;
end
function abi.ffi.property_setter_sky_sun_angular_size_set_sun_angular_size(self, value)
	getPointer(self).SunAngularSize = value;
end
function abi.ffi.property_getter_sky_sun_texture_id(self)
	local result_0 = getPointer(self).SunTextureId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sky_sun_texture_id_set_sun_texture_id(self, value)
	getPointer(self).SunTextureId = getPointer(value);
end
function abi.ffi.property_getter_smoke_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_smoke_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_smoke_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_smoke_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_smoke_opacity(self)
	local result_0 = getPointer(self).Opacity;
	return result_0;
end
function abi.ffi.property_setter_smoke_opacity_set_opacity(self, value)
	getPointer(self).Opacity = value;
end
function abi.ffi.property_getter_smoke_rise_velocity(self)
	local result_0 = getPointer(self).RiseVelocity;
	return result_0;
end
function abi.ffi.property_setter_smoke_rise_velocity_set_rise_velocity(self, value)
	getPointer(self).RiseVelocity = value;
end
function abi.ffi.property_getter_smoke_size(self)
	local result_0 = getPointer(self).Size;
	return result_0;
end
function abi.ffi.property_setter_smoke_size_set_size(self, value)
	getPointer(self).Size = value;
end
function abi.ffi.property_getter_smoke_time_scale(self)
	local result_0 = getPointer(self).TimeScale;
	return result_0;
end
function abi.ffi.property_setter_smoke_time_scale_set_time_scale(self, value)
	getPointer(self).TimeScale = value;
end
function abi.ffi.method_social_service_prompt_game_invite(self, player)
	getPointer(self):PromptGameInvite(getPointer(player))
end
function abi.ffi.method_social_service_can_send_game_invite_async(self, player, recipient_id)
	local result_0 = getPointer(self):CanSendGameInviteAsync(getPointer(player), recipient_id);
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_sound_is_loaded(self)
	local result_0 = getPointer(self).IsLoaded;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_sound_is_paused(self)
	local result_0 = getPointer(self).IsPaused;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_sound_is_playing(self)
	local result_0 = getPointer(self).IsPlaying;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_sound_loop_region(self)
	local result_0 = getPointer(self).LoopRegion;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sound_loop_region_set_loop_region(self, value)
	getPointer(self).LoopRegion = getPointer(value);
end
function abi.ffi.property_getter_sound_looped(self)
	local result_0 = getPointer(self).Looped;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_looped_set_looped(self, value)
	getPointer(self).Looped = value == 1;
end
function abi.ffi.property_getter_sound_play_on_remove(self)
	local result_0 = getPointer(self).PlayOnRemove;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_play_on_remove_set_play_on_remove(self, value)
	getPointer(self).PlayOnRemove = value == 1;
end
function abi.ffi.property_getter_sound_playback_loudness(self)
	local result_0 = getPointer(self).PlaybackLoudness;
	return result_0;
end
function abi.ffi.property_getter_sound_playback_region(self)
	local result_0 = getPointer(self).PlaybackRegion;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sound_playback_region_set_playback_region(self, value)
	getPointer(self).PlaybackRegion = getPointer(value);
end
function abi.ffi.property_getter_sound_playback_regions_enabled(self)
	local result_0 = getPointer(self).PlaybackRegionsEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_playback_regions_enabled_set_playback_regions_enabled(self, value)
	getPointer(self).PlaybackRegionsEnabled = value == 1;
end
function abi.ffi.property_getter_sound_playback_speed(self)
	local result_0 = getPointer(self).PlaybackSpeed;
	return result_0;
end
function abi.ffi.property_setter_sound_playback_speed_set_playback_speed(self, value)
	getPointer(self).PlaybackSpeed = value;
end
function abi.ffi.property_getter_sound_playing(self)
	local result_0 = getPointer(self).Playing;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_playing_set_playing(self, value)
	getPointer(self).Playing = value == 1;
end
function abi.ffi.property_getter_sound_roll_off_max_distance(self)
	local result_0 = getPointer(self).RollOffMaxDistance;
	return result_0;
end
function abi.ffi.property_setter_sound_roll_off_max_distance_set_roll_off_max_distance(self, value)
	getPointer(self).RollOffMaxDistance = value;
end
function abi.ffi.property_getter_sound_roll_off_min_distance(self)
	local result_0 = getPointer(self).RollOffMinDistance;
	return result_0;
end
function abi.ffi.property_setter_sound_roll_off_min_distance_set_roll_off_min_distance(self, value)
	getPointer(self).RollOffMinDistance = value;
end
function abi.ffi.property_getter_sound_roll_off_mode(self)
	local result_0 = getPointer(self).RollOffMode;
	return result_0;
end
function abi.ffi.property_setter_sound_roll_off_mode_set_roll_off_mode(self, value)
	getPointer(self).RollOffMode = value;
end
function abi.ffi.property_getter_sound_sound_group(self)
	local result_0 = getPointer(self).SoundGroup;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_sound_sound_group_set_sound_group(self, value)
	getPointer(self).SoundGroup = getPointer(value);
end
function abi.ffi.property_getter_sound_sound_id(self)
	local result_0 = getPointer(self).SoundId;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sound_sound_id_set_sound_id(self, value)
	getPointer(self).SoundId = getPointer(value);
end
function abi.ffi.property_getter_sound_time_length(self)
	local result_0 = getPointer(self).TimeLength;
	return result_0;
end
function abi.ffi.property_getter_sound_time_position(self)
	local result_0 = getPointer(self).TimePosition;
	return result_0;
end
function abi.ffi.property_setter_sound_time_position_set_time_position(self, value)
	getPointer(self).TimePosition = value;
end
function abi.ffi.property_getter_sound_volume(self)
	local result_0 = getPointer(self).Volume;
	return result_0;
end
function abi.ffi.property_setter_sound_volume_set_volume(self, value)
	getPointer(self).Volume = value;
end
function abi.ffi.method_sound_pause(self)
	getPointer(self):Pause()
end
function abi.ffi.method_sound_play(self)
	getPointer(self):Play()
end
function abi.ffi.method_sound_resume(self)
	getPointer(self):Resume()
end
function abi.ffi.method_sound_stop(self)
	getPointer(self):Stop()
end
function abi.ffi.event_sound_did_loop_on_did_loop(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DidLoop:Connect(function(sound_id, num_of_times_looped)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len, num_of_times_looped)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_ended_on_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Ended:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_loaded_on_loaded(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Loaded:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_paused_on_paused(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Paused:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_played_on_played(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Played:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_resumed_on_resumed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Resumed:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_sound_stopped_on_stopped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Stopped:Connect(function(sound_id)
		local sound_id_len = #sound_id;
		local sound_id_content = allocString(sound_id_len);
		for i = 1, sound_id_len do
			storeU8(memory, sound_id_content + (i - 1), string.byte(sound_id:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, sound_id_content, sound_id_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_sound_effect_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_effect_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_sound_effect_priority(self)
	local result_0 = getPointer(self).Priority;
	return result_0;
end
function abi.ffi.property_setter_sound_effect_priority_set_priority(self, value)
	getPointer(self).Priority = value;
end
function abi.ffi.property_getter_chorus_sound_effect_depth(self)
	local result_0 = getPointer(self).Depth;
	return result_0;
end
function abi.ffi.property_setter_chorus_sound_effect_depth_set_depth(self, value)
	getPointer(self).Depth = value;
end
function abi.ffi.property_getter_chorus_sound_effect_mix(self)
	local result_0 = getPointer(self).Mix;
	return result_0;
end
function abi.ffi.property_setter_chorus_sound_effect_mix_set_mix(self, value)
	getPointer(self).Mix = value;
end
function abi.ffi.property_getter_chorus_sound_effect_rate(self)
	local result_0 = getPointer(self).Rate;
	return result_0;
end
function abi.ffi.property_setter_chorus_sound_effect_rate_set_rate(self, value)
	getPointer(self).Rate = value;
end
function abi.ffi.property_getter_compressor_sound_effect_attack(self)
	local result_0 = getPointer(self).Attack;
	return result_0;
end
function abi.ffi.property_setter_compressor_sound_effect_attack_set_attack(self, value)
	getPointer(self).Attack = value;
end
function abi.ffi.property_getter_compressor_sound_effect_gain_makeup(self)
	local result_0 = getPointer(self).GainMakeup;
	return result_0;
end
function abi.ffi.property_setter_compressor_sound_effect_gain_makeup_set_gain_makeup(self, value)
	getPointer(self).GainMakeup = value;
end
function abi.ffi.property_getter_compressor_sound_effect_ratio(self)
	local result_0 = getPointer(self).Ratio;
	return result_0;
end
function abi.ffi.property_setter_compressor_sound_effect_ratio_set_ratio(self, value)
	getPointer(self).Ratio = value;
end
function abi.ffi.property_getter_compressor_sound_effect_release(self)
	local result_0 = getPointer(self).Release;
	return result_0;
end
function abi.ffi.property_setter_compressor_sound_effect_release_set_release(self, value)
	getPointer(self).Release = value;
end
function abi.ffi.property_getter_compressor_sound_effect_side_chain(self)
	local result_0 = getPointer(self).SideChain;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_compressor_sound_effect_side_chain_set_side_chain(self, value)
	getPointer(self).SideChain = getPointer(value);
end
function abi.ffi.property_getter_compressor_sound_effect_threshold(self)
	local result_0 = getPointer(self).Threshold;
	return result_0;
end
function abi.ffi.property_setter_compressor_sound_effect_threshold_set_threshold(self, value)
	getPointer(self).Threshold = value;
end
function abi.ffi.property_getter_channel_selector_sound_effect_channel(self)
	local result_0 = getPointer(self).Channel;
	return result_0;
end
function abi.ffi.property_setter_channel_selector_sound_effect_channel_set_channel(self, value)
	getPointer(self).Channel = value;
end
function abi.ffi.property_getter_distortion_sound_effect_level(self)
	local result_0 = getPointer(self).Level;
	return result_0;
end
function abi.ffi.property_setter_distortion_sound_effect_level_set_level(self, value)
	getPointer(self).Level = value;
end
function abi.ffi.property_getter_echo_sound_effect_delay(self)
	local result_0 = getPointer(self).Delay;
	return result_0;
end
function abi.ffi.property_setter_echo_sound_effect_delay_set_delay(self, value)
	getPointer(self).Delay = value;
end
function abi.ffi.property_getter_echo_sound_effect_dry_level(self)
	local result_0 = getPointer(self).DryLevel;
	return result_0;
end
function abi.ffi.property_setter_echo_sound_effect_dry_level_set_dry_level(self, value)
	getPointer(self).DryLevel = value;
end
function abi.ffi.property_getter_echo_sound_effect_feedback(self)
	local result_0 = getPointer(self).Feedback;
	return result_0;
end
function abi.ffi.property_setter_echo_sound_effect_feedback_set_feedback(self, value)
	getPointer(self).Feedback = value;
end
function abi.ffi.property_getter_echo_sound_effect_wet_level(self)
	local result_0 = getPointer(self).WetLevel;
	return result_0;
end
function abi.ffi.property_setter_echo_sound_effect_wet_level_set_wet_level(self, value)
	getPointer(self).WetLevel = value;
end
function abi.ffi.property_getter_equalizer_sound_effect_high_gain(self)
	local result_0 = getPointer(self).HighGain;
	return result_0;
end
function abi.ffi.property_setter_equalizer_sound_effect_high_gain_set_high_gain(self, value)
	getPointer(self).HighGain = value;
end
function abi.ffi.property_getter_equalizer_sound_effect_low_gain(self)
	local result_0 = getPointer(self).LowGain;
	return result_0;
end
function abi.ffi.property_setter_equalizer_sound_effect_low_gain_set_low_gain(self, value)
	getPointer(self).LowGain = value;
end
function abi.ffi.property_getter_equalizer_sound_effect_mid_gain(self)
	local result_0 = getPointer(self).MidGain;
	return result_0;
end
function abi.ffi.property_setter_equalizer_sound_effect_mid_gain_set_mid_gain(self, value)
	getPointer(self).MidGain = value;
end
function abi.ffi.property_getter_flange_sound_effect_depth(self)
	local result_0 = getPointer(self).Depth;
	return result_0;
end
function abi.ffi.property_setter_flange_sound_effect_depth_set_depth(self, value)
	getPointer(self).Depth = value;
end
function abi.ffi.property_getter_flange_sound_effect_mix(self)
	local result_0 = getPointer(self).Mix;
	return result_0;
end
function abi.ffi.property_setter_flange_sound_effect_mix_set_mix(self, value)
	getPointer(self).Mix = value;
end
function abi.ffi.property_getter_flange_sound_effect_rate(self)
	local result_0 = getPointer(self).Rate;
	return result_0;
end
function abi.ffi.property_setter_flange_sound_effect_rate_set_rate(self, value)
	getPointer(self).Rate = value;
end
function abi.ffi.property_getter_pitch_shift_sound_effect_octave(self)
	local result_0 = getPointer(self).Octave;
	return result_0;
end
function abi.ffi.property_setter_pitch_shift_sound_effect_octave_set_octave(self, value)
	getPointer(self).Octave = value;
end
function abi.ffi.property_getter_reverb_sound_effect_decay_time(self)
	local result_0 = getPointer(self).DecayTime;
	return result_0;
end
function abi.ffi.property_setter_reverb_sound_effect_decay_time_set_decay_time(self, value)
	getPointer(self).DecayTime = value;
end
function abi.ffi.property_getter_reverb_sound_effect_density(self)
	local result_0 = getPointer(self).Density;
	return result_0;
end
function abi.ffi.property_setter_reverb_sound_effect_density_set_density(self, value)
	getPointer(self).Density = value;
end
function abi.ffi.property_getter_reverb_sound_effect_diffusion(self)
	local result_0 = getPointer(self).Diffusion;
	return result_0;
end
function abi.ffi.property_setter_reverb_sound_effect_diffusion_set_diffusion(self, value)
	getPointer(self).Diffusion = value;
end
function abi.ffi.property_getter_reverb_sound_effect_dry_level(self)
	local result_0 = getPointer(self).DryLevel;
	return result_0;
end
function abi.ffi.property_setter_reverb_sound_effect_dry_level_set_dry_level(self, value)
	getPointer(self).DryLevel = value;
end
function abi.ffi.property_getter_reverb_sound_effect_wet_level(self)
	local result_0 = getPointer(self).WetLevel;
	return result_0;
end
function abi.ffi.property_setter_reverb_sound_effect_wet_level_set_wet_level(self, value)
	getPointer(self).WetLevel = value;
end
function abi.ffi.property_getter_tremolo_sound_effect_depth(self)
	local result_0 = getPointer(self).Depth;
	return result_0;
end
function abi.ffi.property_setter_tremolo_sound_effect_depth_set_depth(self, value)
	getPointer(self).Depth = value;
end
function abi.ffi.property_getter_tremolo_sound_effect_duty(self)
	local result_0 = getPointer(self).Duty;
	return result_0;
end
function abi.ffi.property_setter_tremolo_sound_effect_duty_set_duty(self, value)
	getPointer(self).Duty = value;
end
function abi.ffi.property_getter_tremolo_sound_effect_frequency(self)
	local result_0 = getPointer(self).Frequency;
	return result_0;
end
function abi.ffi.property_setter_tremolo_sound_effect_frequency_set_frequency(self, value)
	getPointer(self).Frequency = value;
end
function abi.ffi.property_getter_sound_group_volume(self)
	local result_0 = getPointer(self).Volume;
	return result_0;
end
function abi.ffi.property_setter_sound_group_volume_set_volume(self, value)
	getPointer(self).Volume = value;
end
function abi.ffi.property_getter_sound_service_ambient_reverb(self)
	local result_0 = getPointer(self).AmbientReverb;
	return result_0;
end
function abi.ffi.property_setter_sound_service_ambient_reverb_set_ambient_reverb(self, value)
	getPointer(self).AmbientReverb = value;
end
function abi.ffi.property_getter_sound_service_distance_factor(self)
	local result_0 = getPointer(self).DistanceFactor;
	return result_0;
end
function abi.ffi.property_setter_sound_service_distance_factor_set_distance_factor(self, value)
	getPointer(self).DistanceFactor = value;
end
function abi.ffi.property_getter_sound_service_doppler_scale(self)
	local result_0 = getPointer(self).DopplerScale;
	return result_0;
end
function abi.ffi.property_setter_sound_service_doppler_scale_set_doppler_scale(self, value)
	getPointer(self).DopplerScale = value;
end
function abi.ffi.property_getter_sound_service_respect_filtering_enabled(self)
	local result_0 = getPointer(self).RespectFilteringEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sound_service_respect_filtering_enabled_set_respect_filtering_enabled(self, value)
	getPointer(self).RespectFilteringEnabled = value == 1;
end
function abi.ffi.property_getter_sound_service_rolloff_scale(self)
	local result_0 = getPointer(self).RolloffScale;
	return result_0;
end
function abi.ffi.property_setter_sound_service_rolloff_scale_set_rolloff_scale(self, value)
	getPointer(self).RolloffScale = value;
end
function abi.ffi.method_sound_service_play_local_sound(self, sound)
	getPointer(self):PlayLocalSound(getPointer(sound))
end
function abi.ffi.property_getter_sparkles_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sparkles_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_sparkles_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_sparkles_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_sparkles_sparkle_color(self)
	local result_0 = getPointer(self).SparkleColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_sparkles_sparkle_color_set_sparkle_color(self, value)
	getPointer(self).SparkleColor = getPointer(value);
end
function abi.ffi.property_getter_sparkles_time_scale(self)
	local result_0 = getPointer(self).TimeScale;
	return result_0;
end
function abi.ffi.property_setter_sparkles_time_scale_set_time_scale(self, value)
	getPointer(self).TimeScale = value;
end
function abi.ffi.property_getter_speaker_channel_count(self)
	local result_0 = getPointer(self).ChannelCount;
	return result_0;
end
function abi.ffi.property_getter_speaker_playback_loudness(self)
	local result_0 = getPointer(self).PlaybackLoudness;
	return result_0;
end
function abi.ffi.property_getter_speaker_roll_off_max_distance(self)
	local result_0 = getPointer(self).RollOffMaxDistance;
	return result_0;
end
function abi.ffi.property_setter_speaker_roll_off_max_distance_set_roll_off_max_distance(self, value)
	getPointer(self).RollOffMaxDistance = value;
end
function abi.ffi.property_getter_speaker_roll_off_min_distance(self)
	local result_0 = getPointer(self).RollOffMinDistance;
	return result_0;
end
function abi.ffi.property_setter_speaker_roll_off_min_distance_set_roll_off_min_distance(self, value)
	getPointer(self).RollOffMinDistance = value;
end
function abi.ffi.property_getter_speaker_roll_off_mode(self)
	local result_0 = getPointer(self).RollOffMode;
	return result_0;
end
function abi.ffi.property_setter_speaker_roll_off_mode_set_roll_off_mode(self, value)
	getPointer(self).RollOffMode = value;
end
function abi.ffi.property_getter_speaker_sound_group(self)
	local result_0 = getPointer(self).SoundGroup;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_speaker_sound_group_set_sound_group(self, value)
	getPointer(self).SoundGroup = getPointer(value);
end
function abi.ffi.property_getter_speaker_source(self)
	local result_0 = getPointer(self).Source;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_speaker_source_set_source(self, value)
	getPointer(self).Source = getPointer(value);
end
function abi.ffi.property_getter_speaker_volume(self)
	local result_0 = getPointer(self).Volume;
	return result_0;
end
function abi.ffi.property_setter_speaker_volume_set_volume(self, value)
	getPointer(self).Volume = value;
end
function abi.ffi.property_getter_starter_player_allow_custom_animations(self)
	local result_0 = getPointer(self).AllowCustomAnimations;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_allow_custom_animations_set_allow_custom_animations(self, value)
	getPointer(self).AllowCustomAnimations = value == 1;
end
function abi.ffi.property_getter_starter_player_auto_jump_enabled(self)
	local result_0 = getPointer(self).AutoJumpEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_auto_jump_enabled_set_auto_jump_enabled(self, value)
	getPointer(self).AutoJumpEnabled = value == 1;
end
function abi.ffi.property_getter_starter_player_camera_max_zoom_distance(self)
	local result_0 = getPointer(self).CameraMaxZoomDistance;
	return result_0;
end
function abi.ffi.property_setter_starter_player_camera_max_zoom_distance_set_camera_max_zoom_distance(self, value)
	getPointer(self).CameraMaxZoomDistance = value;
end
function abi.ffi.property_getter_starter_player_camera_min_zoom_distance(self)
	local result_0 = getPointer(self).CameraMinZoomDistance;
	return result_0;
end
function abi.ffi.property_setter_starter_player_camera_min_zoom_distance_set_camera_min_zoom_distance(self, value)
	getPointer(self).CameraMinZoomDistance = value;
end
function abi.ffi.property_getter_starter_player_camera_mode(self)
	local result_0 = getPointer(self).CameraMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_camera_mode_set_camera_mode(self, value)
	getPointer(self).CameraMode = value;
end
function abi.ffi.property_getter_starter_player_character_jump_height(self)
	local result_0 = getPointer(self).CharacterJumpHeight;
	return result_0;
end
function abi.ffi.property_setter_starter_player_character_jump_height_set_character_jump_height(self, value)
	getPointer(self).CharacterJumpHeight = value;
end
function abi.ffi.property_getter_starter_player_character_jump_power(self)
	local result_0 = getPointer(self).CharacterJumpPower;
	return result_0;
end
function abi.ffi.property_setter_starter_player_character_jump_power_set_character_jump_power(self, value)
	getPointer(self).CharacterJumpPower = value;
end
function abi.ffi.property_getter_starter_player_character_max_slope_angle(self)
	local result_0 = getPointer(self).CharacterMaxSlopeAngle;
	return result_0;
end
function abi.ffi.property_setter_starter_player_character_max_slope_angle_set_character_max_slope_angle(self, value)
	getPointer(self).CharacterMaxSlopeAngle = value;
end
function abi.ffi.property_getter_starter_player_character_use_jump_power(self)
	local result_0 = getPointer(self).CharacterUseJumpPower;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_character_use_jump_power_set_character_use_jump_power(self, value)
	getPointer(self).CharacterUseJumpPower = value == 1;
end
function abi.ffi.property_getter_starter_player_character_walk_speed(self)
	local result_0 = getPointer(self).CharacterWalkSpeed;
	return result_0;
end
function abi.ffi.property_setter_starter_player_character_walk_speed_set_character_walk_speed(self, value)
	getPointer(self).CharacterWalkSpeed = value;
end
function abi.ffi.property_getter_starter_player_dev_camera_occlusion_mode(self)
	local result_0 = getPointer(self).DevCameraOcclusionMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_dev_camera_occlusion_mode_set_dev_camera_occlusion_mode(self, value)
	getPointer(self).DevCameraOcclusionMode = value;
end
function abi.ffi.property_getter_starter_player_dev_computer_camera_movement_mode(self)
	local result_0 = getPointer(self).DevComputerCameraMovementMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_dev_computer_camera_movement_mode_set_dev_computer_camera_movement_mode(self, value)
	getPointer(self).DevComputerCameraMovementMode = value;
end
function abi.ffi.property_getter_starter_player_dev_computer_movement_mode(self)
	local result_0 = getPointer(self).DevComputerMovementMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_dev_computer_movement_mode_set_dev_computer_movement_mode(self, value)
	getPointer(self).DevComputerMovementMode = value;
end
function abi.ffi.property_getter_starter_player_dev_touch_camera_movement_mode(self)
	local result_0 = getPointer(self).DevTouchCameraMovementMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_dev_touch_camera_movement_mode_set_dev_touch_camera_movement_mode(self, value)
	getPointer(self).DevTouchCameraMovementMode = value;
end
function abi.ffi.property_getter_starter_player_dev_touch_movement_mode(self)
	local result_0 = getPointer(self).DevTouchMovementMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_dev_touch_movement_mode_set_dev_touch_movement_mode(self, value)
	getPointer(self).DevTouchMovementMode = value;
end
function abi.ffi.property_getter_starter_player_enable_mouse_lock_option(self)
	local result_0 = getPointer(self).EnableMouseLockOption;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_enable_mouse_lock_option_set_enable_mouse_lock_option(self, value)
	getPointer(self).EnableMouseLockOption = value == 1;
end
function abi.ffi.property_getter_starter_player_health_display_distance(self)
	local result_0 = getPointer(self).HealthDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_starter_player_health_display_distance_set_health_display_distance(self, value)
	getPointer(self).HealthDisplayDistance = value;
end
function abi.ffi.property_getter_starter_player_humanoid_state_machine_mode(self)
	local result_0 = getPointer(self).HumanoidStateMachineMode;
	return result_0;
end
function abi.ffi.property_setter_starter_player_humanoid_state_machine_mode_set_humanoid_state_machine_mode(self, value)
	getPointer(self).HumanoidStateMachineMode = value;
end
function abi.ffi.property_getter_starter_player_load_character_appearance(self)
	local result_0 = getPointer(self).LoadCharacterAppearance;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_load_character_appearance_set_load_character_appearance(self, value)
	getPointer(self).LoadCharacterAppearance = value == 1;
end
function abi.ffi.property_getter_starter_player_name_display_distance(self)
	local result_0 = getPointer(self).NameDisplayDistance;
	return result_0;
end
function abi.ffi.property_setter_starter_player_name_display_distance_set_name_display_distance(self, value)
	getPointer(self).NameDisplayDistance = value;
end
function abi.ffi.property_getter_starter_player_user_emotes_enabled(self)
	local result_0 = getPointer(self).UserEmotesEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_starter_player_user_emotes_enabled_set_user_emotes_enabled(self, value)
	getPointer(self).UserEmotesEnabled = value == 1;
end
function abi.ffi.property_getter_stats_contacts_count(self)
	local result_0 = getPointer(self).ContactsCount;
	return result_0;
end
function abi.ffi.property_getter_stats_data_receive_kbps(self)
	local result_0 = getPointer(self).DataReceiveKbps;
	return result_0;
end
function abi.ffi.property_getter_stats_data_send_kbps(self)
	local result_0 = getPointer(self).DataSendKbps;
	return result_0;
end
function abi.ffi.property_getter_stats_heartbeat_time_ms(self)
	local result_0 = getPointer(self).HeartbeatTimeMs;
	return result_0;
end
function abi.ffi.property_getter_stats_instance_count(self)
	local result_0 = getPointer(self).InstanceCount;
	return result_0;
end
function abi.ffi.property_getter_stats_moving_primitives_count(self)
	local result_0 = getPointer(self).MovingPrimitivesCount;
	return result_0;
end
function abi.ffi.property_getter_stats_physics_receive_kbps(self)
	local result_0 = getPointer(self).PhysicsReceiveKbps;
	return result_0;
end
function abi.ffi.property_getter_stats_physics_send_kbps(self)
	local result_0 = getPointer(self).PhysicsSendKbps;
	return result_0;
end
function abi.ffi.property_getter_stats_physics_step_time_ms(self)
	local result_0 = getPointer(self).PhysicsStepTimeMs;
	return result_0;
end
function abi.ffi.property_getter_stats_primitives_count(self)
	local result_0 = getPointer(self).PrimitivesCount;
	return result_0;
end
function abi.ffi.method_stats_get_memory_usage_mb_for_tag(self, tag)
	local result_0 = getPointer(self):GetMemoryUsageMbForTag(tag);
	return result_0;
end
function abi.ffi.method_stats_get_total_memory_usage_mb(self)
	local result_0 = getPointer(self):GetTotalMemoryUsageMb();
	return result_0;
end
function abi.ffi.property_getter_team_auto_assignable(self)
	local result_0 = getPointer(self).AutoAssignable;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_team_auto_assignable_set_auto_assignable(self, value)
	getPointer(self).AutoAssignable = value == 1;
end
function abi.ffi.property_getter_team_team_color(self)
	local result_0 = getPointer(self).TeamColor;
	return createPointer(result_0);
end
function abi.ffi.property_setter_team_team_color_set_team_color(self, value)
	getPointer(self).TeamColor = getPointer(value);
end
function abi.ffi.event_team_player_added_on_player_added(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlayerAdded:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_team_player_removed_on_player_removed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PlayerRemoved:Connect(function(player)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_teleport_async_result_private_server_id(self)
	local result_0 = getPointer(self).PrivateServerId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_teleport_async_result_reserved_server_access_code(self)
	local result_0 = getPointer(self).ReservedServerAccessCode;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_teleport_options_reserved_server_access_code(self)
	local result_0 = getPointer(self).ReservedServerAccessCode;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_teleport_options_reserved_server_access_code_set_reserved_server_access_code(self, value_addr, value_len)
	getPointer(self).ReservedServerAccessCode = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_teleport_options_server_instance_id(self)
	local result_0 = getPointer(self).ServerInstanceId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_teleport_options_server_instance_id_set_server_instance_id(self, value_addr, value_len)
	getPointer(self).ServerInstanceId = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_teleport_options_should_reserve_server(self)
	local result_0 = getPointer(self).ShouldReserveServer;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_teleport_options_should_reserve_server_set_should_reserve_server(self, value)
	getPointer(self).ShouldReserveServer = value == 1;
end
function abi.ffi.method_teleport_service_get_arriving_teleport_gui(self)
	local result_0 = getPointer(self):GetArrivingTeleportGui();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_teleport_service_set_teleport_gui(self, gui)
	getPointer(self):SetTeleportGui(getPointer(gui))
end
function abi.ffi.event_teleport_service_teleport_init_failed_on_teleport_init_failed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TeleportInitFailed:Connect(function(player, teleport_result, error_message, place_id, teleport_options)
		local player_optional, player_optional_0 = 0, 0;
		if (player ~= nil) then
			player_optional, player_optional_0 = 1, createPointer(player);
		end
		local error_message_len = #error_message;
		local error_message_content = allocString(error_message_len);
		for i = 1, error_message_len do
			storeU8(memory, error_message_content + (i - 1), string.byte(error_message:sub(i, i)));
		end
		local teleport_options_optional, teleport_options_optional_0 = 0, 0;
		if (teleport_options ~= nil) then
			teleport_options_optional, teleport_options_optional_0 = 1, createPointer(teleport_options);
		end
		invokeFunction(callback_data, callback_vtable, player_optional, player_optional_0, teleport_result, error_message_content, error_message_len, place_id, teleport_options_optional, teleport_options_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_terrain_detail_face(self)
	local result_0 = getPointer(self).Face;
	return result_0;
end
function abi.ffi.property_setter_terrain_detail_face_set_face(self, value)
	getPointer(self).Face = value;
end
function abi.ffi.property_getter_terrain_detail_material_pattern(self)
	local result_0 = getPointer(self).MaterialPattern;
	return result_0;
end
function abi.ffi.property_setter_terrain_detail_material_pattern_set_material_pattern(self, value)
	getPointer(self).MaterialPattern = value;
end
function abi.ffi.property_getter_terrain_detail_studs_per_tile(self)
	local result_0 = getPointer(self).StudsPerTile;
	return result_0;
end
function abi.ffi.property_setter_terrain_detail_studs_per_tile_set_studs_per_tile(self, value)
	getPointer(self).StudsPerTile = value;
end
function abi.ffi.property_getter_terrain_region_size_in_cells(self)
	local result_0 = getPointer(self).SizeInCells;
	return createPointer(result_0);
end
function abi.ffi.method_text_channel_display_system_message(self, system_message_addr, system_message_len, metadata_addr, metadata_len)
	local result_0 = getPointer(self):DisplaySystemMessage(loadString(memory, system_message_addr, system_message_len), loadString(memory, metadata_addr, metadata_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_text_channel_send_async(self, message_addr, message_len, metadata_addr, metadata_len)
	local result_0 = getPointer(self):SendAsync(loadString(memory, message_addr, message_len), loadString(memory, metadata_addr, metadata_len));
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.event_text_channel_message_received_on_message_received(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MessageReceived:Connect(function(incoming_message)
		local incoming_message_optional, incoming_message_optional_0 = 0, 0;
		if (incoming_message ~= nil) then
			incoming_message_optional, incoming_message_optional_0 = 1, createPointer(incoming_message);
		end
		invokeFunction(callback_data, callback_vtable, incoming_message_optional, incoming_message_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_text_chat_command_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_chat_command_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_text_chat_command_primary_alias(self)
	local result_0 = getPointer(self).PrimaryAlias;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_command_primary_alias_set_primary_alias(self, value_addr, value_len)
	getPointer(self).PrimaryAlias = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_command_secondary_alias(self)
	local result_0 = getPointer(self).SecondaryAlias;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_command_secondary_alias_set_secondary_alias(self, value_addr, value_len)
	getPointer(self).SecondaryAlias = loadString(memory, value_addr, value_len);
end
function abi.ffi.event_text_chat_command_triggered_on_triggered(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Triggered:Connect(function(origin_text_source, unfiltered_text)
		local origin_text_source_optional, origin_text_source_optional_0 = 0, 0;
		if (origin_text_source ~= nil) then
			origin_text_source_optional, origin_text_source_optional_0 = 1, createPointer(origin_text_source);
		end
		local unfiltered_text_len = #unfiltered_text;
		local unfiltered_text_content = allocString(unfiltered_text_len);
		for i = 1, unfiltered_text_len do
			storeU8(memory, unfiltered_text_content + (i - 1), string.byte(unfiltered_text:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, origin_text_source_optional, origin_text_source_optional_0, unfiltered_text_content, unfiltered_text_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_bubble_chat_configuration_adornee_name(self)
	local result_0 = getPointer(self).AdorneeName;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_bubble_chat_configuration_adornee_name_set_adornee_name(self, value_addr, value_len)
	getPointer(self).AdorneeName = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_bubble_chat_configuration_background_color_3(self)
	local result_0 = getPointer(self).BackgroundColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_bubble_chat_configuration_background_color_3_set_background_color_3(self, value)
	getPointer(self).BackgroundColor3 = getPointer(value);
end
function abi.ffi.property_getter_bubble_chat_configuration_bubble_duration(self)
	local result_0 = getPointer(self).BubbleDuration;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_bubble_duration_set_bubble_duration(self, value)
	getPointer(self).BubbleDuration = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_bubbles_spacing(self)
	local result_0 = getPointer(self).BubblesSpacing;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_bubbles_spacing_set_bubbles_spacing(self, value)
	getPointer(self).BubblesSpacing = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_bubble_chat_configuration_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_bubble_chat_configuration_font(self)
	local result_0 = getPointer(self).Font;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_font_set_font(self, value)
	getPointer(self).Font = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_local_player_studs_offset(self)
	local result_0 = getPointer(self).LocalPlayerStudsOffset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_bubble_chat_configuration_local_player_studs_offset_set_local_player_studs_offset(self, value)
	getPointer(self).LocalPlayerStudsOffset = getPointer(value);
end
function abi.ffi.property_getter_bubble_chat_configuration_max_distance(self)
	local result_0 = getPointer(self).MaxDistance;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_max_distance_set_max_distance(self, value)
	getPointer(self).MaxDistance = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_minimize_distance(self)
	local result_0 = getPointer(self).MinimizeDistance;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_minimize_distance_set_minimize_distance(self, value)
	getPointer(self).MinimizeDistance = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_text_color_3(self)
	local result_0 = getPointer(self).TextColor3;
	return createPointer(result_0);
end
function abi.ffi.property_setter_bubble_chat_configuration_text_color_3_set_text_color_3(self, value)
	getPointer(self).TextColor3 = getPointer(value);
end
function abi.ffi.property_getter_bubble_chat_configuration_text_size(self)
	local result_0 = getPointer(self).TextSize;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_text_size_set_text_size(self, value)
	getPointer(self).TextSize = value;
end
function abi.ffi.property_getter_bubble_chat_configuration_vertical_studs_offset(self)
	local result_0 = getPointer(self).VerticalStudsOffset;
	return result_0;
end
function abi.ffi.property_setter_bubble_chat_configuration_vertical_studs_offset_set_vertical_studs_offset(self, value)
	getPointer(self).VerticalStudsOffset = value;
end
function abi.ffi.property_getter_chat_input_bar_configuration_absolute_position(self)
	local result_0 = getPointer(self).AbsolutePosition;
	return createPointer(result_0);
end
function abi.ffi.property_getter_chat_input_bar_configuration_absolute_size(self)
	local result_0 = getPointer(self).AbsoluteSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_chat_input_bar_configuration_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_chat_input_bar_configuration_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_chat_input_bar_configuration_target_text_channel(self)
	local result_0 = getPointer(self).TargetTextChannel;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_chat_input_bar_configuration_target_text_channel_set_target_text_channel(self, value)
	getPointer(self).TargetTextChannel = getPointer(value);
end
function abi.ffi.property_getter_chat_window_configuration_absolute_position(self)
	local result_0 = getPointer(self).AbsolutePosition;
	return createPointer(result_0);
end
function abi.ffi.property_getter_chat_window_configuration_absolute_size(self)
	local result_0 = getPointer(self).AbsoluteSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_chat_window_configuration_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_chat_window_configuration_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_chat_window_configuration_horizontal_alignment(self)
	local result_0 = getPointer(self).HorizontalAlignment;
	return result_0;
end
function abi.ffi.property_setter_chat_window_configuration_horizontal_alignment_set_horizontal_alignment(self, value)
	getPointer(self).HorizontalAlignment = value;
end
function abi.ffi.property_getter_chat_window_configuration_vertical_alignment(self)
	local result_0 = getPointer(self).VerticalAlignment;
	return result_0;
end
function abi.ffi.property_setter_chat_window_configuration_vertical_alignment_set_vertical_alignment(self, value)
	getPointer(self).VerticalAlignment = value;
end
function abi.ffi.property_getter_text_chat_message_message_id(self)
	local result_0 = getPointer(self).MessageId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_message_id_set_message_id(self, value_addr, value_len)
	getPointer(self).MessageId = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_message_metadata(self)
	local result_0 = getPointer(self).Metadata;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_metadata_set_metadata(self, value_addr, value_len)
	getPointer(self).Metadata = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_message_prefix_text(self)
	local result_0 = getPointer(self).PrefixText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_prefix_text_set_prefix_text(self, value_addr, value_len)
	getPointer(self).PrefixText = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_message_status(self)
	local result_0 = getPointer(self).Status;
	return result_0;
end
function abi.ffi.property_setter_text_chat_message_status_set_status(self, value)
	getPointer(self).Status = value;
end
function abi.ffi.property_getter_text_chat_message_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_message_text_channel(self)
	local result_0 = getPointer(self).TextChannel;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_text_chat_message_text_channel_set_text_channel(self, value)
	getPointer(self).TextChannel = getPointer(value);
end
function abi.ffi.property_getter_text_chat_message_text_source(self)
	local result_0 = getPointer(self).TextSource;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_text_chat_message_text_source_set_text_source(self, value)
	getPointer(self).TextSource = getPointer(value);
end
function abi.ffi.property_getter_text_chat_message_timestamp(self)
	local result_0 = getPointer(self).Timestamp;
	return createPointer(result_0);
end
function abi.ffi.property_setter_text_chat_message_timestamp_set_timestamp(self, value)
	getPointer(self).Timestamp = getPointer(value);
end
function abi.ffi.property_getter_text_chat_message_properties_prefix_text(self)
	local result_0 = getPointer(self).PrefixText;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_properties_prefix_text_set_prefix_text(self, value_addr, value_len)
	getPointer(self).PrefixText = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_message_properties_text(self)
	local result_0 = getPointer(self).Text;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_text_chat_message_properties_text_set_text(self, value_addr, value_len)
	getPointer(self).Text = loadString(memory, value_addr, value_len);
end
function abi.ffi.property_getter_text_chat_service_chat_version(self)
	local result_0 = getPointer(self).ChatVersion;
	return result_0;
end
function abi.ffi.property_setter_text_chat_service_chat_version_set_chat_version(self, value)
	getPointer(self).ChatVersion = value;
end
function abi.ffi.property_getter_text_chat_service_create_default_commands(self)
	local result_0 = getPointer(self).CreateDefaultCommands;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_chat_service_create_default_commands_set_create_default_commands(self, value)
	getPointer(self).CreateDefaultCommands = value == 1;
end
function abi.ffi.property_getter_text_chat_service_create_default_text_channels(self)
	local result_0 = getPointer(self).CreateDefaultTextChannels;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_chat_service_create_default_text_channels_set_create_default_text_channels(self, value)
	getPointer(self).CreateDefaultTextChannels = value == 1;
end
function abi.ffi.event_text_chat_service_message_received_on_message_received(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).MessageReceived:Connect(function(text_chat_message)
		local text_chat_message_optional, text_chat_message_optional_0 = 0, 0;
		if (text_chat_message ~= nil) then
			text_chat_message_optional, text_chat_message_optional_0 = 1, createPointer(text_chat_message);
		end
		invokeFunction(callback_data, callback_vtable, text_chat_message_optional, text_chat_message_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_text_chat_service_sending_message_on_sending_message(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).SendingMessage:Connect(function(text_chat_message)
		local text_chat_message_optional, text_chat_message_optional_0 = 0, 0;
		if (text_chat_message ~= nil) then
			text_chat_message_optional, text_chat_message_optional_0 = 1, createPointer(text_chat_message);
		end
		invokeFunction(callback_data, callback_vtable, text_chat_message_optional, text_chat_message_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_text_filter_result_get_chat_for_user_async(self, to_user_id)
	local result_0 = getPointer(self):GetChatForUserAsync(to_user_id);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_text_filter_result_get_non_chat_string_for_broadcast_async(self)
	local result_0 = getPointer(self):GetNonChatStringForBroadcastAsync();
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_text_filter_result_get_non_chat_string_for_user_async(self, to_user_id)
	local result_0 = getPointer(self):GetNonChatStringForUserAsync(to_user_id);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_text_service_get_text_size(self, string_addr, string_len, font_size, font, frame_size)
	local result_0 = getPointer(self):GetTextSize(loadString(memory, string_addr, string_len), font_size, font, getPointer(frame_size));
	return createPointer(result_0);
end
function abi.ffi.method_text_service_filter_string_async(self, string_to_filter_addr, string_to_filter_len, from_user_id, text_context)
	local result_0 = getPointer(self):FilterStringAsync(loadString(memory, string_to_filter_addr, string_to_filter_len), from_user_id, text_context);
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_text_service_get_text_bounds_async(self, params)
	local result_0 = getPointer(self):GetTextBoundsAsync(getPointer(params));
	return createPointer(result_0);
end
function abi.ffi.property_getter_text_source_can_send(self)
	local result_0 = getPointer(self).CanSend;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_text_source_can_send_set_can_send(self, value)
	getPointer(self).CanSend = value == 1;
end
function abi.ffi.property_getter_text_source_user_id(self)
	local result_0 = getPointer(self).UserId;
	return result_0;
end
function abi.ffi.property_getter_tracker_lod_controller_audio_mode(self)
	local result_0 = getPointer(self).AudioMode;
	return result_0;
end
function abi.ffi.property_setter_tracker_lod_controller_audio_mode_set_audio_mode(self, value)
	getPointer(self).AudioMode = value;
end
function abi.ffi.property_getter_tracker_lod_controller_video_extrapolation_mode(self)
	local result_0 = getPointer(self).VideoExtrapolationMode;
	return result_0;
end
function abi.ffi.property_setter_tracker_lod_controller_video_extrapolation_mode_set_video_extrapolation_mode(self, value)
	getPointer(self).VideoExtrapolationMode = value;
end
function abi.ffi.property_getter_tracker_lod_controller_video_lod_mode(self)
	local result_0 = getPointer(self).VideoLodMode;
	return result_0;
end
function abi.ffi.property_setter_tracker_lod_controller_video_lod_mode_set_video_lod_mode(self, value)
	getPointer(self).VideoLodMode = value;
end
function abi.ffi.property_getter_tracker_lod_controller_video_mode(self)
	local result_0 = getPointer(self).VideoMode;
	return result_0;
end
function abi.ffi.property_setter_tracker_lod_controller_video_mode_set_video_mode(self, value)
	getPointer(self).VideoMode = value;
end
function abi.ffi.property_getter_trail_attachment_0(self)
	local result_0 = getPointer(self).Attachment0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_trail_attachment_0_set_attachment_0(self, value)
	getPointer(self).Attachment0 = getPointer(value);
end
function abi.ffi.property_getter_trail_attachment_1(self)
	local result_0 = getPointer(self).Attachment1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_trail_attachment_1_set_attachment_1(self, value)
	getPointer(self).Attachment1 = getPointer(value);
end
function abi.ffi.property_getter_trail_brightness(self)
	local result_0 = getPointer(self).Brightness;
	return result_0;
end
function abi.ffi.property_setter_trail_brightness_set_brightness(self, value)
	getPointer(self).Brightness = value;
end
function abi.ffi.property_getter_trail_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_trail_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_trail_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_trail_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_trail_face_camera(self)
	local result_0 = getPointer(self).FaceCamera;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_trail_face_camera_set_face_camera(self, value)
	getPointer(self).FaceCamera = value == 1;
end
function abi.ffi.property_getter_trail_lifetime(self)
	local result_0 = getPointer(self).Lifetime;
	return result_0;
end
function abi.ffi.property_setter_trail_lifetime_set_lifetime(self, value)
	getPointer(self).Lifetime = value;
end
function abi.ffi.property_getter_trail_light_emission(self)
	local result_0 = getPointer(self).LightEmission;
	return result_0;
end
function abi.ffi.property_setter_trail_light_emission_set_light_emission(self, value)
	getPointer(self).LightEmission = value;
end
function abi.ffi.property_getter_trail_light_influence(self)
	local result_0 = getPointer(self).LightInfluence;
	return result_0;
end
function abi.ffi.property_setter_trail_light_influence_set_light_influence(self, value)
	getPointer(self).LightInfluence = value;
end
function abi.ffi.property_getter_trail_max_length(self)
	local result_0 = getPointer(self).MaxLength;
	return result_0;
end
function abi.ffi.property_setter_trail_max_length_set_max_length(self, value)
	getPointer(self).MaxLength = value;
end
function abi.ffi.property_getter_trail_min_length(self)
	local result_0 = getPointer(self).MinLength;
	return result_0;
end
function abi.ffi.property_setter_trail_min_length_set_min_length(self, value)
	getPointer(self).MinLength = value;
end
function abi.ffi.property_getter_trail_texture(self)
	local result_0 = getPointer(self).Texture;
	return createPointer(result_0);
end
function abi.ffi.property_setter_trail_texture_set_texture(self, value)
	getPointer(self).Texture = getPointer(value);
end
function abi.ffi.property_getter_trail_texture_length(self)
	local result_0 = getPointer(self).TextureLength;
	return result_0;
end
function abi.ffi.property_setter_trail_texture_length_set_texture_length(self, value)
	getPointer(self).TextureLength = value;
end
function abi.ffi.property_getter_trail_texture_mode(self)
	local result_0 = getPointer(self).TextureMode;
	return result_0;
end
function abi.ffi.property_setter_trail_texture_mode_set_texture_mode(self, value)
	getPointer(self).TextureMode = value;
end
function abi.ffi.property_getter_trail_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return createPointer(result_0);
end
function abi.ffi.property_setter_trail_transparency_set_transparency(self, value)
	getPointer(self).Transparency = getPointer(value);
end
function abi.ffi.property_getter_trail_width_scale(self)
	local result_0 = getPointer(self).WidthScale;
	return createPointer(result_0);
end
function abi.ffi.property_setter_trail_width_scale_set_width_scale(self, value)
	getPointer(self).WidthScale = getPointer(value);
end
function abi.ffi.method_trail_clear(self)
	getPointer(self):Clear()
end
function abi.ffi.property_getter_translator_locale_id(self)
	local result_0 = getPointer(self).LocaleId;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_translator_translate(self, context, text_addr, text_len)
	local result_0 = getPointer(self):Translate(getPointer(context), loadString(memory, text_addr, text_len));
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_getter_tween_base_playback_state(self)
	local result_0 = getPointer(self).PlaybackState;
	return result_0;
end
function abi.ffi.method_tween_base_cancel(self)
	getPointer(self):Cancel()
end
function abi.ffi.method_tween_base_pause(self)
	getPointer(self):Pause()
end
function abi.ffi.method_tween_base_play(self)
	getPointer(self):Play()
end
function abi.ffi.event_tween_base_completed_on_completed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Completed:Connect(function(playback_state)
		invokeFunction(callback_data, callback_vtable, playback_state)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_tween_instance(self)
	local result_0 = getPointer(self).Instance;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_tween_tween_info(self)
	local result_0 = getPointer(self).TweenInfo;
	return createPointer(result_0);
end
function abi.ffi.method_tween_service_get_value(self, alpha, easing_style, easing_direction)
	local result_0 = getPointer(self):GetValue(alpha, easing_style, easing_direction);
	return result_0;
end
function abi.ffi.property_getter_ui_aspect_ratio_constraint_aspect_ratio(self)
	local result_0 = getPointer(self).AspectRatio;
	return result_0;
end
function abi.ffi.property_setter_ui_aspect_ratio_constraint_aspect_ratio_set_aspect_ratio(self, value)
	getPointer(self).AspectRatio = value;
end
function abi.ffi.property_getter_ui_aspect_ratio_constraint_aspect_type(self)
	local result_0 = getPointer(self).AspectType;
	return result_0;
end
function abi.ffi.property_setter_ui_aspect_ratio_constraint_aspect_type_set_aspect_type(self, value)
	getPointer(self).AspectType = value;
end
function abi.ffi.property_getter_ui_aspect_ratio_constraint_dominant_axis(self)
	local result_0 = getPointer(self).DominantAxis;
	return result_0;
end
function abi.ffi.property_setter_ui_aspect_ratio_constraint_dominant_axis_set_dominant_axis(self, value)
	getPointer(self).DominantAxis = value;
end
function abi.ffi.property_getter_ui_size_constraint_max_size(self)
	local result_0 = getPointer(self).MaxSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_size_constraint_max_size_set_max_size(self, value)
	getPointer(self).MaxSize = getPointer(value);
end
function abi.ffi.property_getter_ui_size_constraint_min_size(self)
	local result_0 = getPointer(self).MinSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_size_constraint_min_size_set_min_size(self, value)
	getPointer(self).MinSize = getPointer(value);
end
function abi.ffi.property_getter_ui_text_size_constraint_max_text_size(self)
	local result_0 = getPointer(self).MaxTextSize;
	return result_0;
end
function abi.ffi.property_setter_ui_text_size_constraint_max_text_size_set_max_text_size(self, value)
	getPointer(self).MaxTextSize = value;
end
function abi.ffi.property_getter_ui_text_size_constraint_min_text_size(self)
	local result_0 = getPointer(self).MinTextSize;
	return result_0;
end
function abi.ffi.property_setter_ui_text_size_constraint_min_text_size_set_min_text_size(self, value)
	getPointer(self).MinTextSize = value;
end
function abi.ffi.property_getter_ui_corner_corner_radius(self)
	local result_0 = getPointer(self).CornerRadius;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_corner_corner_radius_set_corner_radius(self, value)
	getPointer(self).CornerRadius = getPointer(value);
end
function abi.ffi.property_getter_ui_gradient_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_gradient_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_ui_gradient_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_gradient_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_ui_gradient_offset(self)
	local result_0 = getPointer(self).Offset;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_gradient_offset_set_offset(self, value)
	getPointer(self).Offset = getPointer(value);
end
function abi.ffi.property_getter_ui_gradient_rotation(self)
	local result_0 = getPointer(self).Rotation;
	return result_0;
end
function abi.ffi.property_setter_ui_gradient_rotation_set_rotation(self, value)
	getPointer(self).Rotation = value;
end
function abi.ffi.property_getter_ui_gradient_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_gradient_transparency_set_transparency(self, value)
	getPointer(self).Transparency = getPointer(value);
end
function abi.ffi.property_getter_ui_grid_style_layout_absolute_content_size(self)
	local result_0 = getPointer(self).AbsoluteContentSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_ui_grid_style_layout_fill_direction(self)
	local result_0 = getPointer(self).FillDirection;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_style_layout_fill_direction_set_fill_direction(self, value)
	getPointer(self).FillDirection = value;
end
function abi.ffi.property_getter_ui_grid_style_layout_horizontal_alignment(self)
	local result_0 = getPointer(self).HorizontalAlignment;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_style_layout_horizontal_alignment_set_horizontal_alignment(self, value)
	getPointer(self).HorizontalAlignment = value;
end
function abi.ffi.property_getter_ui_grid_style_layout_sort_order(self)
	local result_0 = getPointer(self).SortOrder;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_style_layout_sort_order_set_sort_order(self, value)
	getPointer(self).SortOrder = value;
end
function abi.ffi.property_getter_ui_grid_style_layout_vertical_alignment(self)
	local result_0 = getPointer(self).VerticalAlignment;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_style_layout_vertical_alignment_set_vertical_alignment(self, value)
	getPointer(self).VerticalAlignment = value;
end
function abi.ffi.property_getter_ui_grid_layout_absolute_cell_count(self)
	local result_0 = getPointer(self).AbsoluteCellCount;
	return createPointer(result_0);
end
function abi.ffi.property_getter_ui_grid_layout_absolute_cell_size(self)
	local result_0 = getPointer(self).AbsoluteCellSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_ui_grid_layout_cell_padding(self)
	local result_0 = getPointer(self).CellPadding;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_grid_layout_cell_padding_set_cell_padding(self, value)
	getPointer(self).CellPadding = getPointer(value);
end
function abi.ffi.property_getter_ui_grid_layout_cell_size(self)
	local result_0 = getPointer(self).CellSize;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_grid_layout_cell_size_set_cell_size(self, value)
	getPointer(self).CellSize = getPointer(value);
end
function abi.ffi.property_getter_ui_grid_layout_fill_direction_max_cells(self)
	local result_0 = getPointer(self).FillDirectionMaxCells;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_layout_fill_direction_max_cells_set_fill_direction_max_cells(self, value)
	getPointer(self).FillDirectionMaxCells = value;
end
function abi.ffi.property_getter_ui_grid_layout_start_corner(self)
	local result_0 = getPointer(self).StartCorner;
	return result_0;
end
function abi.ffi.property_setter_ui_grid_layout_start_corner_set_start_corner(self, value)
	getPointer(self).StartCorner = value;
end
function abi.ffi.property_getter_ui_list_layout_padding(self)
	local result_0 = getPointer(self).Padding;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_list_layout_padding_set_padding(self, value)
	getPointer(self).Padding = getPointer(value);
end
function abi.ffi.property_getter_ui_page_layout_animated(self)
	local result_0 = getPointer(self).Animated;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_page_layout_animated_set_animated(self, value)
	getPointer(self).Animated = value == 1;
end
function abi.ffi.property_getter_ui_page_layout_circular(self)
	local result_0 = getPointer(self).Circular;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_page_layout_circular_set_circular(self, value)
	getPointer(self).Circular = value == 1;
end
function abi.ffi.property_getter_ui_page_layout_current_page(self)
	local result_0 = getPointer(self).CurrentPage;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_getter_ui_page_layout_easing_direction(self)
	local result_0 = getPointer(self).EasingDirection;
	return result_0;
end
function abi.ffi.property_setter_ui_page_layout_easing_direction_set_easing_direction(self, value)
	getPointer(self).EasingDirection = value;
end
function abi.ffi.property_getter_ui_page_layout_easing_style(self)
	local result_0 = getPointer(self).EasingStyle;
	return result_0;
end
function abi.ffi.property_setter_ui_page_layout_easing_style_set_easing_style(self, value)
	getPointer(self).EasingStyle = value;
end
function abi.ffi.property_getter_ui_page_layout_gamepad_input_enabled(self)
	local result_0 = getPointer(self).GamepadInputEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_page_layout_gamepad_input_enabled_set_gamepad_input_enabled(self, value)
	getPointer(self).GamepadInputEnabled = value == 1;
end
function abi.ffi.property_getter_ui_page_layout_padding(self)
	local result_0 = getPointer(self).Padding;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_page_layout_padding_set_padding(self, value)
	getPointer(self).Padding = getPointer(value);
end
function abi.ffi.property_getter_ui_page_layout_scroll_wheel_input_enabled(self)
	local result_0 = getPointer(self).ScrollWheelInputEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_page_layout_scroll_wheel_input_enabled_set_scroll_wheel_input_enabled(self, value)
	getPointer(self).ScrollWheelInputEnabled = value == 1;
end
function abi.ffi.property_getter_ui_page_layout_touch_input_enabled(self)
	local result_0 = getPointer(self).TouchInputEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_page_layout_touch_input_enabled_set_touch_input_enabled(self, value)
	getPointer(self).TouchInputEnabled = value == 1;
end
function abi.ffi.property_getter_ui_page_layout_tween_time(self)
	local result_0 = getPointer(self).TweenTime;
	return result_0;
end
function abi.ffi.property_setter_ui_page_layout_tween_time_set_tween_time(self, value)
	getPointer(self).TweenTime = value;
end
function abi.ffi.method_ui_page_layout_jump_to(self, page)
	getPointer(self):JumpTo(getPointer(page))
end
function abi.ffi.method_ui_page_layout_jump_to_index(self, index)
	getPointer(self):JumpToIndex(index)
end
function abi.ffi.method_ui_page_layout_next(self)
	getPointer(self):Next()
end
function abi.ffi.method_ui_page_layout_previous(self)
	getPointer(self):Previous()
end
function abi.ffi.event_ui_page_layout_page_enter_on_page_enter(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PageEnter:Connect(function(page)
		local page_optional, page_optional_0 = 0, 0;
		if (page ~= nil) then
			page_optional, page_optional_0 = 1, createPointer(page);
		end
		invokeFunction(callback_data, callback_vtable, page_optional, page_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_ui_page_layout_page_leave_on_page_leave(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PageLeave:Connect(function(page)
		local page_optional, page_optional_0 = 0, 0;
		if (page ~= nil) then
			page_optional, page_optional_0 = 1, createPointer(page);
		end
		invokeFunction(callback_data, callback_vtable, page_optional, page_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_ui_page_layout_stopped_on_stopped(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Stopped:Connect(function(current_page)
		local current_page_optional, current_page_optional_0 = 0, 0;
		if (current_page ~= nil) then
			current_page_optional, current_page_optional_0 = 1, createPointer(current_page);
		end
		invokeFunction(callback_data, callback_vtable, current_page_optional, current_page_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_ui_table_layout_fill_empty_space_columns(self)
	local result_0 = getPointer(self).FillEmptySpaceColumns;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_table_layout_fill_empty_space_columns_set_fill_empty_space_columns(self, value)
	getPointer(self).FillEmptySpaceColumns = value == 1;
end
function abi.ffi.property_getter_ui_table_layout_fill_empty_space_rows(self)
	local result_0 = getPointer(self).FillEmptySpaceRows;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_table_layout_fill_empty_space_rows_set_fill_empty_space_rows(self, value)
	getPointer(self).FillEmptySpaceRows = value == 1;
end
function abi.ffi.property_getter_ui_table_layout_major_axis(self)
	local result_0 = getPointer(self).MajorAxis;
	return result_0;
end
function abi.ffi.property_setter_ui_table_layout_major_axis_set_major_axis(self, value)
	getPointer(self).MajorAxis = value;
end
function abi.ffi.property_getter_ui_table_layout_padding(self)
	local result_0 = getPointer(self).Padding;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_table_layout_padding_set_padding(self, value)
	getPointer(self).Padding = getPointer(value);
end
function abi.ffi.property_getter_ui_padding_padding_bottom(self)
	local result_0 = getPointer(self).PaddingBottom;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_padding_padding_bottom_set_padding_bottom(self, value)
	getPointer(self).PaddingBottom = getPointer(value);
end
function abi.ffi.property_getter_ui_padding_padding_left(self)
	local result_0 = getPointer(self).PaddingLeft;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_padding_padding_left_set_padding_left(self, value)
	getPointer(self).PaddingLeft = getPointer(value);
end
function abi.ffi.property_getter_ui_padding_padding_right(self)
	local result_0 = getPointer(self).PaddingRight;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_padding_padding_right_set_padding_right(self, value)
	getPointer(self).PaddingRight = getPointer(value);
end
function abi.ffi.property_getter_ui_padding_padding_top(self)
	local result_0 = getPointer(self).PaddingTop;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_padding_padding_top_set_padding_top(self, value)
	getPointer(self).PaddingTop = getPointer(value);
end
function abi.ffi.property_getter_ui_scale_scale(self)
	local result_0 = getPointer(self).Scale;
	return result_0;
end
function abi.ffi.property_setter_ui_scale_scale_set_scale(self, value)
	getPointer(self).Scale = value;
end
function abi.ffi.property_getter_ui_stroke_apply_stroke_mode(self)
	local result_0 = getPointer(self).ApplyStrokeMode;
	return result_0;
end
function abi.ffi.property_setter_ui_stroke_apply_stroke_mode_set_apply_stroke_mode(self, value)
	getPointer(self).ApplyStrokeMode = value;
end
function abi.ffi.property_getter_ui_stroke_color(self)
	local result_0 = getPointer(self).Color;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ui_stroke_color_set_color(self, value)
	getPointer(self).Color = getPointer(value);
end
function abi.ffi.property_getter_ui_stroke_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_ui_stroke_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_ui_stroke_line_join_mode(self)
	local result_0 = getPointer(self).LineJoinMode;
	return result_0;
end
function abi.ffi.property_setter_ui_stroke_line_join_mode_set_line_join_mode(self, value)
	getPointer(self).LineJoinMode = value;
end
function abi.ffi.property_getter_ui_stroke_thickness(self)
	local result_0 = getPointer(self).Thickness;
	return result_0;
end
function abi.ffi.property_setter_ui_stroke_thickness_set_thickness(self, value)
	getPointer(self).Thickness = value;
end
function abi.ffi.property_getter_ui_stroke_transparency(self)
	local result_0 = getPointer(self).Transparency;
	return result_0;
end
function abi.ffi.property_setter_ui_stroke_transparency_set_transparency(self, value)
	getPointer(self).Transparency = value;
end
function abi.ffi.property_getter_user_game_settings_computer_camera_movement_mode(self)
	local result_0 = getPointer(self).ComputerCameraMovementMode;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_computer_camera_movement_mode_set_computer_camera_movement_mode(self, value)
	getPointer(self).ComputerCameraMovementMode = value;
end
function abi.ffi.property_getter_user_game_settings_computer_movement_mode(self)
	local result_0 = getPointer(self).ComputerMovementMode;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_computer_movement_mode_set_computer_movement_mode(self, value)
	getPointer(self).ComputerMovementMode = value;
end
function abi.ffi.property_getter_user_game_settings_control_mode(self)
	local result_0 = getPointer(self).ControlMode;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_control_mode_set_control_mode(self, value)
	getPointer(self).ControlMode = value;
end
function abi.ffi.property_getter_user_game_settings_gamepad_camera_sensitivity(self)
	local result_0 = getPointer(self).GamepadCameraSensitivity;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_gamepad_camera_sensitivity_set_gamepad_camera_sensitivity(self, value)
	getPointer(self).GamepadCameraSensitivity = value;
end
function abi.ffi.property_getter_user_game_settings_mouse_sensitivity(self)
	local result_0 = getPointer(self).MouseSensitivity;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_mouse_sensitivity_set_mouse_sensitivity(self, value)
	getPointer(self).MouseSensitivity = value;
end
function abi.ffi.property_getter_user_game_settings_rcc_profiler_record_frame_rate(self)
	local result_0 = getPointer(self).RCCProfilerRecordFrameRate;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_rcc_profiler_record_frame_rate_set_rcc_profiler_record_frame_rate(self, value)
	getPointer(self).RCCProfilerRecordFrameRate = value;
end
function abi.ffi.property_getter_user_game_settings_rcc_profiler_record_time_frame(self)
	local result_0 = getPointer(self).RCCProfilerRecordTimeFrame;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_rcc_profiler_record_time_frame_set_rcc_profiler_record_time_frame(self, value)
	getPointer(self).RCCProfilerRecordTimeFrame = value;
end
function abi.ffi.property_getter_user_game_settings_rotation_type(self)
	local result_0 = getPointer(self).RotationType;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_rotation_type_set_rotation_type(self, value)
	getPointer(self).RotationType = value;
end
function abi.ffi.property_getter_user_game_settings_saved_quality_level(self)
	local result_0 = getPointer(self).SavedQualityLevel;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_saved_quality_level_set_saved_quality_level(self, value)
	getPointer(self).SavedQualityLevel = value;
end
function abi.ffi.property_getter_user_game_settings_touch_camera_movement_mode(self)
	local result_0 = getPointer(self).TouchCameraMovementMode;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_touch_camera_movement_mode_set_touch_camera_movement_mode(self, value)
	getPointer(self).TouchCameraMovementMode = value;
end
function abi.ffi.property_getter_user_game_settings_touch_movement_mode(self)
	local result_0 = getPointer(self).TouchMovementMode;
	return result_0;
end
function abi.ffi.property_setter_user_game_settings_touch_movement_mode_set_touch_movement_mode(self, value)
	getPointer(self).TouchMovementMode = value;
end
function abi.ffi.property_getter_user_game_settings_vr_smooth_rotation_enabled(self)
	local result_0 = getPointer(self).VRSmoothRotationEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_user_game_settings_vr_smooth_rotation_enabled_set_vr_smooth_rotation_enabled(self, value)
	getPointer(self).VRSmoothRotationEnabled = value == 1;
end
function abi.ffi.property_getter_user_game_settings_vignette_enabled(self)
	local result_0 = getPointer(self).VignetteEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_user_game_settings_vignette_enabled_set_vignette_enabled(self, value)
	getPointer(self).VignetteEnabled = value == 1;
end
function abi.ffi.method_user_game_settings_get_camera_y_invert_value(self)
	local result_0 = getPointer(self):GetCameraYInvertValue();
	return result_0;
end
function abi.ffi.method_user_game_settings_get_onboarding_completed(self, onboarding_id_addr, onboarding_id_len)
	local result_0 = getPointer(self):GetOnboardingCompleted(loadString(memory, onboarding_id_addr, onboarding_id_len));
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_game_settings_in_full_screen(self)
	local result_0 = getPointer(self):InFullScreen();
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_game_settings_in_studio_mode(self)
	local result_0 = getPointer(self):InStudioMode();
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_game_settings_set_camera_y_invert_visible(self)
	getPointer(self):SetCameraYInvertVisible()
end
function abi.ffi.method_user_game_settings_set_gamepad_camera_sensitivity_visible(self)
	getPointer(self):SetGamepadCameraSensitivityVisible()
end
function abi.ffi.method_user_game_settings_set_onboarding_completed(self, onboarding_id_addr, onboarding_id_len)
	getPointer(self):SetOnboardingCompleted(loadString(memory, onboarding_id_addr, onboarding_id_len))
end
function abi.ffi.event_user_game_settings_fullscreen_changed_on_fullscreen_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).FullscreenChanged:Connect(function(is_fullscreen)
		invokeFunction(callback_data, callback_vtable, is_fullscreen and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_game_settings_studio_mode_changed_on_studio_mode_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).StudioModeChanged:Connect(function(is_studio_mode)
		invokeFunction(callback_data, callback_vtable, is_studio_mode and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_user_input_service_accelerometer_enabled(self)
	local result_0 = getPointer(self).AccelerometerEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_gamepad_enabled(self)
	local result_0 = getPointer(self).GamepadEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_gyroscope_enabled(self)
	local result_0 = getPointer(self).GyroscopeEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_keyboard_enabled(self)
	local result_0 = getPointer(self).KeyboardEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_mouse_behavior(self)
	local result_0 = getPointer(self).MouseBehavior;
	return result_0;
end
function abi.ffi.property_setter_user_input_service_mouse_behavior_set_mouse_behavior(self, value)
	getPointer(self).MouseBehavior = value;
end
function abi.ffi.property_getter_user_input_service_mouse_delta_sensitivity(self)
	local result_0 = getPointer(self).MouseDeltaSensitivity;
	return result_0;
end
function abi.ffi.property_setter_user_input_service_mouse_delta_sensitivity_set_mouse_delta_sensitivity(self, value)
	getPointer(self).MouseDeltaSensitivity = value;
end
function abi.ffi.property_getter_user_input_service_mouse_enabled(self)
	local result_0 = getPointer(self).MouseEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_mouse_icon_enabled(self)
	local result_0 = getPointer(self).MouseIconEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_user_input_service_mouse_icon_enabled_set_mouse_icon_enabled(self, value)
	getPointer(self).MouseIconEnabled = value == 1;
end
function abi.ffi.property_getter_user_input_service_on_screen_keyboard_position(self)
	local result_0 = getPointer(self).OnScreenKeyboardPosition;
	return createPointer(result_0);
end
function abi.ffi.property_getter_user_input_service_on_screen_keyboard_size(self)
	local result_0 = getPointer(self).OnScreenKeyboardSize;
	return createPointer(result_0);
end
function abi.ffi.property_getter_user_input_service_on_screen_keyboard_visible(self)
	local result_0 = getPointer(self).OnScreenKeyboardVisible;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_touch_enabled(self)
	local result_0 = getPointer(self).TouchEnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_user_input_service_vr_enabled(self)
	local result_0 = getPointer(self).VREnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_gamepad_supports(self, gamepad_num, gamepad_key_code)
	local result_0 = getPointer(self):GamepadSupports(gamepad_num, gamepad_key_code);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_get_device_acceleration(self)
	local result_0 = getPointer(self):GetDeviceAcceleration();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_user_input_service_get_device_gravity(self)
	local result_0 = getPointer(self):GetDeviceGravity();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_user_input_service_get_focused_text_box(self)
	local result_0 = getPointer(self):GetFocusedTextBox();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_user_input_service_get_gamepad_connected(self, gamepad_num)
	local result_0 = getPointer(self):GetGamepadConnected(gamepad_num);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_get_last_input_type(self)
	local result_0 = getPointer(self):GetLastInputType();
	return result_0;
end
function abi.ffi.method_user_input_service_get_mouse_delta(self)
	local result_0 = getPointer(self):GetMouseDelta();
	return createPointer(result_0);
end
function abi.ffi.method_user_input_service_get_mouse_location(self)
	local result_0 = getPointer(self):GetMouseLocation();
	return createPointer(result_0);
end
function abi.ffi.method_user_input_service_get_string_for_key_code(self, key_code)
	local result_0 = getPointer(self):GetStringForKeyCode(key_code);
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.method_user_input_service_get_user_c_frame(self, type)
	local result_0 = getPointer(self):GetUserCFrame(type);
	return createPointer(result_0);
end
function abi.ffi.method_user_input_service_is_gamepad_button_down(self, gamepad_num, gamepad_key_code)
	local result_0 = getPointer(self):IsGamepadButtonDown(gamepad_num, gamepad_key_code);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_is_key_down(self, key_code)
	local result_0 = getPointer(self):IsKeyDown(key_code);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_is_mouse_button_pressed(self, mouse_button)
	local result_0 = getPointer(self):IsMouseButtonPressed(mouse_button);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_is_navigation_gamepad(self, gamepad_enum)
	local result_0 = getPointer(self):IsNavigationGamepad(gamepad_enum);
	return result_0 and 1 or 0;
end
function abi.ffi.method_user_input_service_recenter_user_head_c_frame(self)
	getPointer(self):RecenterUserHeadCFrame()
end
function abi.ffi.method_user_input_service_set_navigation_gamepad(self, gamepad_enum, enabled)
	getPointer(self):SetNavigationGamepad(gamepad_enum, enabled == 1)
end
function abi.ffi.event_user_input_service_device_acceleration_changed_on_device_acceleration_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DeviceAccelerationChanged:Connect(function(acceleration)
		local acceleration_optional, acceleration_optional_0 = 0, 0;
		if (acceleration ~= nil) then
			acceleration_optional, acceleration_optional_0 = 1, createPointer(acceleration);
		end
		invokeFunction(callback_data, callback_vtable, acceleration_optional, acceleration_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_device_gravity_changed_on_device_gravity_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DeviceGravityChanged:Connect(function(gravity)
		local gravity_optional, gravity_optional_0 = 0, 0;
		if (gravity ~= nil) then
			gravity_optional, gravity_optional_0 = 1, createPointer(gravity);
		end
		invokeFunction(callback_data, callback_vtable, gravity_optional, gravity_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_device_rotation_changed_on_device_rotation_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).DeviceRotationChanged:Connect(function(rotation, cframe)
		local rotation_optional, rotation_optional_0 = 0, 0;
		if (rotation ~= nil) then
			rotation_optional, rotation_optional_0 = 1, createPointer(rotation);
		end
		invokeFunction(callback_data, callback_vtable, rotation_optional, rotation_optional_0, createPointer(cframe))
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_gamepad_connected_on_gamepad_connected(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).GamepadConnected:Connect(function(gamepad_num)
		invokeFunction(callback_data, callback_vtable, gamepad_num)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_gamepad_disconnected_on_gamepad_disconnected(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).GamepadDisconnected:Connect(function(gamepad_num)
		invokeFunction(callback_data, callback_vtable, gamepad_num)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_input_began_on_input_began(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputBegan:Connect(function(input, game_processed_event)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_input_changed_on_input_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputChanged:Connect(function(input, game_processed_event)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_input_ended_on_input_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).InputEnded:Connect(function(input, game_processed_event)
		local input_optional, input_optional_0 = 0, 0;
		if (input ~= nil) then
			input_optional, input_optional_0 = 1, createPointer(input);
		end
		invokeFunction(callback_data, callback_vtable, input_optional, input_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_jump_request_on_jump_request(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).JumpRequest:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_last_input_type_changed_on_last_input_type_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).LastInputTypeChanged:Connect(function(last_input_type)
		invokeFunction(callback_data, callback_vtable, last_input_type)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_pointer_action_on_pointer_action(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).PointerAction:Connect(function(wheel, pan, pinch, game_processed_event)
		invokeFunction(callback_data, callback_vtable, wheel, createPointer(pan), pinch, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_text_box_focus_released_on_text_box_focus_released(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TextBoxFocusReleased:Connect(function(textbox_released)
		local textbox_released_optional, textbox_released_optional_0 = 0, 0;
		if (textbox_released ~= nil) then
			textbox_released_optional, textbox_released_optional_0 = 1, createPointer(textbox_released);
		end
		invokeFunction(callback_data, callback_vtable, textbox_released_optional, textbox_released_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_text_box_focused_on_text_box_focused(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TextBoxFocused:Connect(function(textbox_focused)
		local textbox_focused_optional, textbox_focused_optional_0 = 0, 0;
		if (textbox_focused ~= nil) then
			textbox_focused_optional, textbox_focused_optional_0 = 1, createPointer(textbox_focused);
		end
		invokeFunction(callback_data, callback_vtable, textbox_focused_optional, textbox_focused_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_touch_ended_on_touch_ended(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchEnded:Connect(function(touch, game_processed_event)
		local touch_optional, touch_optional_0 = 0, 0;
		if (touch ~= nil) then
			touch_optional, touch_optional_0 = 1, createPointer(touch);
		end
		invokeFunction(callback_data, callback_vtable, touch_optional, touch_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_touch_moved_on_touch_moved(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchMoved:Connect(function(touch, game_processed_event)
		local touch_optional, touch_optional_0 = 0, 0;
		if (touch ~= nil) then
			touch_optional, touch_optional_0 = 1, createPointer(touch);
		end
		invokeFunction(callback_data, callback_vtable, touch_optional, touch_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_touch_started_on_touch_started(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchStarted:Connect(function(touch, game_processed_event)
		local touch_optional, touch_optional_0 = 0, 0;
		if (touch ~= nil) then
			touch_optional, touch_optional_0 = 1, createPointer(touch);
		end
		invokeFunction(callback_data, callback_vtable, touch_optional, touch_optional_0, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_touch_swipe_on_touch_swipe(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchSwipe:Connect(function(swipe_direction, number_of_touches, game_processed_event)
		invokeFunction(callback_data, callback_vtable, swipe_direction, number_of_touches, game_processed_event and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_touch_tap_in_world_on_touch_tap_in_world(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchTapInWorld:Connect(function(position, processed_by_ui)
		invokeFunction(callback_data, callback_vtable, createPointer(position), processed_by_ui and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_user_c_frame_changed_on_user_c_frame_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).UserCFrameChanged:Connect(function(type, value)
		invokeFunction(callback_data, callback_vtable, type, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_window_focus_released_on_window_focus_released(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).WindowFocusReleased:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_user_input_service_window_focused_on_window_focused(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).WindowFocused:Connect(function()
		invokeFunction(callback_data, callback_vtable)
	end));
	return createPointer(result_0);
end
function abi.ffi.method_user_input_service_get_keys_pressed(self)
	local result_0 = getPointer(self):GetKeysPressed();
	local result_0_len = #result_0;
	local result_0_vec = allocVec(result_0_len * 4)
	for i = 1, result_0_len do
		local result_0_vec_value = result_0[i];
		storeU32(memory, result_0_vec + (i - 1) * 4 + 0, result_0_vec_value);
	end
	return result_0_vec, result_0_len;
end
function abi.ffi.property_getter_vr_service_gui_input_user_c_frame(self)
	local result_0 = getPointer(self).GuiInputUserCFrame;
	return result_0;
end
function abi.ffi.property_setter_vr_service_gui_input_user_c_frame_set_gui_input_user_c_frame(self, value)
	getPointer(self).GuiInputUserCFrame = value;
end
function abi.ffi.property_getter_vr_service_vr_enabled(self)
	local result_0 = getPointer(self).VREnabled;
	return result_0 and 1 or 0;
end
function abi.ffi.method_vr_service_get_touchpad_mode(self, pad)
	local result_0 = getPointer(self):GetTouchpadMode(pad);
	return result_0;
end
function abi.ffi.method_vr_service_get_user_c_frame(self, type)
	local result_0 = getPointer(self):GetUserCFrame(type);
	return createPointer(result_0);
end
function abi.ffi.method_vr_service_get_user_c_frame_enabled(self, type)
	local result_0 = getPointer(self):GetUserCFrameEnabled(type);
	return result_0 and 1 or 0;
end
function abi.ffi.method_vr_service_recenter_user_head_c_frame(self)
	getPointer(self):RecenterUserHeadCFrame()
end
function abi.ffi.method_vr_service_request_navigation(self, cframe, input_user_c_frame)
	getPointer(self):RequestNavigation(getPointer(cframe), input_user_c_frame)
end
function abi.ffi.method_vr_service_set_touchpad_mode(self, pad, mode)
	getPointer(self):SetTouchpadMode(pad, mode)
end
function abi.ffi.event_vr_service_navigation_requested_on_navigation_requested(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).NavigationRequested:Connect(function(cframe, input_user_c_frame)
		invokeFunction(callback_data, callback_vtable, createPointer(cframe), input_user_c_frame)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_vr_service_touchpad_mode_changed_on_touchpad_mode_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).TouchpadModeChanged:Connect(function(pad, mode)
		invokeFunction(callback_data, callback_vtable, pad, mode)
	end));
	return createPointer(result_0);
end
function abi.ffi.event_vr_service_user_c_frame_changed_on_user_c_frame_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).UserCFrameChanged:Connect(function(type, value)
		invokeFunction(callback_data, callback_vtable, type, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.event_vr_service_user_c_frame_enabled_on_user_c_frame_enabled(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).UserCFrameEnabled:Connect(function(type, enabled)
		invokeFunction(callback_data, callback_vtable, type, enabled and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_bool_value_value(self)
	local result_0 = getPointer(self).Value;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_bool_value_value_set_value(self, value)
	getPointer(self).Value = value == 1;
end
function abi.ffi.event_bool_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, value and 1 or 0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_brick_color_value_value(self)
	local result_0 = getPointer(self).Value;
	return createPointer(result_0);
end
function abi.ffi.property_setter_brick_color_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_brick_color_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_value_value(self)
	local result_0 = getPointer(self).Value;
	return createPointer(result_0);
end
function abi.ffi.property_setter_c_frame_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_c_frame_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_color_3_value_value(self)
	local result_0 = getPointer(self).Value;
	return createPointer(result_0);
end
function abi.ffi.property_setter_color_3_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_color_3_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_int_value_value(self)
	local result_0 = getPointer(self).Value;
	return result_0;
end
function abi.ffi.property_setter_int_value_value_set_value(self, value)
	getPointer(self).Value = value;
end
function abi.ffi.event_int_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, value)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_number_value_value(self)
	local result_0 = getPointer(self).Value;
	return result_0;
end
function abi.ffi.property_setter_number_value_value_set_value(self, value)
	getPointer(self).Value = value;
end
function abi.ffi.event_number_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, value)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_object_value_value(self)
	local result_0 = getPointer(self).Value;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_object_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_object_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		local value_optional, value_optional_0 = 0, 0;
		if (value ~= nil) then
			value_optional, value_optional_0 = 1, createPointer(value);
		end
		invokeFunction(callback_data, callback_vtable, value_optional, value_optional_0)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_ray_value_value(self)
	local result_0 = getPointer(self).Value;
	return createPointer(result_0);
end
function abi.ffi.property_setter_ray_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_ray_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_string_value_value(self)
	local result_0 = getPointer(self).Value;
	local result_0_len = #result_0;
	local result_0_content = allocString(result_0_len);
	for i = 1, result_0_len do
		storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
	end
	return result_0_content, result_0_len;
end
function abi.ffi.property_setter_string_value_value_set_value(self, value_addr, value_len)
	getPointer(self).Value = loadString(memory, value_addr, value_len);
end
function abi.ffi.event_string_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		local value_len = #value;
		local value_content = allocString(value_len);
		for i = 1, value_len do
			storeU8(memory, value_content + (i - 1), string.byte(value:sub(i, i)));
		end
		invokeFunction(callback_data, callback_vtable, value_content, value_len)
	end));
	return createPointer(result_0);
end
function abi.ffi.property_getter_vector_3_value_value(self)
	local result_0 = getPointer(self).Value;
	return createPointer(result_0);
end
function abi.ffi.property_setter_vector_3_value_value_set_value(self, value)
	getPointer(self).Value = getPointer(value);
end
function abi.ffi.event_vector_3_value_changed_on_changed(self, callback_data, callback_vtable)
	local result_0 = createConnection(callback_data, callback_vtable, getPointer(self).Changed:Connect(function(value)
		invokeFunction(callback_data, callback_vtable, createPointer(value))
	end));
	return createPointer(result_0);
end
function abi.ffi.method_vector_3_curve_x(self)
	local result_0 = getPointer(self):X();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_vector_3_curve_y(self)
	local result_0 = getPointer(self):Y();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_vector_3_curve_z(self)
	local result_0 = getPointer(self):Z();
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.method_voice_chat_internal_is_voice_enabled_for_user_id_async(self, user_id)
	local result_0 = getPointer(self):IsVoiceEnabledForUserIdAsync(user_id);
	return result_0 and 1 or 0;
end
function abi.ffi.method_voice_chat_service_is_voice_enabled_for_user_id_async(self, user_id)
	local result_0 = getPointer(self):IsVoiceEnabledForUserIdAsync(user_id);
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_voice_source_user_id(self)
	local result_0 = getPointer(self).UserId;
	return result_0;
end
function abi.ffi.property_getter_weld_constraint_active(self)
	local result_0 = getPointer(self).Active;
	return result_0 and 1 or 0;
end
function abi.ffi.property_getter_weld_constraint_enabled(self)
	local result_0 = getPointer(self).Enabled;
	return result_0 and 1 or 0;
end
function abi.ffi.property_setter_weld_constraint_enabled_set_enabled(self, value)
	getPointer(self).Enabled = value == 1;
end
function abi.ffi.property_getter_weld_constraint_part_0(self)
	local result_0 = getPointer(self).Part0;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_weld_constraint_part_0_set_part_0(self, value)
	getPointer(self).Part0 = getPointer(value);
end
function abi.ffi.property_getter_weld_constraint_part_1(self)
	local result_0 = getPointer(self).Part1;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, createPointer(result_0);
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.property_setter_weld_constraint_part_1_set_part_1(self, value)
	getPointer(self).Part1 = getPointer(value);
end
function abi.ffi.pointer_conversion_internal_string_to_lua_value(string_addr, string_len)
	local result_0 = loadString(memory, string_addr, string_len);
	return createPointer(result_0);
end
function abi.ffi.pointer_conversion_internal_float_to_lua_value(float)
	local result_0 = float;
	return createPointer(result_0);
end
function abi.ffi.primitive_conversion_internal_lua_value_to_string(value)
	local text = getPointer(value);
	local result_0 = if type(text) == "string" then text else nil;
	local result_0_optional, result_0_optional_0, result_0_optional_1 = 0, 0, 0;
	if (result_0 ~= nil) then
		local result_0_len = #result_0;
		local result_0_content = allocString(result_0_len);
		for i = 1, result_0_len do
			storeU8(memory, result_0_content + (i - 1), string.byte(result_0:sub(i, i)));
		end
		result_0_optional, result_0_optional_0, result_0_optional_1 = 1, result_0_content, result_0_len;
	end
	return result_0_optional, result_0_optional_0, result_0_optional_1;
end
function abi.ffi.primitive_conversion_internal_lua_value_to_float(value)
	local text = getPointer(value);
	local result_0 = if type(text) == "number" then text else nil;
	local result_0_optional, result_0_optional_0 = 0, 0;
	if (result_0 ~= nil) then
		result_0_optional, result_0_optional_0 = 1, result_0;
	end
	return result_0_optional, result_0_optional_0;
end
function abi.ffi.static_function_internal_new_instance_new(class_name_addr, class_name_len)
	local result_0 = Instance.new(loadString(memory, class_name_addr, class_name_len));
	return createPointer(result_0);
end
function abi.ffi.static_function_vector_3_new()
	local result_0 = Vector3.new();
	return createPointer(result_0);
end
function abi.ffi.static_function_vector_3_new_new_with_position(x, y, z)
	local result_0 = Vector3.new(x, y, z);
	return createPointer(result_0);
end
function abi.ffi.static_function_vector_3_new_new_with_vector_3(v3)
	local result_0 = Vector3.new(getPointer(v3));
	return createPointer(result_0);
end
function abi.ffi.static_function_vector_3_new_new_with_normal(normal)
	local result_0 = Vector3.new(normal);
	return createPointer(result_0);
end
function abi.ffi.static_function_vector_3_new_new_with_axis(axis)
	local result_0 = Vector3.new(axis);
	return createPointer(result_0);
end
function abi.ffi.static_property_vector_3_zero()
	local result_0 = Vector3.zero;
	return createPointer(result_0);
end
function abi.ffi.static_property_vector_3_one()
	local result_0 = Vector3.one;
	return createPointer(result_0);
end
function abi.ffi.static_property_vector_3_x_axis()
	local result_0 = Vector3.xAxis;
	return createPointer(result_0);
end
function abi.ffi.static_property_vector_3_y_axis()
	local result_0 = Vector3.yAxis;
	return createPointer(result_0);
end
function abi.ffi.static_property_vector_3_z_axis()
	local result_0 = Vector3.zAxis;
	return createPointer(result_0);
end
function abi.ffi.property_getter_vector_3_x(self)
	local result_0 = getPointer(self).X;
	return result_0;
end
function abi.ffi.property_getter_vector_3_y(self)
	local result_0 = getPointer(self).Y;
	return result_0;
end
function abi.ffi.property_getter_vector_3_z(self)
	local result_0 = getPointer(self).Z;
	return result_0;
end
function abi.ffi.property_getter_vector_3_magnitude(self)
	local result_0 = getPointer(self).Magnitude;
	return result_0;
end
function abi.ffi.property_getter_vector_3_unit(self)
	local result_0 = getPointer(self).Unit;
	return createPointer(result_0);
end
function abi.ffi.method_vector_3_lerp(self, goal, alpha)
	local result_0 = getPointer(self):Lerp(getPointer(goal), alpha);
	return createPointer(result_0);
end
function abi.ffi.method_vector_3_cross(self, other)
	local result_0 = getPointer(self):Cross(getPointer(other));
	return createPointer(result_0);
end
function abi.ffi.method_vector_3_angle(self, other, axis)
	local result_0 = getPointer(self):Angle(getPointer(other), getPointer(axis));
	return result_0;
end
function abi.ffi.method_vector_3_dot(self, other)
	local result_0 = getPointer(self):Dot(getPointer(other));
	return result_0;
end
function abi.ffi.method_vector_3_fuzzy_eq(self, other, epsilon)
	local result_0 = getPointer(self):FuzzyEq(getPointer(other), epsilon);
	return result_0 and 1 or 0;
end
function abi.ffi.method_vector_3_max(self, others_addr, others_len)
	local others_vec = table.create(others_len);
	for i = 1, others_len do
		local vecElement_0 = loadU32(memory, others_addr + (i - 1) * 4 + 0)
		others_vec[i] = getPointer(vecElement_0);
	end
	local result_0 = getPointer(self):Max(unpack(others_vec, 1, others_len));
	return createPointer(result_0);
end
function abi.ffi.method_vector_3_min(self, others_addr, others_len)
	local others_vec = table.create(others_len);
	for i = 1, others_len do
		local vecElement_0 = loadU32(memory, others_addr + (i - 1) * 4 + 0)
		others_vec[i] = getPointer(vecElement_0);
	end
	local result_0 = getPointer(self):Min(unpack(others_vec, 1, others_len));
	return createPointer(result_0);
end
function abi.ffi.un_op_vector_3_neg(self)
	local result_0 = -getPointer(self);
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_add_vector_3_add(self, value)
	local result_0 = getPointer(self) + getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_sub_vector_3_sub(self, value)
	local result_0 = getPointer(self) - getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_div_vector_3_div(self, value)
	local result_0 = getPointer(self) / getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_div_number_div(self, value)
	local result_0 = getPointer(self) / value;
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_mul_vector_3_mul(self, value)
	local result_0 = getPointer(self) * getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_vector_3_mul_number_mul(self, value)
	local result_0 = getPointer(self) * value;
	return createPointer(result_0);
end
function abi.ffi.static_function_c_frame_new()
	local result_0 = CFrame.new();
	return createPointer(result_0);
end
function abi.ffi.static_function_c_frame_new_new_with_position(x, y, z)
	local result_0 = CFrame.new(x, y, z);
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_position(self)
	local result_0 = getPointer(self).Position;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_rotation(self)
	local result_0 = getPointer(self).Rotation;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_look_vector(self)
	local result_0 = getPointer(self).LookVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_right_vector(self)
	local result_0 = getPointer(self).RightVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_up_vector(self)
	local result_0 = getPointer(self).UpVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_x_vector(self)
	local result_0 = getPointer(self).XVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_y_vector(self)
	local result_0 = getPointer(self).YVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_z_vector(self)
	local result_0 = getPointer(self).ZVector;
	return createPointer(result_0);
end
function abi.ffi.property_getter_c_frame_x(self)
	local result_0 = getPointer(self).X;
	return result_0;
end
function abi.ffi.property_getter_c_frame_y(self)
	local result_0 = getPointer(self).Y;
	return result_0;
end
function abi.ffi.property_getter_c_frame_z(self)
	local result_0 = getPointer(self).Z;
	return result_0;
end
function abi.ffi.method_c_frame_inverse(self)
	local result_0 = getPointer(self):Inverse();
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_lerp(self, goal, alpha)
	local result_0 = getPointer(self):Lerp(getPointer(goal), alpha);
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_orthonormalize(self)
	local result_0 = getPointer(self):Orthonormalize();
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_to_world_space(self, cf)
	local result_0 = getPointer(self):ToWorldSpace(getPointer(cf));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_to_object_space(self, cf)
	local result_0 = getPointer(self):ToObjectSpace(getPointer(cf));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_point_to_world_space(self, v3)
	local result_0 = getPointer(self):PointToWorldSpace(getPointer(v3));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_point_to_object_space(self, v3)
	local result_0 = getPointer(self):PointToObjectSpace(getPointer(v3));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_vector_to_world_space(self, v3)
	local result_0 = getPointer(self):VectorToWorldSpace(getPointer(v3));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_vector_to_object_space(self, v3)
	local result_0 = getPointer(self):VectorToObjectSpace(getPointer(v3));
	return createPointer(result_0);
end
function abi.ffi.method_c_frame_get_components(self)
	local result_0 = { getPointer(self):GetComponents() }
	local result_0_len = #result_0;
	local result_0_vec = allocVec(result_0_len * 8)
	for i = 1, result_0_len do
		local result_0_vec_value = result_0[i];
		storeFloat(memory, result_0_vec + (i - 1) * 8 + 0, result_0_vec_value);
	end
	return result_0_vec, result_0_len;
end
function abi.ffi.bin_op_c_frame_add_vector_3_add(self, value)
	local result_0 = getPointer(self) + getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_c_frame_sub_vector_3_sub(self, value)
	local result_0 = getPointer(self) - getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_c_frame_mul_cframe_mul(self, value)
	local result_0 = getPointer(self) * getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_c_frame_mul_vector_3_mul(self, value)
	local result_0 = getPointer(self) * getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.static_function_color_3_new(r, g, b)
	local result_0 = Color3.new(r, g, b);
	return createPointer(result_0);
end
function abi.ffi.static_function_color_3_from_rgb(r, g, b)
	local result_0 = Color3.fromRGB(r, g, b);
	return createPointer(result_0);
end
function abi.ffi.static_function_color_3_from_hsv(h, s, v)
	local result_0 = Color3.fromHSV(h, s, v);
	return createPointer(result_0);
end
function abi.ffi.property_getter_color_3_r(self)
	local result_0 = getPointer(self).R;
	return result_0;
end
function abi.ffi.property_getter_color_3_g(self)
	local result_0 = getPointer(self).G;
	return result_0;
end
function abi.ffi.property_getter_color_3_b(self)
	local result_0 = getPointer(self).B;
	return result_0;
end
function abi.ffi.static_function_u_dim_new(scale, offset)
	local result_0 = UDim.new(scale, offset);
	return createPointer(result_0);
end
function abi.ffi.property_getter_u_dim_scale(self)
	local result_0 = getPointer(self).Scale;
	return result_0;
end
function abi.ffi.property_getter_u_dim_offset(self)
	local result_0 = getPointer(self).Offset;
	return result_0;
end
function abi.ffi.static_function_u_dim_2_new()
	local result_0 = UDim2.new();
	return createPointer(result_0);
end
function abi.ffi.static_function_u_dim_2_new_new_with_components(x_scale, x_offset, y_scale, y_offset)
	local result_0 = UDim2.new(x_scale, x_offset, y_scale, y_offset);
	return createPointer(result_0);
end
function abi.ffi.static_function_u_dim_2_new_new_with_udims(x, y)
	local result_0 = UDim2.new(getPointer(x), getPointer(y));
	return createPointer(result_0);
end
function abi.ffi.static_function_u_dim_2_from_scale(x, y)
	local result_0 = UDim2.fromScale(x, y);
	return createPointer(result_0);
end
function abi.ffi.static_function_u_dim_2_from_offset(x_offset, y_offset)
	local result_0 = UDim2.fromOffset(x_offset, y_offset);
	return createPointer(result_0);
end
function abi.ffi.property_getter_u_dim_2_x(self)
	local result_0 = getPointer(self).X;
	return result_0;
end
function abi.ffi.property_getter_u_dim_2_y(self)
	local result_0 = getPointer(self).Y;
	return result_0;
end
function abi.ffi.property_getter_u_dim_2_width(self)
	local result_0 = getPointer(self).Width;
	return createPointer(result_0);
end
function abi.ffi.property_getter_u_dim_2_height(self)
	local result_0 = getPointer(self).Height;
	return createPointer(result_0);
end
function abi.ffi.bin_op_u_dim_2_add_udim_2_add(self, value)
	local result_0 = getPointer(self) + getPointer(value);
	return createPointer(result_0);
end
function abi.ffi.bin_op_u_dim_2_sub_udim_2_sub(self, value)
	local result_0 = getPointer(self) - getPointer(value);
	return createPointer(result_0);
end
local function lua_value_number(value)
	return createPointer(value);
end
abi.ffi.lua_value_f32 = lua_value_number;
abi.ffi.lua_value_f64 = lua_value_number;
abi.ffi.lua_value_i8 = lua_value_number;
abi.ffi.lua_value_i16 = lua_value_number;
abi.ffi.lua_value_i32 = lua_value_number;
abi.ffi.lua_value_i64 = lua_value_number;
abi.ffi.lua_value_u8 = lua_value_number;
abi.ffi.lua_value_u16 = lua_value_number;
abi.ffi.lua_value_u32 = lua_value_number;
abi.ffi.lua_value_u64 = lua_value_number;
abi.ffi.lua_value_usize = lua_value_number;
abi.ffi.lua_value_isize = lua_value_number;
return abi; ]===]
_35d6e87fc6b6e6c2aac485485f85febc.Parent = _275170f7ba107d65bf3497952d51abbe

local _28830117e3baedd365834b28af51c4f0 = Instance.new("ModuleScript")
_28830117e3baedd365834b28af51c4f0.Name = "runtime"
sourceMap[_28830117e3baedd365834b28af51c4f0] = [===[ local Integer = (function()
	local Numeric = {}

	local NUM_ZERO, NUM_ONE, NUM_SIX_FOUR
	local NUM_BIT_26, NUM_BIT_52

	local bit_lshift = bit32.lshift
	local bit_rshift = bit32.rshift
	local bit_arshift = bit32.arshift

	local bit_and = bit32.band
	local bit_or = bit32.bor
	local bit_xor = bit32.bxor
	local bit_not = bit32.bnot

	local bit_extract = bit32.extract
	local bit_replace = bit32.replace

	local from_u32, from_u64, into_u64
	local num_subtract, num_divide_unsigned, num_negate
	local num_or, num_shift_left, num_shift_right_unsigned
	local num_is_negative, num_is_zero, num_is_less_unsigned

	-- X: a[0 ..21]
	-- Y: a[22..31]
	--  | b[0 ..11]
	-- Z: b[12..31]
	local constructor = Vector3.new

	function Numeric.from_u32(data_1, data_2)
		local x = bit_and(data_1, 0x3FFFFF)
		local y = bit_and(data_2, 0x3FFFFF)
		local z = bit_replace(bit_rshift(data_1, 22), bit_rshift(data_2, 22), 10, 10)

		return constructor(x, y, z)
	end

	local function load_d1(value)
		return bit_replace(bit_and(value.X, 0x3FFFFF), value.Z, 22, 10)
	end

	local function load_d2(value)
		return bit_replace(bit_and(value.Y, 0x3FFFFF), bit_rshift(value.Z, 10), 22, 10)
	end

	function Numeric.into_u32(value)
		return load_d1(value), load_d2(value)
	end

	function Numeric.from_u64(value)
		return from_u32(bit_and(value % 0x100000000), bit_and(value / 0x100000000))
	end

	function Numeric.into_u64(value)
		return load_d1(value) + load_d2(value) * 0x100000000
	end

	function Numeric.add(lhs, rhs)
		local data_1 = load_d1(lhs) + load_d1(rhs)
		local data_2 = load_d2(lhs) + load_d2(rhs)

		if data_1 >= 0x100000000 then
			data_1 = data_1 - 0x100000000
			data_2 = data_2 + 1
		end

		if data_2 >= 0x100000000 then
			data_2 = data_2 - 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.subtract(lhs, rhs)
		local data_1 = load_d1(lhs) - load_d1(rhs)
		local data_2 = load_d2(lhs) - load_d2(rhs)

		if data_1 < 0 then
			data_1 = data_1 + 0x100000000
			data_2 = data_2 - 1
		end

		if data_2 < 0 then
			data_2 = data_2 + 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.multiply(lhs, rhs)
		if num_is_zero(lhs) or num_is_zero(rhs) then
			return NUM_ZERO
		elseif num_is_less_unsigned(lhs, NUM_BIT_26) and num_is_less_unsigned(rhs, NUM_BIT_26) then
			return from_u64(load_d1(lhs) * load_d1(rhs))
		end

		-- Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
		-- We can skip products that would overflow.
		local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)
		local rhs_1, rhs_2 = load_d1(rhs), load_d2(rhs)

		local a48 = bit_rshift(lhs_2, 16)
		local a32 = bit_and(lhs_2, 0xFFFF)
		local a16 = bit_rshift(lhs_1, 16)
		local a00 = bit_and(lhs_1, 0xFFFF)

		local b48 = bit_rshift(rhs_2, 16)
		local b32 = bit_and(rhs_2, 0xFFFF)
		local b16 = bit_rshift(rhs_1, 16)
		local b00 = bit_and(rhs_1, 0xFFFF)

		local c00 = a00 * b00
		local c16 = bit_rshift(c00, 16)

		c00 = bit_and(c00, 0xFFFF)
		c16 = c16 + a16 * b00

		local c32 = bit_rshift(c16, 16)

		c16 = bit_and(c16, 0xFFFF)
		c16 = c16 + a00 * b16
		c32 = c32 + bit_rshift(c16, 16)
		c16 = bit_and(c16, 0xFFFF)
		c32 = c32 + a32 * b00

		local c48 = bit_rshift(c32, 16)

		c32 = bit_and(c32, 0xFFFF)
		c32 = c32 + a16 * b16
		c48 = c48 + bit_rshift(c32, 16)
		c32 = bit_and(c32, 0xFFFF)
		c32 = c32 + a00 * b32
		c48 = c48 + bit_rshift(c32, 16)
		c32 = bit_and(c32, 0xFFFF)
		c48 = c48 + a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
		c48 = bit_and(c48, 0xFFFF)

		local data_1 = bit_replace(c00, c16, 16, 16)
		local data_2 = bit_replace(c32, c48, 16, 16)

		return from_u32(data_1, data_2)
	end

	function Numeric.divide_unsigned(lhs, rhs)
		if num_is_zero(rhs) then
			error("division by zero")
		elseif num_is_zero(lhs) then
			return NUM_ZERO, NUM_ZERO
		elseif num_is_less_unsigned(lhs, NUM_BIT_52) and num_is_less_unsigned(rhs, NUM_BIT_52) then
			local lhs_u = into_u64(lhs)
			local rhs_u = into_u64(rhs)

			return from_u64(lhs_u / rhs_u), from_u64(lhs_u % rhs_u)
		end

		local quotient = NUM_ZERO
		local remainder = NUM_ZERO

		local num_1, num_2 = load_d1(lhs), load_d2(lhs)

		for i = 63, 0, -1 do
			local temp = num_shift_left(remainder, NUM_ONE)
			local rem_1, rem_2 = load_d1(temp), load_d2(temp)

			if i > 31 then
				rem_1 = bit_or(rem_1, bit_extract(num_2, i - 32, 1))
			else
				rem_1 = bit_or(rem_1, bit_extract(num_1, i, 1))
			end

			remainder = from_u32(rem_1, rem_2)

			if not num_is_less_unsigned(remainder, rhs) then
				remainder = num_subtract(remainder, rhs)
				quotient = num_or(quotient, num_shift_left(NUM_ONE, from_u32(i, 0)))
			end
		end

		return quotient, remainder
	end

	function Numeric.divide_signed(lhs, rhs)
		local left_negative = num_is_negative(lhs)
		local right_negative = num_is_negative(rhs)

		if left_negative then
			lhs = num_negate(lhs)
		end

		if right_negative then
			rhs = num_negate(rhs)
		end

		local quotient, remainder = num_divide_unsigned(lhs, rhs)

		if left_negative ~= right_negative then
			quotient = num_negate(quotient)
		end

		if left_negative then
			remainder = num_negate(remainder)
		end

		return quotient, remainder
	end

	function Numeric.negate(value)
		local data_1 = bit_not(load_d1(value)) + 1
		local data_2 = bit_not(load_d2(value))

		if data_1 >= 0x100000000 then
			data_1 = data_1 - 0x100000000
			data_2 = data_2 + 1
		end

		if data_2 >= 0x100000000 then
			data_2 = data_2 - 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.bit_and(lhs, rhs)
		local x = bit_and(lhs.X, rhs.X)
		local y = bit_and(lhs.Y, rhs.Y)
		local z = bit_and(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.bit_not(value)
		local x = bit_and(bit_not(value.X), 0xFFFFFF)
		local y = bit_and(bit_not(value.Y), 0xFFFFFF)
		local z = bit_and(bit_not(value.Z), 0xFFFFFF)

		return constructor(x, y, z)
	end

	function Numeric.bit_or(lhs, rhs)
		local x = bit_or(lhs.X, rhs.X)
		local y = bit_or(lhs.Y, rhs.Y)
		local z = bit_or(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.bit_xor(lhs, rhs)
		local x = bit_xor(lhs.X, rhs.X)
		local y = bit_xor(lhs.Y, rhs.Y)
		local z = bit_xor(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.shift_left(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local pad = 32 - count
			local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

			local data_1 = bit_lshift(lhs_1, count)
			local data_2 = bit_replace(bit_rshift(lhs_1, pad), lhs_2, count, pad)

			return from_u32(data_1, data_2)
		else
			local lhs_1 = load_d1(lhs)

			return from_u32(0, bit_lshift(lhs_1, count - 32))
		end
	end

	function Numeric.shift_right_unsigned(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

			local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
			local data_2 = bit_rshift(lhs_2, count)

			return from_u32(data_1, data_2)
		else
			local lhs_2 = load_d2(lhs)

			return from_u32(bit_rshift(lhs_2, count - 32), 0)
		end
	end

	function Numeric.shift_right_signed(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

			local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
			local data_2 = bit_arshift(lhs_2, count)

			return from_u32(data_1, data_2)
		else
			local lhs_2 = load_d2(lhs)

			local data_1 = bit_arshift(lhs_2, count - 32)
			local data_2 = lhs_2 >= 0x80000000 and 0xFFFFFFFF or 0

			return from_u32(data_1, data_2)
		end
	end

	function Numeric.rotate_left(lhs, rhs)
		if num_is_zero(rhs) then
			return lhs
		else
			local data_1 = num_shift_left(lhs, rhs)
			local data_2 = num_shift_right_unsigned(lhs, num_subtract(NUM_SIX_FOUR, rhs))

			return num_or(data_1, data_2)
		end
	end

	function Numeric.rotate_right(lhs, rhs)
		if num_is_zero(rhs) then
			return lhs
		else
			local data_1 = num_shift_right_unsigned(lhs, rhs)
			local data_2 = num_shift_left(lhs, num_subtract(NUM_SIX_FOUR, rhs))

			return num_or(data_1, data_2)
		end
	end

	function Numeric.is_negative(value)
		return value.Z >= 0x80000
	end

	function Numeric.is_zero(value)
		return value.X == 0 and value.Y == 0 and value.Z == 0
	end

	function Numeric.is_equal(lhs, rhs)
		return lhs.X == rhs.X and lhs.Y == rhs.Y and lhs.Z == rhs.Z
	end

	function Numeric.is_less_unsigned(lhs, rhs)
		local data_l_2 = load_d2(lhs)
		local data_r_2 = load_d2(rhs)

		return data_l_2 < data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) < load_d1(rhs))
	end

	function Numeric.is_greater_unsigned(lhs, rhs)
		local data_l_2 = load_d2(lhs)
		local data_r_2 = load_d2(rhs)

		return data_l_2 > data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) > load_d1(rhs))
	end

	function Numeric.is_less_signed(lhs, rhs)
		local neg_a = num_is_negative(lhs)
		local neg_b = num_is_negative(rhs)

		if neg_a and not neg_b then
			return true
		elseif not neg_a and neg_b then
			return false
		else
			return num_is_negative(num_subtract(lhs, rhs))
		end
	end

	function Numeric.is_greater_signed(lhs, rhs)
		local neg_a = num_is_negative(lhs)
		local neg_b = num_is_negative(rhs)

		if neg_a and not neg_b then
			return false
		elseif not neg_a and neg_b then
			return true
		else
			return num_is_negative(num_subtract(rhs, lhs))
		end
	end

	from_u32 = Numeric.from_u32
	from_u64 = Numeric.from_u64
	into_u64 = Numeric.into_u64

	num_subtract = Numeric.subtract
	num_divide_unsigned = Numeric.divide_unsigned
	num_negate = Numeric.negate

	num_or = Numeric.bit_or
	num_shift_left = Numeric.shift_left
	num_shift_right_unsigned = Numeric.shift_right_unsigned

	num_is_negative = Numeric.is_negative
	num_is_zero = Numeric.is_zero
	num_is_less_unsigned = Numeric.is_less_unsigned

	NUM_ZERO = from_u64(0)
	NUM_ONE = from_u64(1)
	NUM_SIX_FOUR = from_u64(64)
	NUM_BIT_26 = from_u64(0x4000000)
	NUM_BIT_52 = from_u64(0x10000000000000)

	Numeric.ZERO = NUM_ZERO
	Numeric.ONE = NUM_ONE

	return table.freeze(Numeric)
end)()
local rt = (function()
	local module = {}

	local to_u32 = bit32.band

	local bit_or = bit32.bor
	local bit_and = bit32.band
	local bit_lshift = bit32.lshift
	local bit_rshift = bit32.rshift

	local num_from_u32 = Integer.from_u32
	local num_into_u32 = Integer.into_u32

	local function to_i32(num)
		if num >= 0x80000000 then
			return num - 0x100000000
		else
			return num
		end
	end

	local function no_op(num)
		return num
	end

	module.i64 = Integer

	do
		local add = {}
		local sub = {}
		local mul = {}
		local div = {}
		local rem = {}
		local neg = {}
		local min = {}
		local max = {}
		local copysign = {}
		local nearest = {}

		local assert = assert

		local math_abs = math.abs
		local math_fmod = math.fmod
		local math_round = math.round
		local math_sign = math.sign
		local math_min = math.min
		local math_max = math.max

		local string_byte = string.byte
		local string_pack = string.pack

		local num_divide_signed = Integer.divide_signed
		local num_divide_unsigned = Integer.divide_unsigned

		function add.i32(lhs, rhs)
			return to_u32(lhs + rhs)
		end

		function sub.i32(lhs, rhs)
			return to_u32(lhs - rhs)
		end

		function mul.i32(lhs, rhs)
			if (lhs + rhs) < 0x8000000 then
				return to_u32(lhs * rhs)
			else
				local a16 = bit_rshift(lhs, 16)
				local a00 = bit_and(lhs, 0xFFFF)
				local b16 = bit_rshift(rhs, 16)
				local b00 = bit_and(rhs, 0xFFFF)

				local c00 = a00 * b00
				local c16 = a16 * b00 + a00 * b16

				return to_u32(c00 + bit_lshift(c16, 16))
			end
		end

		function div.i32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			lhs = to_i32(lhs)
			rhs = to_i32(rhs)

			return to_u32(lhs / rhs)
		end

		function div.u32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			return to_u32(lhs / rhs)
		end

		function rem.i32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			lhs = to_i32(lhs)
			rhs = to_i32(rhs)

			return to_u32(math_fmod(lhs, rhs))
		end

		add.i64 = Integer.add
		sub.i64 = Integer.subtract
		mul.i64 = Integer.multiply
		div.i64 = num_divide_signed

		function rem.i64(lhs, rhs)
			local _, remainder = num_divide_signed(lhs, rhs)

			return remainder
		end

		div.u64 = num_divide_unsigned

		function rem.u64(lhs, rhs)
			local _, remainder = num_divide_unsigned(lhs, rhs)

			return remainder
		end

		function neg.f32(num)
			return -num
		end

		function min.f32(lhs, rhs)
			if rhs == rhs then
				return math_min(lhs, rhs)
			else
				return rhs
			end
		end

		function max.f32(lhs, rhs)
			if rhs == rhs then
				return math_max(lhs, rhs)
			else
				return rhs
			end
		end

		function copysign.f32(lhs, rhs)
			local packed = string_pack("<d", rhs)
			local sign = string_byte(packed, 8)

			if sign >= 0x80 then
				return -math_abs(lhs)
			else
				return math_abs(lhs)
			end
		end

		function nearest.f32(num)
			local result = math_round(num)

			if (math_abs(num) + 0.5) % 2 == 1 then
				result = result - math_sign(result)
			end

			return result
		end

		neg.f64 = neg.f32
		min.f64 = min.f32
		max.f64 = max.f32
		copysign.f64 = copysign.f32
		nearest.f64 = nearest.f32

		module.add = add
		module.sub = sub
		module.mul = mul
		module.div = div
		module.rem = rem
		module.neg = neg
		module.min = min
		module.max = max
		module.copysign = copysign
		module.nearest = nearest
	end

	do
		local clz = {}
		local ctz = {}
		local popcnt = {}

		local bit_countlz = bit32.countlz
		local bit_countrz = bit32.countrz

		local function popcnt_i32(num)
			local count = 0

			while num ~= 0 do
				num = bit_and(num, num - 1)
				count = count + 1
			end

			return count
		end

		popcnt.i32 = popcnt_i32

		function clz.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp

			if data_2 == 0 then
				temp = bit_countlz(data_1) + 32
			else
				temp = bit_countlz(data_2)
			end

			return num_from_u32(temp, 0)
		end

		function ctz.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp

			if data_1 == 0 then
				temp = bit_countrz(data_2) + 32
			else
				temp = bit_countrz(data_1)
			end

			return num_from_u32(temp, 0)
		end

		function popcnt.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp = popcnt_i32(data_1) + popcnt_i32(data_2)

			return num_from_u32(temp, 0)
		end

		module.clz = clz
		module.ctz = ctz
		module.popcnt = popcnt
	end

	do
		local eq = {}
		local ne = {}
		local le = {}
		local lt = {}
		local ge = {}
		local gt = {}

		local num_is_equal = Integer.is_equal
		local num_is_less_signed = Integer.is_less_signed
		local num_is_less_unsigned = Integer.is_less_unsigned
		local num_is_greater_signed = Integer.is_greater_signed
		local num_is_greater_unsigned = Integer.is_greater_unsigned

		function le.i32(lhs, rhs)
			return to_i32(lhs) <= to_i32(rhs)
		end

		function lt.i32(lhs, rhs)
			return to_i32(lhs) < to_i32(rhs)
		end

		function ge.i32(lhs, rhs)
			return to_i32(lhs) >= to_i32(rhs)
		end

		function gt.i32(lhs, rhs)
			return to_i32(lhs) > to_i32(rhs)
		end

		eq.i64 = num_is_equal

		function ne.i64(lhs, rhs)
			return not num_is_equal(lhs, rhs)
		end

		function le.i64(lhs, rhs)
			return num_is_less_signed(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		function le.u64(lhs, rhs)
			return num_is_less_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		lt.i64 = num_is_less_signed
		lt.u64 = num_is_less_unsigned

		function ge.i64(lhs, rhs)
			return num_is_greater_signed(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		function ge.u64(lhs, rhs)
			return num_is_greater_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		gt.i64 = num_is_greater_signed
		gt.u64 = num_is_greater_unsigned

		module.eq = eq
		module.ne = ne
		module.le = le
		module.lt = lt
		module.ge = ge
		module.gt = gt
	end

	do
		local band = {}
		local bor = {}
		local bxor = {}
		local bnot = {}

		band.i64 = Integer.bit_and
		bor.i64 = Integer.bit_or
		bxor.i64 = Integer.bit_xor
		bnot.i64 = Integer.bit_not

		module.band = band
		module.bor = bor
		module.bxor = bxor
		module.bnot = bnot
	end

	do
		local shl = {}
		local shr = {}
		local rotl = {}
		local rotr = {}

		local bit_arshift = bit32.arshift
		local bit_lrotate = bit32.lrotate
		local bit_rrotate = bit32.rrotate

		function shl.i32(lhs, rhs)
			return bit_lshift(lhs, rhs % 32)
		end

		function shr.u32(lhs, rhs)
			return bit_rshift(lhs, rhs % 32)
		end

		function shr.i32(lhs, rhs)
			return bit_arshift(lhs, rhs % 32)
		end

		function rotl.i32(lhs, rhs)
			return bit_lrotate(lhs, rhs % 32)
		end

		function rotr.i32(lhs, rhs)
			return bit_rrotate(lhs, rhs % 32)
		end

		shl.i64 = Integer.shift_left
		shr.i64 = Integer.shift_right_signed
		shr.u64 = Integer.shift_right_unsigned
		rotl.i64 = Integer.rotate_left
		rotr.i64 = Integer.rotate_right

		module.shl = shl
		module.shr = shr
		module.rotl = rotl
		module.rotr = rotr
	end

	do
		local wrap = {}
		local truncate = {}
		local saturate = {}
		local extend = {}
		local convert = {}
		local demote = {}
		local promote = {}
		local reinterpret = {}

		local math_ceil = math.ceil
		local math_floor = math.floor
		local math_clamp = math.clamp

		local string_pack = string.pack
		local string_unpack = string.unpack

		local NUM_ZERO = Integer.ZERO
		local NUM_MIN_I64 = num_from_u32(0, 0x80000000)
		local NUM_MAX_I64 = num_from_u32(0xFFFFFFFF, 0x7FFFFFFF)
		local NUM_MAX_U64 = num_from_u32(0xFFFFFFFF, 0xFFFFFFFF)

		local num_from_u64 = Integer.from_u64
		local num_into_u64 = Integer.into_u64

		local num_negate = Integer.negate
		local num_is_negative = Integer.is_negative

		local function truncate_f64(num)
			if num >= 0 then
				return math_floor(num)
			else
				return math_ceil(num)
			end
		end

		function wrap.i32_i64(num)
			local data_1, _ = num_into_u32(num)

			return data_1
		end

		function truncate.i32_f32(num)
			return to_u32(truncate_f64(num))
		end

		truncate.i32_f64 = to_u32
		truncate.u32_f32 = truncate_f64
		truncate.u32_f64 = truncate_f64

		function truncate.i64_f32(num)
			if num < 0 then
				local temp = num_from_u64(-num)

				return num_negate(temp)
			else
				return num_from_u64(num)
			end
		end

		truncate.i64_f64 = truncate.i64_f32

		function truncate.u64_f32(num)
			if num <= 0 then
				return NUM_ZERO
			else
				return num_from_u64(math_floor(num))
			end
		end

		truncate.u64_f64 = truncate.u64_f32

		truncate.f32 = truncate_f64
		truncate.f64 = truncate_f64

		function saturate.i32_f32(num)
			local temp = math_clamp(truncate_f64(num), -0x80000000, 0x7FFFFFFF)

			return to_u32(temp)
		end

		saturate.i32_f64 = saturate.i32_f32

		function saturate.u32_f32(num)
			local temp = math_clamp(truncate_f64(num), 0, 0xFFFFFFFF)

			return to_u32(temp)
		end

		saturate.u32_f64 = saturate.u32_f32

		local truncate_i64_f64 = truncate.i64_f64

		function saturate.i64_f32(num)
			if num >= 2 ^ 63 - 1 then
				return NUM_MAX_I64
			elseif num <= -2 ^ 63 then
				return NUM_MIN_I64
			else
				return truncate_i64_f64(num)
			end
		end

		saturate.i64_f64 = saturate.i64_f32

		function saturate.u64_f32(num)
			if num >= 2 ^ 64 then
				return NUM_MAX_U64
			elseif num <= 0 then
				return NUM_ZERO
			else
				return truncate_i64_f64(num)
			end
		end

		saturate.u64_f64 = saturate.u64_f32

		function extend.i32_n8(num)
			num = bit_and(num, 0xFF)

			if num >= 0x80 then
				return to_u32(num - 0x100)
			else
				return num
			end
		end

		function extend.i32_n16(num)
			num = bit_and(num, 0xFFFF)

			if num >= 0x8000 then
				return to_u32(num - 0x10000)
			else
				return num
			end
		end

		function extend.i64_n8(num)
			local data_1, _ = num_into_u32(num)

			data_1 = bit_and(data_1, 0xFF)

			if data_1 >= 0x80 then
				local temp = num_from_u32(-data_1 + 0x100, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_n16(num)
			local data_1, _ = num_into_u32(num)

			data_1 = bit_and(data_1, 0xFFFF)

			if data_1 >= 0x8000 then
				local temp = num_from_u32(-data_1 + 0x10000, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_n32(num)
			local data_1, _ = num_into_u32(num)

			if data_1 >= 0x80000000 then
				local temp = num_from_u32(-data_1 + 0x100000000, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_i32(num)
			if num >= 0x80000000 then
				local temp = num_from_u32(-num + 0x100000000, 0)

				return num_negate(temp)
			else
				return num_from_u32(num, 0)
			end
		end

		function extend.i64_u32(num)
			return num_from_u32(num, 0)
		end

		convert.f32_i32 = to_i32
		convert.f32_u32 = no_op

		function convert.f32_i64(num)
			if num_is_negative(num) then
				local temp = num_negate(num)

				return -num_into_u64(temp)
			else
				return num_into_u64(num)
			end
		end

		convert.f32_u64 = num_into_u64
		convert.f64_i32 = to_i32
		convert.f64_u32 = no_op
		convert.f64_i64 = convert.f32_i64
		convert.f64_u64 = num_into_u64

		demote.f32_f64 = no_op

		promote.f64_f32 = no_op

		function reinterpret.i32_f32(num)
			local packed = string_pack("f", num)

			return string_unpack("I4", packed)
		end

		function reinterpret.i64_f64(num)
			local packed = string_pack("d", num)
			local data_1, data_2 = string_unpack("I4I4", packed)

			return num_from_u32(data_1, data_2)
		end

		function reinterpret.f32_i32(num)
			local packed = string_pack("I4", num)

			return string_unpack("f", packed)
		end

		function reinterpret.f64_i64(num)
			local data_1, data_2 = num_into_u32(num)
			local packed = string_pack("I4I4", data_1, data_2)

			return string_unpack("d", packed)
		end

		module.wrap = wrap
		module.truncate = truncate
		module.saturate = saturate
		module.extend = extend
		module.convert = convert
		module.demote = demote
		module.promote = promote
		module.reinterpret = reinterpret
	end

	do
		local load = {}
		local store = {}
		local allocator = {}

		local bit_extract = bit32.extract
		local bit_replace = bit32.replace

		local math_floor = math.floor

		local string_byte = string.byte
		local string_char = string.char
		local string_unpack = string.unpack

		local reinterpret_f32_i32 = module.reinterpret.f32_i32
		local reinterpret_f64_i64 = module.reinterpret.f64_i64
		local reinterpret_i32_f32 = module.reinterpret.i32_f32
		local reinterpret_i64_f64 = module.reinterpret.i64_f64

		local function load_byte(data, addr)
			local value = data[math_floor(addr / 4)] or 0

			return bit_extract(value, addr % 4 * 8, 8)
		end

		local function store_byte(data, addr, value)
			local adjust = math_floor(addr / 4)

			data[adjust] = bit_replace(data[adjust] or 0, value, addr % 4 * 8, 8)
		end

		function load.i32_i8(memory, addr)
			local temp = load_byte(memory.data, addr)

			if temp >= 0x80 then
				return to_u32(temp - 0x100)
			else
				return temp
			end
		end

		function load.i32_u8(memory, addr)
			return load_byte(memory.data, addr)
		end

		function load.i32_i16(memory, addr)
			local data = memory.data
			local temp

			if addr % 4 == 0 then
				temp = bit_and(data[addr / 4] or 0, 0xFFFF)
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)

				temp = bit_or(b1, b2)
			end

			if temp >= 0x8000 then
				return to_u32(temp - 0x10000)
			else
				return temp
			end
		end

		function load.i32_u16(memory, addr)
			local data = memory.data

			if addr % 4 == 0 then
				return bit_and(data[addr / 4] or 0, 0xFFFF)
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)

				return bit_or(b1, b2)
			end
		end

		function load.i32(memory, addr)
			local data = memory.data

			if addr % 4 == 0 then
				-- aligned read
				return data[addr / 4] or 0
			else
				-- unaligned read
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)
				local b3 = bit_lshift(load_byte(data, addr + 2), 16)
				local b4 = bit_lshift(load_byte(data, addr + 3), 24)

				return bit_or(b1, b2, b3, b4)
			end
		end

		function load.i64_i8(memory, addr)
			local data_1 = load_byte(memory.data, addr)
			local data_2

			if data_1 >= 0x80 then
				data_1 = to_u32(data_1 - 0x100)
				data_2 = 0xFFFFFFFF
			else
				data_2 = 0
			end

			return num_from_u32(data_1, data_2)
		end

		function load.i64_u8(memory, addr)
			local temp = load_byte(memory.data, addr)

			return num_from_u32(temp, 0)
		end

		function load.i64_i16(memory, addr)
			local data = memory.data
			local data_1, data_2

			if addr % 4 == 0 then
				data_1 = bit_and(data[addr / 4] or 0, 0xFFFF)
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)

				data_1 = bit_or(b1, b2)
			end

			if data_1 >= 0x8000 then
				data_1 = to_u32(data_1 - 0x10000)
				data_2 = 0xFFFFFFFF
			else
				data_2 = 0
			end

			return num_from_u32(data_1, data_2)
		end

		function load.i64_u16(memory, addr)
			local data = memory.data
			local temp

			if addr % 4 == 0 then
				temp = bit_and(data[addr / 4] or 0, 0xFFFF)
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)

				temp = bit_or(b1, b2)
			end

			return num_from_u32(temp, 0)
		end

		function load.i64_i32(memory, addr)
			local data = memory.data
			local data_1, data_2

			if addr % 4 == 0 then
				data_1 = data[addr / 4] or 0
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)
				local b3 = bit_lshift(load_byte(data, addr + 2), 16)
				local b4 = bit_lshift(load_byte(data, addr + 3), 24)

				data_1 = bit_or(b1, b2, b3, b4)
			end

			if data_1 >= 0x80000000 then
				data_1 = to_u32(data_1 - 0x100000000)
				data_2 = 0xFFFFFFFF
			else
				data_2 = 0
			end

			return num_from_u32(data_1, data_2)
		end

		function load.i64_u32(memory, addr)
			local data = memory.data
			local temp

			if addr % 4 == 0 then
				temp = data[addr / 4] or 0
			else
				local b1 = load_byte(data, addr)
				local b2 = bit_lshift(load_byte(data, addr + 1), 8)
				local b3 = bit_lshift(load_byte(data, addr + 2), 16)
				local b4 = bit_lshift(load_byte(data, addr + 3), 24)

				temp = bit_or(b1, b2, b3, b4)
			end

			return num_from_u32(temp, 0)
		end

		local load_i32 = load.i32

		function load.i64(memory, addr)
			local data_1 = load_i32(memory, addr)
			local data_2 = load_i32(memory, addr + 4)

			return num_from_u32(data_1, data_2)
		end

		local load_i64 = load.i64

		function load.f32(memory, addr)
			local raw = load_i32(memory, addr)

			return reinterpret_f32_i32(raw)
		end

		function load.f64(memory, addr)
			local raw = load_i64(memory, addr)

			return reinterpret_f64_i64(raw)
		end

		function load.string(memory, addr, len)
			local buffer = table.create(len)
			local data = memory.data

			for i = 1, len do
				local raw = load_byte(data, addr + i - 1)

				buffer[i] = string_char(raw)
			end

			return table.concat(buffer)
		end

		function store.i32_n8(memory, addr, value)
			store_byte(memory.data, addr, value)
		end

		local store_i8 = store.i32_n8

		function store.i32_n16(memory, addr, value)
			store_byte(memory.data, addr, value)
			store_byte(memory.data, addr + 1, bit_rshift(value, 8))
		end

		function store.i32(memory, addr, value)
			local data = memory.data

			if addr % 4 == 0 then
				-- aligned write
				data[addr / 4] = value
			else
				-- unaligned write
				store_byte(data, addr, value)
				store_byte(data, addr + 1, bit_rshift(value, 8))
				store_byte(data, addr + 2, bit_rshift(value, 16))
				store_byte(data, addr + 3, bit_rshift(value, 24))
			end
		end

		local store_i32 = store.i32
		local store_i32_n8 = store.i32_n8
		local store_i32_n16 = store.i32_n16

		function store.i64_n8(memory, addr, value)
			local data_1, _ = num_into_u32(value)

			store_i32_n8(memory, addr, data_1)
		end

		function store.i64_n16(memory, addr, value)
			local data_1, _ = num_into_u32(value)

			store_i32_n16(memory, addr, data_1)
		end

		function store.i64_n32(memory, addr, value)
			local data_1, _ = num_into_u32(value)

			store_i32(memory, addr, data_1)
		end

		function store.i64(memory, addr, value)
			local data_1, data_2 = num_into_u32(value)

			store_i32(memory, addr, data_1)
			store_i32(memory, addr + 4, data_2)
		end

		local store_i64 = store.i64

		function store.f32(memory, addr, value)
			store_i32(memory, addr, reinterpret_i32_f32(value))
		end

		function store.f64(memory, addr, value)
			store_i64(memory, addr, reinterpret_i64_f64(value))
		end

		function store.string(memory, addr, data, len)
			len = len or #data

			local rem = len % 4

			for i = 1, len - rem, 4 do
				local v = string_unpack("<I4", data, i)

				store_i32(memory, addr + i - 1, v)
			end

			for i = len - rem + 1, len do
				local v = string_byte(data, i)

				store_i8(memory, addr + i - 1, v)
			end
		end

		function allocator.new(min, max)
			return { min = min, max = max, data = {} }
		end

		function allocator.grow(memory, num)
			local old = memory.min
			local new = old + num

			if new > memory.max then
				return to_u32(-1)
			else
				memory.min = new

				return old
			end
		end

		module.load = load
		module.store = store
		module.allocator = allocator
	end

	return module
end)()

return rt
 ]===]
_28830117e3baedd365834b28af51c4f0.Parent = _275170f7ba107d65bf3497952d51abbe

local _3429d6548d0980abf8edfb41212ed4b7 = Instance.new("ModuleScript")
_3429d6548d0980abf8edfb41212ed4b7.Name = "util"
sourceMap[_3429d6548d0980abf8edfb41212ed4b7] = [===[ return function(rt, wasm, memory)
	local function_table = wasm.table_list.__indirect_function_table;
	local stackPtr = wasm.global_list.__stack_pointer;

	local pointers = { last = 0 };
	local function createPointer(value)
		local id = pointers.last;
		if (id == 0) then
			id = #pointers + 1;
		else
			pointers.last = pointers[id];
		end
		pointers[id] = value;
		return id;
	end

	local function getPointer(id)
		return pointers[id];
	end

	local function dropPointer(id)
		pointers[id] = pointers.last;
		pointers.last = id;
	end

	local function pushStack(bytes)
		local stack_loc = stackPtr.value - bytes;
		stackPtr.value = stack_loc;

		return stack_loc;
	end

	local function popStack(stack_loc, bytes)
		stackPtr.value = stack_loc + bytes;
	end

	local function invokeFunction(data, vtable, ...)
		function_table.data[rt.load.i32(memory, vtable + 12)](data, ...);
	end

	local function dropFunctionRef(data, vtable)
		wasm.func_list.__drop_box_dyn_fn(data, vtable);
	end

	-- Usable on FnOnce()
	-- FnOnce() will clean itself up, so dropFunctionRef is unnecessary
	local function invokeOnce(data, vtable, ...)
		return invokeFunction(data, vtable, ...);
	end

	local function allocString(text)
		local vec = wasm.func_list.__heap_alloc_string(#text);
		for i = 1, #text do
			rt.store.i32_n8(memory, vec + i - 1, string.byte(text, i, i));
		end
		return vec;
	end

	local function readString(addr, len)
		local s = "";
		for i = 1, len do
			s ..= string.char(rt.load.i32_u8(memory, addr + i - 1));
		end
		return s;
	end

	return {
		writeStringReturn = writeStringReturn,
		dropFunctionRef = dropFunctionRef,
		invokeFunction = invokeFunction,
		createPointer = createPointer,
		dropPointer = dropPointer,
		readString = readString,
		getPointer = getPointer,
		invokeOnce = invokeOnce,
		pushStack = pushStack,
		popStack = popStack,
	}
end
 ]===]
_3429d6548d0980abf8edfb41212ed4b7.Parent = _275170f7ba107d65bf3497952d51abbe

local _cc239723a627cd433ffbbe0fdacfcfb0 = Instance.new("ModuleScript")
_cc239723a627cd433ffbbe0fdacfcfb0.Name = "wasm"
sourceMap[_cc239723a627cd433ffbbe0fdacfcfb0] = [===[ local Integer = (function()
local Numeric = {}

local NUM_ZERO, NUM_ONE, NUM_SIX_FOUR
local NUM_BIT_26, NUM_BIT_52

local bit_lshift = bit32.lshift
local bit_rshift = bit32.rshift
local bit_arshift = bit32.arshift

local bit_and = bit32.band
local bit_or = bit32.bor
local bit_xor = bit32.bxor
local bit_not = bit32.bnot

local bit_extract = bit32.extract
local bit_replace = bit32.replace

local from_u32, from_u64, into_u64
local num_subtract, num_divide_unsigned, num_negate
local num_or, num_shift_left, num_shift_right_unsigned
local num_is_negative, num_is_zero, num_is_less_unsigned

-- X: a[0 ..21]
-- Y: a[22..31]
--  | b[0 ..11]
-- Z: b[12..31]
local constructor = Vector3.new

function Numeric.from_u32(data_1, data_2)
	local x = bit_and(data_1, 0x3FFFFF)
	local y = bit_and(data_2, 0x3FFFFF)
	local z = bit_replace(bit_rshift(data_1, 22), bit_rshift(data_2, 22), 10, 10)

	return constructor(x, y, z)
end

local function load_d1(value)
	return bit_replace(bit_and(value.X, 0x3FFFFF), value.Z, 22, 10)
end

local function load_d2(value)
	return bit_replace(bit_and(value.Y, 0x3FFFFF), bit_rshift(value.Z, 10), 22, 10)
end

function Numeric.into_u32(value)
	return load_d1(value), load_d2(value)
end

function Numeric.from_u64(value)
	return from_u32(bit_and(value % 0x100000000), bit_and(value / 0x100000000))
end

function Numeric.into_u64(value)
	return load_d1(value) + load_d2(value) * 0x100000000
end

function Numeric.add(lhs, rhs)
	local data_1 = load_d1(lhs) + load_d1(rhs)
	local data_2 = load_d2(lhs) + load_d2(rhs)

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return from_u32(data_1, data_2)
end

function Numeric.subtract(lhs, rhs)
	local data_1 = load_d1(lhs) - load_d1(rhs)
	local data_2 = load_d2(lhs) - load_d2(rhs)

	if data_1 < 0 then
		data_1 = data_1 + 0x100000000
		data_2 = data_2 - 1
	end

	if data_2 < 0 then
		data_2 = data_2 + 0x100000000
	end

	return from_u32(data_1, data_2)
end

function Numeric.multiply(lhs, rhs)
	if num_is_zero(lhs) or num_is_zero(rhs) then
		return NUM_ZERO
	elseif num_is_less_unsigned(lhs, NUM_BIT_26) and num_is_less_unsigned(rhs, NUM_BIT_26) then
		return from_u64(load_d1(lhs) * load_d1(rhs))
	end

	-- Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	-- We can skip products that would overflow.
	local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)
	local rhs_1, rhs_2 = load_d1(rhs), load_d2(rhs)

	local a48 = bit_rshift(lhs_2, 16)
	local a32 = bit_and(lhs_2, 0xFFFF)
	local a16 = bit_rshift(lhs_1, 16)
	local a00 = bit_and(lhs_1, 0xFFFF)

	local b48 = bit_rshift(rhs_2, 16)
	local b32 = bit_and(rhs_2, 0xFFFF)
	local b16 = bit_rshift(rhs_1, 16)
	local b00 = bit_and(rhs_1, 0xFFFF)

	local c00 = a00 * b00
	local c16 = bit_rshift(c00, 16)

	c00 = bit_and(c00, 0xFFFF)
	c16 = c16 + a16 * b00

	local c32 = bit_rshift(c16, 16)

	c16 = bit_and(c16, 0xFFFF)
	c16 = c16 + a00 * b16
	c32 = c32 + bit_rshift(c16, 16)
	c16 = bit_and(c16, 0xFFFF)
	c32 = c32 + a32 * b00

	local c48 = bit_rshift(c32, 16)

	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a16 * b16
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a00 * b32
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c48 = c48 + a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
	c48 = bit_and(c48, 0xFFFF)

	local data_1 = bit_replace(c00, c16, 16, 16)
	local data_2 = bit_replace(c32, c48, 16, 16)

	return from_u32(data_1, data_2)
end

function Numeric.divide_unsigned(lhs, rhs)
	if num_is_zero(rhs) then
		error("division by zero")
	elseif num_is_zero(lhs) then
		return NUM_ZERO, NUM_ZERO
	elseif num_is_less_unsigned(lhs, NUM_BIT_52) and num_is_less_unsigned(rhs, NUM_BIT_52) then
		local lhs_u = into_u64(lhs)
		local rhs_u = into_u64(rhs)

		return from_u64(lhs_u / rhs_u), from_u64(lhs_u % rhs_u)
	end

	local quotient = NUM_ZERO
	local remainder = NUM_ZERO

	local num_1, num_2 = load_d1(lhs), load_d2(lhs)

	for i = 63, 0, -1 do
		local temp = num_shift_left(remainder, NUM_ONE)
		local rem_1, rem_2 = load_d1(temp), load_d2(temp)

		if i > 31 then
			rem_1 = bit_or(rem_1, bit_extract(num_2, i - 32, 1))
		else
			rem_1 = bit_or(rem_1, bit_extract(num_1, i, 1))
		end

		remainder = from_u32(rem_1, rem_2)

		if not num_is_less_unsigned(remainder, rhs) then
			remainder = num_subtract(remainder, rhs)
			quotient = num_or(quotient, num_shift_left(NUM_ONE, from_u32(i, 0)))
		end
	end

	return quotient, remainder
end

function Numeric.divide_signed(lhs, rhs)
	local left_negative = num_is_negative(lhs)
	local right_negative = num_is_negative(rhs)

	if left_negative then
		lhs = num_negate(lhs)
	end

	if right_negative then
		rhs = num_negate(rhs)
	end

	local quotient, remainder = num_divide_unsigned(lhs, rhs)

	if left_negative ~= right_negative then
		quotient = num_negate(quotient)
	end

	if left_negative then
		remainder = num_negate(remainder)
	end

	return quotient, remainder
end

function Numeric.negate(value)
	local data_1 = bit_not(load_d1(value)) + 1
	local data_2 = bit_not(load_d2(value))

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return from_u32(data_1, data_2)
end

function Numeric.bit_and(lhs, rhs)
	local x = bit_and(lhs.X, rhs.X)
	local y = bit_and(lhs.Y, rhs.Y)
	local z = bit_and(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

function Numeric.bit_not(value)
	local x = bit_and(bit_not(value.X), 0xFFFFFF)
	local y = bit_and(bit_not(value.Y), 0xFFFFFF)
	local z = bit_and(bit_not(value.Z), 0xFFFFFF)

	return constructor(x, y, z)
end

function Numeric.bit_or(lhs, rhs)
	local x = bit_or(lhs.X, rhs.X)
	local y = bit_or(lhs.Y, rhs.Y)
	local z = bit_or(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

function Numeric.bit_xor(lhs, rhs)
	local x = bit_xor(lhs.X, rhs.X)
	local y = bit_xor(lhs.Y, rhs.Y)
	local z = bit_xor(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

function Numeric.shift_left(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local pad = 32 - count
		local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

		local data_1 = bit_lshift(lhs_1, count)
		local data_2 = bit_replace(bit_rshift(lhs_1, pad), lhs_2, count, pad)

		return from_u32(data_1, data_2)
	else
		local lhs_1 = load_d1(lhs)

		return from_u32(0, bit_lshift(lhs_1, count - 32))
	end
end

function Numeric.shift_right_unsigned(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_rshift(lhs_2, count)

		return from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		return from_u32(bit_rshift(lhs_2, count - 32), 0)
	end
end

function Numeric.shift_right_signed(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = load_d1(lhs), load_d2(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_arshift(lhs_2, count)

		return from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		local data_1 = bit_arshift(lhs_2, count - 32)
		local data_2 = lhs_2 >= 0x80000000 and 0xFFFFFFFF or 0

		return from_u32(data_1, data_2)
	end
end

function Numeric.rotate_left(lhs, rhs)
	if num_is_zero(rhs) then
		return lhs
	else
		local data_1 = num_shift_left(lhs, rhs)
		local data_2 = num_shift_right_unsigned(lhs, num_subtract(NUM_SIX_FOUR, rhs))

		return num_or(data_1, data_2)
	end
end

function Numeric.rotate_right(lhs, rhs)
	if num_is_zero(rhs) then
		return lhs
	else
		local data_1 = num_shift_right_unsigned(lhs, rhs)
		local data_2 = num_shift_left(lhs, num_subtract(NUM_SIX_FOUR, rhs))

		return num_or(data_1, data_2)
	end
end

function Numeric.is_negative(value)
	return value.Z >= 0x80000
end

function Numeric.is_zero(value)
	return value.X == 0 and value.Y == 0 and value.Z == 0
end

function Numeric.is_equal(lhs, rhs)
	return lhs.X == rhs.X and lhs.Y == rhs.Y and lhs.Z == rhs.Z
end

function Numeric.is_less_unsigned(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 < data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) < load_d1(rhs))
end

function Numeric.is_greater_unsigned(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 > data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) > load_d1(rhs))
end

function Numeric.is_less_signed(lhs, rhs)
	local neg_a = num_is_negative(lhs)
	local neg_b = num_is_negative(rhs)

	if neg_a and not neg_b then
		return true
	elseif not neg_a and neg_b then
		return false
	else
		return num_is_negative(num_subtract(lhs, rhs))
	end
end

function Numeric.is_greater_signed(lhs, rhs)
	local neg_a = num_is_negative(lhs)
	local neg_b = num_is_negative(rhs)

	if neg_a and not neg_b then
		return false
	elseif not neg_a and neg_b then
		return true
	else
		return num_is_negative(num_subtract(rhs, lhs))
	end
end

from_u32 = Numeric.from_u32
from_u64 = Numeric.from_u64
into_u64 = Numeric.into_u64

num_subtract = Numeric.subtract
num_divide_unsigned = Numeric.divide_unsigned
num_negate = Numeric.negate

num_or = Numeric.bit_or
num_shift_left = Numeric.shift_left
num_shift_right_unsigned = Numeric.shift_right_unsigned

num_is_negative = Numeric.is_negative
num_is_zero = Numeric.is_zero
num_is_less_unsigned = Numeric.is_less_unsigned

NUM_ZERO = from_u64(0)
NUM_ONE = from_u64(1)
NUM_SIX_FOUR = from_u64(64)
NUM_BIT_26 = from_u64(0x4000000)
NUM_BIT_52 = from_u64(0x10000000000000)

Numeric.ZERO = NUM_ZERO
Numeric.ONE = NUM_ONE

return table.freeze(Numeric)

end)()
local rt = (function()
local module = {}

local to_u32 = bit32.band

local bit_or = bit32.bor
local bit_and = bit32.band
local bit_lshift = bit32.lshift
local bit_rshift = bit32.rshift

local num_from_u32 = Integer.from_u32
local num_into_u32 = Integer.into_u32

local function to_i32(num)
	if num >= 0x80000000 then
		return num - 0x100000000
	else
		return num
	end
end

local function no_op(num)
	return num
end

module.i64 = Integer

do
	local add = {}
	local sub = {}
	local mul = {}
	local div = {}
	local rem = {}
	local neg = {}
	local min = {}
	local max = {}
	local copysign = {}
	local nearest = {}

	local assert = assert

	local math_abs = math.abs
	local math_fmod = math.fmod
	local math_modf = math.modf
	local math_round = math.round
	local math_sign = math.sign
	local math_min = math.min
	local math_max = math.max

	local string_byte = string.byte
	local string_pack = string.pack

	local num_divide_signed = Integer.divide_signed
	local num_divide_unsigned = Integer.divide_unsigned

	function add.i32(lhs, rhs)
		return to_u32(lhs + rhs)
	end

	function sub.i32(lhs, rhs)
		return to_u32(lhs - rhs)
	end

	function mul.i32(lhs, rhs)
		if (lhs + rhs) < 0x8000000 then
			return to_u32(lhs * rhs)
		else
			local a16 = bit_rshift(lhs, 16)
			local a00 = bit_and(lhs, 0xFFFF)
			local b16 = bit_rshift(rhs, 16)
			local b00 = bit_and(rhs, 0xFFFF)

			local c00 = a00 * b00
			local c16 = a16 * b00 + a00 * b16

			return to_u32(c00 + bit_lshift(c16, 16))
		end
	end

	function div.i32(lhs, rhs)
		assert(rhs ~= 0, "division by zero")

		lhs = to_i32(lhs)
		rhs = to_i32(rhs)

		return to_u32((math_modf(lhs / rhs)))
	end

	function div.u32(lhs, rhs)
		assert(rhs ~= 0, "division by zero")

		return to_u32((math_modf(lhs / rhs)))
	end

	function rem.i32(lhs, rhs)
		assert(rhs ~= 0, "division by zero")

		lhs = to_i32(lhs)
		rhs = to_i32(rhs)

		return to_u32(math_fmod(lhs, rhs))
	end

	add.i64 = Integer.add
	sub.i64 = Integer.subtract
	mul.i64 = Integer.multiply
	div.i64 = num_divide_signed

	function rem.i64(lhs, rhs)
		local _, remainder = num_divide_signed(lhs, rhs)

		return remainder
	end

	div.u64 = num_divide_unsigned

	function rem.u64(lhs, rhs)
		local _, remainder = num_divide_unsigned(lhs, rhs)

		return remainder
	end

	function neg.f32(num)
		return -num
	end

	function min.f32(lhs, rhs)
		if rhs == rhs then
			return math_min(lhs, rhs)
		else
			return rhs
		end
	end

	function max.f32(lhs, rhs)
		if rhs == rhs then
			return math_max(lhs, rhs)
		else
			return rhs
		end
	end

	function copysign.f32(lhs, rhs)
		local packed = string_pack("<d", rhs)
		local sign = string_byte(packed, 8)

		if sign >= 0x80 then
			return -math_abs(lhs)
		else
			return math_abs(lhs)
		end
	end

	function nearest.f32(num)
		local result = math_round(num)

		if (math_abs(num) + 0.5) % 2 == 1 then
			result = result - math_sign(result)
		end

		return result
	end

	neg.f64 = neg.f32
	min.f64 = min.f32
	max.f64 = max.f32
	copysign.f64 = copysign.f32
	nearest.f64 = nearest.f32

	module.add = add
	module.sub = sub
	module.mul = mul
	module.div = div
	module.rem = rem
	module.neg = neg
	module.min = min
	module.max = max
	module.copysign = copysign
	module.nearest = nearest
end

do
	local clz = {}
	local ctz = {}
	local popcnt = {}

	local bit_countlz = bit32.countlz
	local bit_countrz = bit32.countrz

	local function popcnt_i32(num)
		local count = 0

		while num ~= 0 do
			num = bit_and(num, num - 1)
			count = count + 1
		end

		return count
	end

	popcnt.i32 = popcnt_i32

	function clz.i64(num)
		local data_1, data_2 = num_into_u32(num)
		local temp

		if data_2 == 0 then
			temp = bit_countlz(data_1) + 32
		else
			temp = bit_countlz(data_2)
		end

		return num_from_u32(temp, 0)
	end

	function ctz.i64(num)
		local data_1, data_2 = num_into_u32(num)
		local temp

		if data_1 == 0 then
			temp = bit_countrz(data_2) + 32
		else
			temp = bit_countrz(data_1)
		end

		return num_from_u32(temp, 0)
	end

	function popcnt.i64(num)
		local data_1, data_2 = num_into_u32(num)
		local temp = popcnt_i32(data_1) + popcnt_i32(data_2)

		return num_from_u32(temp, 0)
	end

	module.clz = clz
	module.ctz = ctz
	module.popcnt = popcnt
end

do
	local eq = {}
	local ne = {}
	local le = {}
	local lt = {}
	local ge = {}
	local gt = {}

	local num_is_equal = Integer.is_equal
	local num_is_less_signed = Integer.is_less_signed
	local num_is_less_unsigned = Integer.is_less_unsigned
	local num_is_greater_signed = Integer.is_greater_signed
	local num_is_greater_unsigned = Integer.is_greater_unsigned

	function le.i32(lhs, rhs)
		return to_i32(lhs) <= to_i32(rhs)
	end

	function lt.i32(lhs, rhs)
		return to_i32(lhs) < to_i32(rhs)
	end

	function ge.i32(lhs, rhs)
		return to_i32(lhs) >= to_i32(rhs)
	end

	function gt.i32(lhs, rhs)
		return to_i32(lhs) > to_i32(rhs)
	end

	eq.i64 = num_is_equal

	function ne.i64(lhs, rhs)
		return not num_is_equal(lhs, rhs)
	end

	function le.i64(lhs, rhs)
		return num_is_less_signed(lhs, rhs) or num_is_equal(lhs, rhs)
	end

	function le.u64(lhs, rhs)
		return num_is_less_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
	end

	lt.i64 = num_is_less_signed
	lt.u64 = num_is_less_unsigned

	function ge.i64(lhs, rhs)
		return num_is_greater_signed(lhs, rhs) or num_is_equal(lhs, rhs)
	end

	function ge.u64(lhs, rhs)
		return num_is_greater_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
	end

	gt.i64 = num_is_greater_signed
	gt.u64 = num_is_greater_unsigned

	module.eq = eq
	module.ne = ne
	module.le = le
	module.lt = lt
	module.ge = ge
	module.gt = gt
end

do
	local band = {}
	local bor = {}
	local bxor = {}
	local bnot = {}

	band.i64 = Integer.bit_and
	bor.i64 = Integer.bit_or
	bxor.i64 = Integer.bit_xor
	bnot.i64 = Integer.bit_not

	module.band = band
	module.bor = bor
	module.bxor = bxor
	module.bnot = bnot
end

do
	local shl = {}
	local shr = {}
	local rotl = {}
	local rotr = {}

	local bit_arshift = bit32.arshift
	local bit_lrotate = bit32.lrotate
	local bit_rrotate = bit32.rrotate

	function shl.i32(lhs, rhs)
		return bit_lshift(lhs, rhs % 32)
	end

	function shr.u32(lhs, rhs)
		return bit_rshift(lhs, rhs % 32)
	end

	function shr.i32(lhs, rhs)
		return bit_arshift(lhs, rhs % 32)
	end

	function rotl.i32(lhs, rhs)
		return bit_lrotate(lhs, rhs % 32)
	end

	function rotr.i32(lhs, rhs)
		return bit_rrotate(lhs, rhs % 32)
	end

	shl.i64 = Integer.shift_left
	shr.i64 = Integer.shift_right_signed
	shr.u64 = Integer.shift_right_unsigned
	rotl.i64 = Integer.rotate_left
	rotr.i64 = Integer.rotate_right

	module.shl = shl
	module.shr = shr
	module.rotl = rotl
	module.rotr = rotr
end

do
	local wrap = {}
	local truncate = {}
	local saturate = {}
	local extend = {}
	local convert = {}
	local demote = {}
	local promote = {}
	local reinterpret = {}

	local math_ceil = math.ceil
	local math_floor = math.floor
	local math_clamp = math.clamp

	local string_pack = string.pack
	local string_unpack = string.unpack

	local NUM_ZERO = Integer.ZERO
	local NUM_MIN_I64 = num_from_u32(0, 0x80000000)
	local NUM_MAX_I64 = num_from_u32(0xFFFFFFFF, 0x7FFFFFFF)
	local NUM_MAX_U64 = num_from_u32(0xFFFFFFFF, 0xFFFFFFFF)

	local num_from_u64 = Integer.from_u64
	local num_into_u64 = Integer.into_u64

	local num_negate = Integer.negate
	local num_is_negative = Integer.is_negative

	local function truncate_f64(num)
		if num >= 0 then
			return math_floor(num)
		else
			return math_ceil(num)
		end
	end

	function wrap.i32_i64(num)
		local data_1, _ = num_into_u32(num)

		return data_1
	end

	function truncate.i32_f32(num)
		return to_u32(truncate_f64(num))
	end

	truncate.i32_f64 = to_u32
	truncate.u32_f32 = truncate_f64
	truncate.u32_f64 = truncate_f64

	function truncate.i64_f32(num)
		if num < 0 then
			local temp = num_from_u64(-num)

			return num_negate(temp)
		else
			return num_from_u64(num)
		end
	end

	truncate.i64_f64 = truncate.i64_f32

	function truncate.u64_f32(num)
		if num <= 0 then
			return NUM_ZERO
		else
			return num_from_u64(math_floor(num))
		end
	end

	truncate.u64_f64 = truncate.u64_f32

	truncate.f32 = truncate_f64
	truncate.f64 = truncate_f64

	function saturate.i32_f32(num)
		local temp = math_clamp(truncate_f64(num), -0x80000000, 0x7FFFFFFF)

		return to_u32(temp)
	end

	saturate.i32_f64 = saturate.i32_f32

	function saturate.u32_f32(num)
		local temp = math_clamp(truncate_f64(num), 0, 0xFFFFFFFF)

		return to_u32(temp)
	end

	saturate.u32_f64 = saturate.u32_f32

	local truncate_i64_f64 = truncate.i64_f64

	function saturate.i64_f32(num)
		if num >= 2 ^ 63 - 1 then
			return NUM_MAX_I64
		elseif num <= -2 ^ 63 then
			return NUM_MIN_I64
		else
			return truncate_i64_f64(num)
		end
	end

	saturate.i64_f64 = saturate.i64_f32

	function saturate.u64_f32(num)
		if num >= 2 ^ 64 then
			return NUM_MAX_U64
		elseif num <= 0 then
			return NUM_ZERO
		else
			return truncate_i64_f64(num)
		end
	end

	saturate.u64_f64 = saturate.u64_f32

	function extend.i32_n8(num)
		num = bit_and(num, 0xFF)

		if num >= 0x80 then
			return to_u32(num - 0x100)
		else
			return num
		end
	end

	function extend.i32_n16(num)
		num = bit_and(num, 0xFFFF)

		if num >= 0x8000 then
			return to_u32(num - 0x10000)
		else
			return num
		end
	end

	function extend.i64_n8(num)
		local data_1, _ = num_into_u32(num)

		data_1 = bit_and(data_1, 0xFF)

		if data_1 >= 0x80 then
			local temp = num_from_u32(-data_1 + 0x100, 0)

			return num_negate(temp)
		else
			return num_from_u32(data_1, 0)
		end
	end

	function extend.i64_n16(num)
		local data_1, _ = num_into_u32(num)

		data_1 = bit_and(data_1, 0xFFFF)

		if data_1 >= 0x8000 then
			local temp = num_from_u32(-data_1 + 0x10000, 0)

			return num_negate(temp)
		else
			return num_from_u32(data_1, 0)
		end
	end

	function extend.i64_n32(num)
		local data_1, _ = num_into_u32(num)

		if data_1 >= 0x80000000 then
			local temp = num_from_u32(-data_1 + 0x100000000, 0)

			return num_negate(temp)
		else
			return num_from_u32(data_1, 0)
		end
	end

	function extend.i64_i32(num)
		if num >= 0x80000000 then
			local temp = num_from_u32(-num + 0x100000000, 0)

			return num_negate(temp)
		else
			return num_from_u32(num, 0)
		end
	end

	function extend.i64_u32(num)
		return num_from_u32(num, 0)
	end

	convert.f32_i32 = to_i32
	convert.f32_u32 = no_op

	function convert.f32_i64(num)
		if num_is_negative(num) then
			local temp = num_negate(num)

			return -num_into_u64(temp)
		else
			return num_into_u64(num)
		end
	end

	convert.f32_u64 = num_into_u64
	convert.f64_i32 = to_i32
	convert.f64_u32 = no_op
	convert.f64_i64 = convert.f32_i64
	convert.f64_u64 = num_into_u64

	demote.f32_f64 = no_op

	promote.f64_f32 = no_op

	function reinterpret.i32_f32(num)
		local packed = string_pack("f", num)

		return string_unpack("I4", packed)
	end

	function reinterpret.i64_f64(num)
		local packed = string_pack("d", num)
		local data_1, data_2 = string_unpack("I4I4", packed)

		return num_from_u32(data_1, data_2)
	end

	function reinterpret.f32_i32(num)
		local packed = string_pack("I4", num)

		return string_unpack("f", packed)
	end

	function reinterpret.f64_i64(num)
		local data_1, data_2 = num_into_u32(num)
		local packed = string_pack("I4I4", data_1, data_2)

		return string_unpack("d", packed)
	end

	module.wrap = wrap
	module.truncate = truncate
	module.saturate = saturate
	module.extend = extend
	module.convert = convert
	module.demote = demote
	module.promote = promote
	module.reinterpret = reinterpret
end

do
	local load = {}
	local store = {}
	local allocator = {}

	local bit_extract = bit32.extract
	local bit_replace = bit32.replace

	local math_floor = math.floor

	local string_byte = string.byte
	local string_char = string.char
	local string_unpack = string.unpack

	local reinterpret_f32_i32 = module.reinterpret.f32_i32
	local reinterpret_f64_i64 = module.reinterpret.f64_i64
	local reinterpret_i32_f32 = module.reinterpret.i32_f32
	local reinterpret_i64_f64 = module.reinterpret.i64_f64

	local function load_byte(data, addr)
		local value = data[math_floor(addr / 4)] or 0

		return bit_extract(value, addr % 4 * 8, 8)
	end

	local function store_byte(data, addr, value)
		local adjust = math_floor(addr / 4)

		data[adjust] = bit_replace(data[adjust] or 0, value, addr % 4 * 8, 8)
	end

	function load.i32_i8(memory, addr)
		local temp = load_byte(memory.data, addr)

		if temp >= 0x80 then
			return to_u32(temp - 0x100)
		else
			return temp
		end
	end

	function load.i32_u8(memory, addr)
		return load_byte(memory.data, addr)
	end

	function load.i32_i16(memory, addr)
		local data = memory.data
		local temp

		if addr % 4 == 0 then
			temp = bit_and(data[addr / 4] or 0, 0xFFFF)
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)

			temp = bit_or(b1, b2)
		end

		if temp >= 0x8000 then
			return to_u32(temp - 0x10000)
		else
			return temp
		end
	end

	function load.i32_u16(memory, addr)
		local data = memory.data

		if addr % 4 == 0 then
			return bit_and(data[addr / 4] or 0, 0xFFFF)
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)

			return bit_or(b1, b2)
		end
	end

	function load.i32(memory, addr)
		local data = memory.data

		if addr % 4 == 0 then
			-- aligned read
			return data[addr / 4] or 0
		else
			-- unaligned read
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)
			local b3 = bit_lshift(load_byte(data, addr + 2), 16)
			local b4 = bit_lshift(load_byte(data, addr + 3), 24)

			return bit_or(b1, b2, b3, b4)
		end
	end

	function load.i64_i8(memory, addr)
		local data_1 = load_byte(memory.data, addr)
		local data_2

		if data_1 >= 0x80 then
			data_1 = to_u32(data_1 - 0x100)
			data_2 = 0xFFFFFFFF
		else
			data_2 = 0
		end

		return num_from_u32(data_1, data_2)
	end

	function load.i64_u8(memory, addr)
		local temp = load_byte(memory.data, addr)

		return num_from_u32(temp, 0)
	end

	function load.i64_i16(memory, addr)
		local data = memory.data
		local data_1, data_2

		if addr % 4 == 0 then
			data_1 = bit_and(data[addr / 4] or 0, 0xFFFF)
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)

			data_1 = bit_or(b1, b2)
		end

		if data_1 >= 0x8000 then
			data_1 = to_u32(data_1 - 0x10000)
			data_2 = 0xFFFFFFFF
		else
			data_2 = 0
		end

		return num_from_u32(data_1, data_2)
	end

	function load.i64_u16(memory, addr)
		local data = memory.data
		local temp

		if addr % 4 == 0 then
			temp = bit_and(data[addr / 4] or 0, 0xFFFF)
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)

			temp = bit_or(b1, b2)
		end

		return num_from_u32(temp, 0)
	end

	function load.i64_i32(memory, addr)
		local data = memory.data
		local data_1, data_2

		if addr % 4 == 0 then
			data_1 = data[addr / 4] or 0
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)
			local b3 = bit_lshift(load_byte(data, addr + 2), 16)
			local b4 = bit_lshift(load_byte(data, addr + 3), 24)

			data_1 = bit_or(b1, b2, b3, b4)
		end

		if data_1 >= 0x80000000 then
			data_1 = to_u32(data_1 - 0x100000000)
			data_2 = 0xFFFFFFFF
		else
			data_2 = 0
		end

		return num_from_u32(data_1, data_2)
	end

	function load.i64_u32(memory, addr)
		local data = memory.data
		local temp

		if addr % 4 == 0 then
			temp = data[addr / 4] or 0
		else
			local b1 = load_byte(data, addr)
			local b2 = bit_lshift(load_byte(data, addr + 1), 8)
			local b3 = bit_lshift(load_byte(data, addr + 2), 16)
			local b4 = bit_lshift(load_byte(data, addr + 3), 24)

			temp = bit_or(b1, b2, b3, b4)
		end

		return num_from_u32(temp, 0)
	end

	local load_i32 = load.i32

	function load.i64(memory, addr)
		local data_1 = load_i32(memory, addr)
		local data_2 = load_i32(memory, addr + 4)

		return num_from_u32(data_1, data_2)
	end

	local load_i64 = load.i64

	function load.f32(memory, addr)
		local raw = load_i32(memory, addr)

		return reinterpret_f32_i32(raw)
	end

	function load.f64(memory, addr)
		local raw = load_i64(memory, addr)

		return reinterpret_f64_i64(raw)
	end

	function load.string(memory, addr, len)
		local buffer = table.create(len)
		local data = memory.data

		for i = 1, len do
			local raw = load_byte(data, addr + i - 1)

			buffer[i] = string_char(raw)
		end

		return table.concat(buffer)
	end

	function store.i32_n8(memory, addr, value)
		store_byte(memory.data, addr, value)
	end

	function store.i32_n16(memory, addr, value)
		store_byte(memory.data, addr, value)
		store_byte(memory.data, addr + 1, bit_rshift(value, 8))
	end

	function store.i32(memory, addr, value)
		local data = memory.data

		if addr % 4 == 0 then
			-- aligned write
			data[addr / 4] = value
		else
			-- unaligned write
			store_byte(data, addr, value)
			store_byte(data, addr + 1, bit_rshift(value, 8))
			store_byte(data, addr + 2, bit_rshift(value, 16))
			store_byte(data, addr + 3, bit_rshift(value, 24))
		end
	end

	local store_i32 = store.i32
	local store_i32_n8 = store.i32_n8
	local store_i32_n16 = store.i32_n16

	function store.i64_n8(memory, addr, value)
		local data_1, _ = num_into_u32(value)

		store_i32_n8(memory, addr, data_1)
	end

	function store.i64_n16(memory, addr, value)
		local data_1, _ = num_into_u32(value)

		store_i32_n16(memory, addr, data_1)
	end

	function store.i64_n32(memory, addr, value)
		local data_1, _ = num_into_u32(value)

		store_i32(memory, addr, data_1)
	end

	function store.i64(memory, addr, value)
		local data_1, data_2 = num_into_u32(value)

		store_i32(memory, addr, data_1)
		store_i32(memory, addr + 4, data_2)
	end

	local store_i64 = store.i64

	function store.f32(memory, addr, value)
		store_i32(memory, addr, reinterpret_i32_f32(value))
	end

	function store.f64(memory, addr, value)
		store_i64(memory, addr, reinterpret_i64_f64(value))
	end

	function store.string(memory, addr, data, len)
		len = if len then len else #data

		local rem = len % 4

		for i = 1, len - rem, 4 do
			local v = string_unpack("<I4", data, i)

			store_i32(memory, addr + i - 1, v)
		end

		for i = len - rem + 1, len do
			local v = string_byte(data, i)

			store_i32_n8(memory, addr + i - 1, v)
		end
	end

	-- FIXME: `store.copy` and `store.fill` should be ideally using the same batched store as `store.string`
	function store.copy(memory_1, addr_1, memory_2, addr_2, len)
		local data_1 = memory_1.data
		local data_2 = memory_2.data

		if addr_1 <= addr_2 then
			for i = 1, len do
				local v = load_byte(data_2, addr_2 + i - 1)
	
				store_byte(data_1, addr_1 + i - 1, v)
			end
		else
			for i = len, 1, -1 do
				local v = load_byte(data_2, addr_2 + i - 1)
	
				store_byte(data_1, addr_1 + i - 1, v)
			end	
		end
	end

	function store.fill(memory, addr, len, value)
		local data = memory.data

		for i = 1, len do
			store_byte(data, addr + i - 1, value)
		end
	end

	function allocator.new(min, max)
		return { min = min, max = max, data = {} }
	end

	function allocator.grow(memory, num)
		local old = memory.min
		local new = old + num

		if new > memory.max then
			return to_u32(-1)
		else
			memory.min = new

			return old
		end
	end

	module.load = load
	module.store = store
	module.allocator = allocator
end

return module


end)()
local add_i32 = rt.add.i32
local add_i64 = rt.add.i64
local band_i32 = bit32.band
local band_i64 = rt.band.i64
local bor_i32 = bit32.bor
local bor_i64 = rt.bor.i64
local bxor_i32 = bit32.bxor
local bxor_i64 = rt.bxor.i64
local clz_i32 = bit32.countlz
local clz_i64 = rt.clz.i64
local convert_f64_i32 = rt.convert.f64_i32
local convert_f64_i64 = rt.convert.f64_i64
local convert_f64_u32 = rt.convert.f64_u32
local ctz_i64 = rt.ctz.i64
local demote_f32_f64 = rt.demote.f32_f64
local div_i32 = rt.div.i32
local div_i64 = rt.div.i64
local div_u32 = rt.div.u32
local div_u64 = rt.div.u64
local eq_i64 = rt.eq.i64
local extend_i32_n8 = rt.extend.i32_n8
local extend_i64_i32 = rt.extend.i64_i32
local extend_i64_n32 = rt.extend.i64_n32
local extend_i64_u32 = rt.extend.i64_u32
local ge_i32 = rt.ge.i32
local ge_i64 = rt.ge.i64
local ge_u64 = rt.ge.u64
local gt_i32 = rt.gt.i32
local gt_u64 = rt.gt.u64
local i64_ONE = rt.i64.ONE
local i64_ZERO = rt.i64.ZERO
local i64_from_u32 = rt.i64.from_u32
local le_i32 = rt.le.i32
local le_u64 = rt.le.u64
local load_f32 = rt.load.f32
local load_f64 = rt.load.f64
local load_i32 = rt.load.i32
local load_i32_i8 = rt.load.i32_i8
local load_i32_u16 = rt.load.i32_u16
local load_i32_u8 = rt.load.i32_u8
local load_i64 = rt.load.i64
local load_i64_i16 = rt.load.i64_i16
local load_i64_i32 = rt.load.i64_i32
local load_i64_i8 = rt.load.i64_i8
local load_i64_u16 = rt.load.i64_u16
local load_i64_u32 = rt.load.i64_u32
local load_i64_u8 = rt.load.i64_u8
local lt_i32 = rt.lt.i32
local lt_i64 = rt.lt.i64
local lt_u64 = rt.lt.u64
local mul_i32 = rt.mul.i32
local mul_i64 = rt.mul.i64
local ne_i64 = rt.ne.i64
local promote_f64_f32 = rt.promote.f64_f32
local rem_i32 = rt.rem.i32
local rem_i64 = rt.rem.i64
local rem_u64 = rt.rem.u64
local rotl_i64 = rt.rotl.i64
local shl_i32 = rt.shl.i32
local shl_i64 = rt.shl.i64
local shr_i32 = rt.shr.i32
local shr_i64 = rt.shr.i64
local shr_u32 = rt.shr.u32
local shr_u64 = rt.shr.u64
local store_f64 = rt.store.f64
local store_i32 = rt.store.i32
local store_i32_n16 = rt.store.i32_n16
local store_i32_n8 = rt.store.i32_n8
local store_i64 = rt.store.i64
local store_i64_n16 = rt.store.i64_n16
local store_i64_n32 = rt.store.i64_n32
local store_i64_n8 = rt.store.i64_n8
local sub_i32 = rt.sub.i32
local sub_i64 = rt.sub.i64
local truncate_u32_f64 = rt.truncate.u32_f64
local wrap_i32_i64 = rt.wrap.i32_i64
local memory_at_0
local FUNC_LIST = table.create(540)
local TABLE_LIST = table.create(0)
local MEMORY_LIST = table.create(0)
local GLOBAL_LIST = table.create(2)
FUNC_LIST[30] = --[[ _ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h8d23b53c106aa51fE ]] function(loc_0)
	while true do
		TABLE_LIST[0].data[loc_0]()
		break
	end
end
FUNC_LIST[31] = --[[ _ZN3std2rt10lang_start17h679c7dac37982e1dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 12, loc_0)
		reg_0 = FUNC_LIST[439](add_i32(loc_4, 12), 1048576, loc_1, loc_2, loc_3)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[32] = --[[ _ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h6b6461b42a199bd5E ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[30](load_i32(memory_at_0, loc_0))
		store_i32_n8(memory_at_0, loc_1 + 15, 0)
		reg_0 = FUNC_LIST[465](add_i32(loc_1, 15))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[33] = --[[ _ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hef6116388221ca55E ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		store_i32(memory_at_0, loc_1 + 12, load_i32(memory_at_0, loc_0))
		reg_0 = FUNC_LIST[32](add_i32(loc_1, 12))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[34] = --[[ _ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hf93e0b9beadf262fE ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	while true do
		FUNC_LIST[35](loc_0, loc_2)
		FUNC_LIST[36](loc_0)
		break
	end
end
FUNC_LIST[35] = --[[ _ZN86_$LT$roblox_rs..generated..RunService$u20$as$u20$roblox_rs..generated..IRunService$GT$12on_heartbeat28_$u7b$$u7b$closure$u7d$$u7d$17h0861d3fe1336ee20E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[341](loc_0)
		loc_3 = reg_0
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 4) + 16)](load_i32(memory_at_0, loc_3))
		loc_3 = reg_0
		loc_0 = add_i32(loc_0, 37712)
		FUNC_LIST[58](add_i32(loc_2, 4), loc_0)
		while true do
			if band_i32(loc_3, 255) == 0 then
				break
			end
			store_i32_n8(memory_at_0, loc_2 + 31, loc_3)
			FUNC_LIST[504](add_i32(loc_2, 16), add_i32(loc_2, 31), 1)
			loc_3 = load_i32(memory_at_0, loc_2 + 16)
			FUNC_LIST[87](add_i32(loc_2, 4), (if loc_3 ~= 0 then 1048600 else load_i32(memory_at_0, loc_2 + 20)), (if loc_3 ~= 0 then 0 else load_i32(memory_at_0, add_i32(loc_2, 24))))
			FUNC_LIST[59](loc_0, load_i32(memory_at_0, loc_2 + 4), load_i32(memory_at_0, loc_2 + 12))
			break
		end
		FUNC_LIST[38](add_i32(loc_2, 4))
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		break
	end
end
FUNC_LIST[36] = --[[ _ZN4core3ptr196drop_in_place$LT$$LT$roblox_rs..generated..RunService$u20$as$u20$roblox_rs..generated..IRunService$GT$..on_heartbeat$LT$test..main..$u7b$$u7b$closure$u7d$$u7d$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17h46264eff4765e599E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[37](add_i32(loc_0, 37664))
		FUNC_LIST[38](add_i32(loc_0, 37676))
		FUNC_LIST[37](add_i32(loc_0, 37636))
		FUNC_LIST[37](add_i32(loc_0, 37648))
		loc_2 = load_i32(memory_at_0, add_i32(loc_0, 37552))
		loc_3 = load_i32(memory_at_0, add_i32(loc_0, 37556))
		TABLE_LIST[0].data[load_i32(memory_at_0, loc_3)](loc_2)
		while true do
			loc_4 = load_i32(memory_at_0, loc_3 + 4)
			if loc_4 == 0 then
				break
			end
			FUNC_LIST[39](loc_2, load_i32(memory_at_0, loc_3 + 8), loc_4)
			break
		end
		while true do
			loc_3 = load_i32(memory_at_0, add_i32(loc_0, 33316))
			if loc_3 == 0 then
				break
			end
			loc_2 = shl_i32(loc_3, 3)
			FUNC_LIST[39](add_i32(sub_i32(load_i32(memory_at_0, add_i32(loc_0, 33312)), loc_2), 4294967288), 8, add_i32(add_i32(loc_3, loc_2), 17))
			break
		end
		FUNC_LIST[355](add_i32(loc_1, 4), add_i32(loc_0, 33360))
		while true do
			loc_3 = load_i32(memory_at_0, loc_1 + 8)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[39](load_i32(memory_at_0, loc_1 + 4), loc_3, load_i32(memory_at_0, add_i32(loc_1, 12)))
			break
		end
		FUNC_LIST[78](add_i32(loc_0, 37712))
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		break
	end
end
FUNC_LIST[37] = --[[ _ZN4core3ptr47drop_in_place$LT$alloc..vec..Vec$LT$u64$GT$$GT$17h018b822e344873a6E ]] function(loc_0)
	local loc_1 = 0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[354](add_i32(loc_1, 4), loc_0)
		while true do
			loc_0 = load_i32(memory_at_0, loc_1 + 8)
			if loc_0 == 0 then
				break
			end
			FUNC_LIST[39](load_i32(memory_at_0, loc_1 + 4), loc_0, load_i32(memory_at_0, add_i32(loc_1, 12)))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		break
	end
end
FUNC_LIST[38] = --[[ _ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hf6d614603e979e81E ]] function(loc_0)
	while true do
		FUNC_LIST[88](loc_0)
		FUNC_LIST[100](loc_0)
		break
	end
end
FUNC_LIST[39] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hcf8580d9a93569d1E ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[40] = --[[ _ZN4core3ptr70drop_in_place$LT$riscv_emu_rust..default_terminal..DefaultTerminal$GT$17h1ebffc78742415b4E ]] function(loc_0)
	while true do
		FUNC_LIST[38](loc_0)
		FUNC_LIST[38](add_i32(loc_0, 12))
		break
	end
end
FUNC_LIST[41] = --[[ _ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17h155e6af66381de08E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[42] = --[[ _ZN5alloc3fmt6format17h72da8280f5a072cdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32(memory_at_0, add_i32(loc_1, 12))
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][load_i32(memory_at_0, loc_1 + 4)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 ~= 0 then
							desired = 3
							break
						end
						loc_3 = 1048600
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 ~= 0 then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_1)
					loc_1 = load_i32(memory_at_0, loc_3 + 4)
					loc_3 = load_i32(memory_at_0, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[486](loc_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[94](add_i32(loc_2, 8), loc_1, 0)
			loc_4 = load_i32(memory_at_0, loc_2 + 12)
			reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_2 + 8), loc_3, loc_1)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_0 + 8, loc_1)
			store_i32(memory_at_0, loc_0 + 4, loc_4)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[43] = --[[ _ZN5alloc5alloc15exchange_malloc17hb55528197fd7864eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[44](loc_0, loc_1)
			loc_2 = reg_0
			if loc_2 == 0 then
				break
			end
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](loc_1, loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[44] = --[[ __rust_alloc ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[404](1064272, loc_1, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[45] = --[[ __rust_dealloc ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[405](1064272, loc_0, loc_2, loc_1)
		break
	end
end
FUNC_LIST[46] = --[[ _ZN4test4main17hc01b0df2d19189dcE ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 75504)
		GLOBAL_LIST[0].value = loc_0
		reg_1 = FUNC_LIST[82]()
		store_i32(memory_at_0, loc_0 + 24, reg_1)
		reg_1 = FUNC_LIST[76]()
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		reg_1 = FUNC_LIST[52](add_i32(loc_0, 37792))
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		store_i32(memory_at_0, loc_0 + 40, reg_1)
		FUNC_LIST[79](add_i32(loc_0, 24), add_i32(loc_0, 40))
		FUNC_LIST[78](add_i32(loc_0, 37792))
		loc_1 = add_i32(loc_0, 37804)
		store_i64(memory_at_0, loc_1, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 37796, 1)
		store_i32(memory_at_0, loc_0 + 37792, 1048636)
		store_i32(memory_at_0, loc_0 + 37800, 1048600)
		FUNC_LIST[42](add_i32(loc_0, 40), add_i32(loc_0, 37792))
		FUNC_LIST[0](load_i32(memory_at_0, loc_0 + 40), load_i32(memory_at_0, loc_0 + 48))
		FUNC_LIST[38](add_i32(loc_0, 40))
		reg_1 = FUNC_LIST[81]()
		store_i32(memory_at_0, loc_0 + 28, reg_1)
		reg_1 = FUNC_LIST[83]()
		store_i32(memory_at_0, loc_0 + 32, reg_1)
		reg_1 = FUNC_LIST[80]()
		store_i32(memory_at_0, loc_0 + 36, reg_1)
		reg_1 = FUNC_LIST[55](1e0, 1e0)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[56](add_i32(loc_0, 36), add_i32(loc_0, 37792))
		FUNC_LIST[84](add_i32(loc_0, 37792))
		FUNC_LIST[57](add_i32(loc_0, 36), 1048644)
		FUNC_LIST[61](add_i32(loc_0, 36), 1048648)
		FUNC_LIST[62](add_i32(loc_0, 36), 1048648)
		FUNC_LIST[59](add_i32(loc_0, 36), 1048652, 15)
		FUNC_LIST[60](add_i32(loc_0, 36), 3e1)
		reg_1 = FUNC_LIST[52](add_i32(loc_0, 28))
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[79](add_i32(loc_0, 36), add_i32(loc_0, 37792))
		FUNC_LIST[69](add_i32(loc_0, 32), 1)
		reg_1 = FUNC_LIST[54](0e0, 2.55e2, 0e0)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[72](add_i32(loc_0, 32), add_i32(loc_0, 37792))
		FUNC_LIST[84](add_i32(loc_0, 37792))
		FUNC_LIST[73](add_i32(loc_0, 32), 1048668)
		reg_1 = FUNC_LIST[53](1.6e1, 1e1, 5e-2)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[75](add_i32(loc_0, 32), add_i32(loc_0, 37792))
		FUNC_LIST[84](add_i32(loc_0, 37792))
		reg_1 = FUNC_LIST[53](0e0, 0e0, 0e0)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[74](add_i32(loc_0, 32), add_i32(loc_0, 37792))
		FUNC_LIST[84](add_i32(loc_0, 37792))
		FUNC_LIST[70](add_i32(loc_0, 32), 0)
		FUNC_LIST[69](add_i32(loc_0, 32), 1)
		FUNC_LIST[71](add_i32(loc_0, 32), 0)
		FUNC_LIST[64](add_i32(loc_0, 28), 1048672)
		reg_1 = FUNC_LIST[52](add_i32(loc_0, 32))
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		FUNC_LIST[63](add_i32(loc_0, 28), reg_1)
		FUNC_LIST[66](add_i32(loc_0, 28), 1048676)
		FUNC_LIST[65](add_i32(loc_0, 28), 1e2)
		reg_1 = FUNC_LIST[52](add_i32(loc_0, 24))
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[79](add_i32(loc_0, 28), add_i32(loc_0, 37792))
		reg_1 = FUNC_LIST[52](add_i32(loc_0, 24))
		reg_1 = FUNC_LIST[52](reg_1)
		reg_1 = FUNC_LIST[52](reg_1)
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[79](add_i32(loc_0, 32), add_i32(loc_0, 37792))
		FUNC_LIST[135](add_i32(loc_0, 37792))
		reg_0 = FUNC_LIST[43](24, 4)
		loc_2 = reg_0
		store_i64(memory_at_0, add_i32(loc_2, 16), load_i64(memory_at_0, add_i32(add_i32(loc_0, 37792), 16)))
		store_i64(memory_at_0, add_i32(loc_2, 8), load_i64(memory_at_0, add_i32(add_i32(loc_0, 37792), 8)))
		store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_0 + 37792))
		FUNC_LIST[334](add_i32(loc_0, 40), loc_2, 1048680)
		store_i64(memory_at_0, loc_1, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 37796, 1)
		store_i32(memory_at_0, loc_0 + 37792, 1048716)
		store_i32(memory_at_0, loc_0 + 37800, 1048600)
		FUNC_LIST[42](add_i32(loc_0, 37776), add_i32(loc_0, 37792))
		FUNC_LIST[0](load_i32(memory_at_0, loc_0 + 37776), load_i32(memory_at_0, loc_0 + 37784))
		FUNC_LIST[38](add_i32(loc_0, 37776))
		reg_1 = FUNC_LIST[68]()
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[67](add_i32(loc_0, 37752), add_i32(loc_0, 37792), 1048724, 65, 0)
		FUNC_LIST[78](add_i32(loc_0, 37792))
		reg_1 = FUNC_LIST[68]()
		store_i32(memory_at_0, loc_0 + 37792, reg_1)
		FUNC_LIST[67](add_i32(loc_0, 37764), add_i32(loc_0, 37792), 1048789, 77, 0)
		FUNC_LIST[78](add_i32(loc_0, 37792))
		loc_3 = load_i32(memory_at_0, loc_0 + 37764)
		loc_2 = load_i32(memory_at_0, loc_0 + 37772)
		FUNC_LIST[94](add_i32(loc_0, 16), loc_2, 0)
		loc_4 = load_i32(memory_at_0, loc_0 + 20)
		reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_0 + 16), loc_3, loc_2)
		loc_3 = reg_0
		store_i32(memory_at_0, loc_0 + 37800, loc_2)
		store_i32(memory_at_0, loc_0 + 37796, loc_4)
		store_i32(memory_at_0, loc_0 + 37792, loc_3)
		FUNC_LIST[339](add_i32(loc_0, 40), add_i32(loc_0, 37792))
		loc_3 = load_i32(memory_at_0, loc_0 + 37752)
		loc_2 = load_i32(memory_at_0, loc_0 + 37760)
		FUNC_LIST[94](add_i32(loc_0, 8), loc_2, 0)
		loc_4 = load_i32(memory_at_0, loc_0 + 12)
		reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_0 + 8), loc_3, loc_2)
		loc_3 = reg_0
		store_i32(memory_at_0, loc_0 + 37800, loc_2)
		store_i32(memory_at_0, loc_0 + 37796, loc_4)
		store_i32(memory_at_0, loc_0 + 37792, loc_3)
		FUNC_LIST[340](add_i32(loc_0, 40), add_i32(loc_0, 37792))
		FUNC_LIST[335](add_i32(loc_0, 40))
		store_i64(memory_at_0, loc_1, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 37796, 1)
		store_i32(memory_at_0, loc_0 + 37792, 1048880)
		store_i32(memory_at_0, loc_0 + 37800, 1048600)
		FUNC_LIST[42](add_i32(loc_0, 37776), add_i32(loc_0, 37792))
		FUNC_LIST[0](load_i32(memory_at_0, loc_0 + 37776), load_i32(memory_at_0, loc_0 + 37784))
		FUNC_LIST[38](add_i32(loc_0, 37776))
		reg_1 = FUNC_LIST[77]()
		loc_2 = reg_1
		store_i32(memory_at_0, loc_0 + 37776, loc_2)
		reg_0 = FUNC_LIST[538](add_i32(loc_0, 37792), add_i32(loc_0, 40), 37712)
		loc_1 = load_i32(memory_at_0, loc_0 + 36)
		reg_0 = FUNC_LIST[43](37720, 8)
		reg_0 = FUNC_LIST[538](reg_0, add_i32(loc_0, 37792), 37712)
		loc_3 = reg_0
		store_i32(memory_at_0, loc_3 + 37712, loc_1)
		reg_1 = FUNC_LIST[1](loc_2, loc_3, 1048600)
		store_i32(memory_at_0, loc_0 + 37788, reg_1)
		FUNC_LIST[113](add_i32(loc_0, 37788))
		FUNC_LIST[78](add_i32(loc_0, 37776))
		FUNC_LIST[38](add_i32(loc_0, 37764))
		FUNC_LIST[38](add_i32(loc_0, 37752))
		FUNC_LIST[78](add_i32(loc_0, 32))
		FUNC_LIST[78](add_i32(loc_0, 28))
		FUNC_LIST[78](add_i32(loc_0, 24))
		GLOBAL_LIST[0].value = add_i32(loc_0, 75504)
		break
	end
end
FUNC_LIST[47] = --[[ __rust_realloc ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		while true do
			reg_0 = FUNC_LIST[404](1064272, loc_2, loc_3)
			loc_4 = reg_0
			if loc_4 == 0 then
				break
			end
			reg_0 = FUNC_LIST[538](loc_4, loc_0, (if loc_1 < loc_3 then loc_1 else loc_3))
			FUNC_LIST[405](1064272, loc_0, loc_2, loc_1)
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[48] = --[[ __rust_alloc_zeroed ]] function(loc_0, loc_1)
	local reg_0
	while true do
		while true do
			reg_0 = FUNC_LIST[404](1064272, loc_1, loc_0)
			loc_1 = reg_0
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[539](loc_1, 0, loc_0)
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[49] = --[[ main ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[31](1, loc_0, loc_1, 0)
		break
	end
	return reg_0
end
FUNC_LIST[50] = --[[ __rust_alloc_error_handler ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[467](loc_0, loc_1)
		break
	end
end
FUNC_LIST[51] = --[[ _ZN4core6option15Option$LT$T$GT$6unwrap17hd6d60cc2619c11bdE ]] function(loc_0, loc_1)
	while true do
		while true do
			if loc_0 ~= 0 then
				break
			end
			FUNC_LIST[496](1048888, 43, loc_1)
			error("out of code bounds")
		end
		break
	end
end
FUNC_LIST[52] = --[[ _ZN69_$LT$roblox_rs..generated..Sky$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcc5fe0e50a4e89efE ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[53] = --[[ _ZN9roblox_rs9generated7Vector317new_with_position17h267a7f6796922a97E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[2](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[54] = --[[ _ZN9roblox_rs9generated6Color38from_rgb17h7a4ee4e1b8c17ba6E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[4](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[55] = --[[ _ZN9roblox_rs9generated5UDim210from_scale17h92c5b0e617846d9bE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[5](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[56] = --[[ _ZN80_$LT$roblox_rs..generated..Frame$u20$as$u20$roblox_rs..generated..IGuiObject$GT$8set_size17hd4c5c223e47b72b6E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[8](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[57] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$8set_font17h465f2756cb4761ccE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[9](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[58] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$4text17h74b46deb9d833cfaE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[10](add_i32(loc_2, 8), load_i32(memory_at_0, loc_1))
		loc_1 = load_i32(memory_at_0, loc_2 + 8)
		loc_3 = load_i32(memory_at_0, loc_2 + 12)
		store_i32(memory_at_0, loc_0 + 8, loc_3)
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[59] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$8set_text17h9c6b070db46932e2E ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[11](load_i32(memory_at_0, loc_0), loc_1, loc_2)
		break
	end
end
FUNC_LIST[60] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$13set_text_size17hdbd0d7074941547eE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[12](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[61] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$20set_text_x_alignment17h47bfc29b7c3bbc02E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[13](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[62] = --[[ _ZN80_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..ITextBox$GT$20set_text_y_alignment17hdfd59beb32000610E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[14](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[63] = --[[ _ZN85_$LT$roblox_rs..generated..AdGui$u20$as$u20$roblox_rs..generated..ISurfaceGuiBase$GT$11set_adornee17h7a3a701bbe590815E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[15](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[64] = --[[ _ZN85_$LT$roblox_rs..generated..AdGui$u20$as$u20$roblox_rs..generated..ISurfaceGuiBase$GT$8set_face17h101f0264ade0a73aE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[16](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[65] = --[[ _ZN86_$LT$roblox_rs..generated..SurfaceGui$u20$as$u20$roblox_rs..generated..ISurfaceGui$GT$19set_pixels_per_stud17h16049401d5546549E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[17](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[66] = --[[ _ZN86_$LT$roblox_rs..generated..SurfaceGui$u20$as$u20$roblox_rs..generated..ISurfaceGui$GT$15set_sizing_mode17h51f832b0a24f1254E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[18](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[67] = --[[ _ZN88_$LT$roblox_rs..generated..HttpService$u20$as$u20$roblox_rs..generated..IHttpService$GT$9get_async17hcdd0bb2b8c17e9d4E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[19](add_i32(loc_5, 8), load_i32(memory_at_0, loc_1), loc_2, loc_3, loc_4)
		loc_1 = load_i32(memory_at_0, loc_5 + 8)
		loc_4 = load_i32(memory_at_0, loc_5 + 12)
		store_i32(memory_at_0, loc_0 + 8, loc_4)
		store_i32(memory_at_0, loc_0 + 4, loc_4)
		store_i32(memory_at_0, loc_0, loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[68] = --[[ _ZN9roblox_rs9generated11HttpService8instance17h8e9feaafb41f54d0E ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_0
		reg_1 = FUNC_LIST[6]()
		loc_1 = reg_1
		FUNC_LIST[7](add_i32(loc_0, 8), loc_1, 1049037, 11)
		loc_2 = load_i32(memory_at_0, loc_0 + 12)
		FUNC_LIST[51](load_i32(memory_at_0, loc_0 + 8), 1049048)
		FUNC_LIST[3](loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_0, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[69] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$12set_anchored17he2cc0b0593d15e94E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[20](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[70] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$15set_can_collide17hdf45a45da6dc3bfbE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[21](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[71] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$13set_can_query17h1a459b65fcb24903E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[22](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[72] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$9set_color17h6aacb52e9f539a3cE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[23](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[73] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$12set_material17hfd0aa8b641c7a597E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[24](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
end
FUNC_LIST[74] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$12set_position17hf104e7b8a60d8e3cE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[25](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[75] = --[[ _ZN78_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..IBasePart$GT$8set_size17h2259829dddb1853bE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[26](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[76] = --[[ _ZN9roblox_rs9generated9Workspace8instance17hde41627cd5391e10E ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_0
		reg_1 = FUNC_LIST[6]()
		loc_1 = reg_1
		FUNC_LIST[7](add_i32(loc_0, 8), loc_1, 1049074, 9)
		loc_2 = load_i32(memory_at_0, loc_0 + 12)
		FUNC_LIST[51](load_i32(memory_at_0, loc_0 + 8), 1049084)
		FUNC_LIST[3](loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_0, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[77] = --[[ _ZN9roblox_rs9generated10RunService8instance17h796a51f9aa7542bfE ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_0
		reg_1 = FUNC_LIST[6]()
		loc_1 = reg_1
		FUNC_LIST[7](add_i32(loc_0, 8), loc_1, 1049100, 10)
		loc_2 = load_i32(memory_at_0, loc_0 + 12)
		FUNC_LIST[51](load_i32(memory_at_0, loc_0 + 8), 1049112)
		FUNC_LIST[3](loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_0, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[78] = --[[ _ZN67_$LT$roblox_rs..generated..Sky$u20$as$u20$core..ops..drop..Drop$GT$4drop17h28443b901385e562E ]] function(loc_0)
	while true do
		FUNC_LIST[3](load_i32(memory_at_0, loc_0))
		break
	end
end
FUNC_LIST[79] = --[[ _ZN100_$LT$roblox_rs..generated..ChannelSelectorSoundEffect$u20$as$u20$roblox_rs..generated..IInstance$GT$10set_parent17h91b772273dd71fbcE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		loc_0 = load_i32(memory_at_0, loc_0)
		while true do
			while true do
				loc_1 = load_i32(memory_at_0, loc_1)
				if loc_1 ~= 0 then
					break
				end
				loc_1 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1)
			loc_1 = 1
			break
		end
		FUNC_LIST[27](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[80] = --[[ _ZN87_$LT$roblox_rs..generated..TextBox$u20$as$u20$roblox_rs..generated..RobloxCreatable$GT$3new17hdc44356d70d711deE ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[28](1049020, 7)
		break
	end
	return reg_0
end
FUNC_LIST[81] = --[[ _ZN90_$LT$roblox_rs..generated..SurfaceGui$u20$as$u20$roblox_rs..generated..RobloxCreatable$GT$3new17hfcd2a4a052f9c688E ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[28](1049027, 10)
		break
	end
	return reg_0
end
FUNC_LIST[82] = --[[ _ZN86_$LT$roblox_rs..generated..Script$u20$as$u20$roblox_rs..generated..RobloxCreatable$GT$3new17h1d598893b21c1173E ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[28](1049064, 6)
		break
	end
	return reg_0
end
FUNC_LIST[83] = --[[ _ZN84_$LT$roblox_rs..generated..Part$u20$as$u20$roblox_rs..generated..RobloxCreatable$GT$3new17h69bba19f5920e819E ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[28](1049070, 4)
		break
	end
	return reg_0
end
FUNC_LIST[84] = --[[ _ZN67_$LT$roblox_rs..generated..Ray$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd39d3d99fefb4536E ]] function(loc_0)
	while true do
		FUNC_LIST[3](load_i32(memory_at_0, loc_0))
		break
	end
end
FUNC_LIST[85] = --[[ _ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hd2f088273c9a6078E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(loc_2, loc_1)
		FUNC_LIST[86](loc_0, loc_2)
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		break
	end
end
FUNC_LIST[86] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h2b2d041af3630f75E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_2) >= loc_1 then
				break
			end
			FUNC_LIST[98](loc_0, loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[87] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h88848172cc83c689E ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[85](loc_0, loc_1, add_i32(loc_1, loc_2))
		break
	end
end
FUNC_LIST[88] = --[[ _ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb9fdf481ebc24ac8E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[89] = --[[ _ZN5alloc5alloc6Global10alloc_impl17hcce97488e89569acE.llvm.6061469175111532988 ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			while true do
				if loc_3 ~= 0 then
					break
				end
				reg_0 = FUNC_LIST[44](loc_2, loc_1)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[48](loc_2, loc_1)
			loc_1 = reg_0
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[90] = --[[ _ZN5alloc7raw_vec11finish_grow17h91c9ec6e025171dfE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						if le_i32(loc_2, 4294967295) then
							desired = 3
							break
						end
						while true do
							while true do
								if load_i32(memory_at_0, loc_3 + 4) == 0 then
									break
								end
								while true do
									loc_6 = load_i32(memory_at_0, add_i32(loc_3, 8))
									if loc_6 ~= 0 then
										break
									end
									FUNC_LIST[89](add_i32(loc_5, 8), loc_1, loc_2, 0)
									loc_6 = load_i32(memory_at_0, loc_5 + 12)
									loc_3 = load_i32(memory_at_0, loc_5 + 8)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[47](load_i32(memory_at_0, loc_3), loc_6, loc_1, loc_2)
								loc_3 = reg_0
								loc_6 = loc_2
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[91](loc_5, loc_1, loc_2)
							loc_6 = load_i32(memory_at_0, loc_5 + 4)
							loc_3 = load_i32(memory_at_0, loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_3 == 0 then
								break
							end
							store_i32(memory_at_0, loc_0 + 4, loc_3)
							store_i32(memory_at_0, add_i32(loc_0, 8), loc_6)
							loc_2 = 0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_1)
						store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, 0)
					store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 1
			break
		end
		store_i32(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[91] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17hcbcdb8d6b0c4e467E.llvm.6061469175111532988 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[89](add_i32(loc_3, 8), loc_1, loc_2, 0)
		loc_2 = load_i32(memory_at_0, loc_3 + 12)
		store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_3 + 8))
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[92] = --[[ _ZN5alloc7raw_vec14handle_reserve17h2b83d1118f8832cbE.llvm.6061469175111532988 ]] function(loc_0, loc_1)
	local desired
	while true do
		while true do
			while true do
				if loc_0 == 2147483649 then
					break
				end
				if loc_0 == 0 then
					desired = 1
					break
				end
				FUNC_LIST[480](loc_0, loc_1)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[481]()
		error("out of code bounds")
	end
end
FUNC_LIST[93] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17hf7e0a53fb236ed92E.llvm.6061469175111532988 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[89](add_i32(loc_3, 8), loc_1, loc_2, 1)
		loc_2 = load_i32(memory_at_0, loc_3 + 12)
		store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_3 + 8))
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[94] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17h45fd69b2daa81b68E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						if loc_1 ~= 0 then
							break
						end
						loc_2 = 1
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if le_i32(loc_1, 4294967295) then
						desired = 2
						break
					end
					while true do
						while true do
							if loc_2 ~= 0 then
								break
							end
							FUNC_LIST[91](add_i32(loc_3, 8), 1, loc_1)
							loc_2 = load_i32(memory_at_0, loc_3 + 8)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[93](loc_3, 1, loc_1)
						loc_2 = load_i32(memory_at_0, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, loc_1)
				store_i32(memory_at_0, loc_0, loc_2)
				GLOBAL_LIST[0].value = add_i32(loc_3, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](1, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[95] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17h5d603dab4c84d16eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						if loc_1 ~= 0 then
							break
						end
						loc_2 = 4
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 > 536870911 then
						desired = 2
						break
					end
					loc_4 = shl_i32(loc_1, 2)
					if le_i32(loc_4, 4294967295) then
						desired = 2
						break
					end
					while true do
						while true do
							if loc_2 ~= 0 then
								break
							end
							FUNC_LIST[91](add_i32(loc_3, 8), 4, loc_4)
							loc_2 = load_i32(memory_at_0, loc_3 + 8)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[93](loc_3, 4, loc_4)
						loc_2 = load_i32(memory_at_0, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, loc_1)
				store_i32(memory_at_0, loc_0, loc_2)
				GLOBAL_LIST[0].value = add_i32(loc_3, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](4, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[96] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17hfdc3410005bde9b8E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 0
		while true do
			loc_3 = add_i32(loc_2, loc_3)
			if loc_3 < loc_2 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			loc_5 = shl_i32(loc_2, 1)
			loc_3 = (if loc_5 > loc_3 then loc_5 else loc_3)
			loc_3 = (if loc_3 > 8 then loc_3 else 8)
			loc_5 = shr_u32(bxor_i32(loc_3, 4294967295), 31)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 28, loc_2)
					store_i32(memory_at_0, loc_4 + 24, 1)
					store_i32(memory_at_0, loc_4 + 20, load_i32(memory_at_0, loc_1))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 24, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[90](add_i32(loc_4, 8), loc_5, loc_3, add_i32(loc_4, 20), loc_4)
			loc_5 = load_i32(memory_at_0, loc_4 + 12)
			while true do
				if load_i32(memory_at_0, loc_4 + 8) == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, add_i32(loc_4, 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_5)
			loc_5 = 2147483649
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[97] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h09f15edcc5b7840dE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[96](add_i32(loc_2, 8), loc_0, loc_1, 1)
		FUNC_LIST[92](load_i32(memory_at_0, loc_2 + 8), load_i32(memory_at_0, loc_2 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[98] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hd8047cafc2b6577fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[96](add_i32(loc_3, 8), loc_0, loc_1, loc_2)
		FUNC_LIST[92](load_i32(memory_at_0, loc_3 + 8), load_i32(memory_at_0, loc_3 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[99] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hcf8580d9a93569d1E.llvm.6061469175111532988 ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[100] = --[[ _ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h607d2a3ddefbc325E ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[99](load_i32(memory_at_0, loc_0), 1, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[101] = --[[ _ZN45_$LT$T$u20$as$u20$alloc..string..ToString$GT$9to_string17h934c34f0a6cc7ee2E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 20, 0)
		store_i64(memory_at_0, loc_2 + 12, i64_ONE)
		FUNC_LIST[517](add_i32(loc_2, 24), add_i32(loc_2, 12), 1049128)
		while true do
			reg_0 = FUNC_LIST[511](loc_1, add_i32(loc_2, 24))
			if reg_0 ~= 0 then
				break
			end
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2 + 12))
			store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_2, 12), 8)))
			GLOBAL_LIST[0].value = add_i32(loc_2, 64)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[505](1049152, 55, add_i32(loc_2, 63), 1049208, 1049300)
		error("out of code bounds")
	end
end
FUNC_LIST[102] = --[[ _ZN4core3fmt5Write9write_fmt17hc1809a7f97858a14E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_0)
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1049316, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[103] = --[[ _ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hf8fafa633833e81eE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[104](loc_1, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[104] = --[[ _ZN9roblox_rs4hook28_$u7b$$u7b$closure$u7d$$u7d$17h95cdb4a15a0700cdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[101](add_i32(loc_2, 4), loc_1)
		FUNC_LIST[29](load_i32(memory_at_0, loc_2 + 4), load_i32(memory_at_0, loc_2 + 12))
		error("out of code bounds")
	end
end
FUNC_LIST[105] = --[[ _ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h29d2ea3f81639f59E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[106] = --[[ _ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hec6abbbc8b756ea6E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[107] = --[[ _ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hed5b5f073a2ac2ccE ]] function(loc_0)
	while true do
		FUNC_LIST[100](loc_0)
		break
	end
end
FUNC_LIST[108] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hbb916b89c08035d2E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[109](load_i32(memory_at_0, loc_0), loc_1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[109] = --[[ _ZN58_$LT$alloc..string..String$u20$as$u20$core..fmt..Write$GT$10write_char17he200f19c39d79737E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						if loc_1 < 128 then
							break
						end
						store_i32(memory_at_0, loc_2 + 12, 0)
						if loc_1 < 2048 then
							desired = 3
							break
						end
						while true do
							if loc_1 >= 65536 then
								break
							end
							store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(loc_1, 63), 128))
							store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 12), 224))
							store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
							loc_1 = 3
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 15, bor_i32(band_i32(loc_1, 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(band_i32(shr_u32(loc_1, 18), 7), 240))
						loc_1 = 4
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
							break
						end
						FUNC_LIST[97](loc_0, loc_3)
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1)
					store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 6), 192))
				loc_1 = 2
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[87](loc_0, add_i32(loc_2, 12), loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[110] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h3d35d22dd721daf0E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[102](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[111] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h8aa7c698753d2f43E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[87](load_i32(memory_at_0, loc_0), loc_1, loc_2)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[112] = --[[ _ZN58_$LT$alloc..string..String$u20$as$u20$core..fmt..Write$GT$9write_str17hef5472fbba704b11E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[87](loc_0, loc_1, loc_2)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[113] = --[[ _ZN106_$LT$roblox_rs..datatypes..rbx_script_connection..RbxScriptConnection$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha04068fb20b86d60E ]] function(loc_0)
	while true do
		FUNC_LIST[3](load_i32(memory_at_0, loc_0))
		break
	end
end
FUNC_LIST[114] = --[[ __heap_alloc_string ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[94](add_i32(loc_1, 8), loc_0, 0)
		loc_0 = load_i32(memory_at_0, loc_1 + 8)
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[115] = --[[ __heap_alloc_vec ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[95](add_i32(loc_1, 8), loc_0, 0)
		loc_0 = load_i32(memory_at_0, loc_1 + 8)
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[116] = --[[ __drop_box_dyn_fn ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		TABLE_LIST[0].data[load_i32(memory_at_0, loc_1)](loc_0)
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_2, load_i32(memory_at_0, loc_1 + 8))
			break
		end
		break
	end
end
FUNC_LIST[117] = --[[ hook ]] function()
	while true do
		FUNC_LIST[457](1, 1049340)
		break
	end
end
FUNC_LIST[118] = --[[ _ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17h51530cb96a184d09E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(loc_2, loc_1)
		FUNC_LIST[119](loc_0, loc_2)
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		break
	end
end
FUNC_LIST[119] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17hb1c441b187d332a1E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_2) >= loc_1 then
				break
			end
			FUNC_LIST[364](loc_0, loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[120] = --[[ _ZN3std3sys6common12thread_local4lazy21LazyKeyInner$LT$T$GT$10initialize17h03159c861e128ec9E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				if loc_1 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_1)
				store_i64(memory_at_0, loc_1, i64_ZERO)
				if loc_3 ~= 1 then
					break
				end
				loc_4 = load_i64(memory_at_0, loc_1 + 16)
				loc_5 = load_i64(memory_at_0, loc_1 + 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[466](loc_2)
			loc_4 = load_i64(memory_at_0, loc_2 + 8)
			loc_5 = load_i64(memory_at_0, loc_2)
			break
		end
		store_i64(memory_at_0, loc_0 + 16, loc_4)
		store_i64(memory_at_0, loc_0 + 8, loc_5)
		store_i64(memory_at_0, loc_0, i64_ONE)
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = add_i32(loc_0, 8)
		break
	end
	return reg_0
end
FUNC_LIST[121] = --[[ _ZN3std6thread5local17LocalKey$LT$T$GT$4with17h57330d15fd335352E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_1)](0)
			loc_1 = reg_0
			if loc_1 == 0 then
				break
			end
			loc_3 = load_i64(memory_at_0, loc_1)
			store_i64(memory_at_0, loc_1, add_i64(loc_3, i64_ONE))
			store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1 + 8))
			store_i64(memory_at_0, loc_0, loc_3)
			GLOBAL_LIST[0].value = add_i32(loc_2, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[505](1049364, 70, add_i32(loc_2, 15), 1049436, 1049532)
		error("out of code bounds")
	end
end
FUNC_LIST[122] = --[[ _ZN3std9panicking11begin_panic17h6ff4b393c2e2e090E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_1)
		store_i32(memory_at_0, loc_3 + 4, loc_0)
		FUNC_LIST[377](add_i32(loc_3, 4))
		error("out of code bounds")
	end
end
FUNC_LIST[123] = --[[ _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0143836fb48b6b3fE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[523](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 4), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[124] = --[[ _ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h85f365cf2fd26eb0E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[125] = --[[ _ZN4core3ptr52drop_in_place$LT$std..thread..local..AccessError$GT$17h2fd6e1d1ef0af705E.llvm.11378003028051822986 ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[126] = --[[ _ZN4core4hash11BuildHasher8hash_one17h325328c1c624bacdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i64_u32(memory_at_0, loc_1)
		loc_4 = load_i64(memory_at_0, loc_0)
		loc_5 = load_i64(memory_at_0, loc_0 + 8)
		store_i64(memory_at_0, loc_2 + 16, bxor_i64(loc_5, i64_from_u32(1852075885, 1685025377)))
		store_i64(memory_at_0, loc_2 + 8, bxor_i64(loc_4, i64_from_u32(1852142177, 1819895653)))
		store_i64(memory_at_0, loc_2, bxor_i64(loc_4, i64_from_u32(1886610805, 1936682341)))
		loc_6 = bor_i64(loc_3, i64_from_u32(0, 67108864))
		store_i64(memory_at_0, loc_2 + 24, bxor_i64(bxor_i64(loc_5, loc_6), i64_from_u32(2037671283, 1952801890)))
		FUNC_LIST[127](loc_2)
		loc_4 = load_i64(memory_at_0, loc_2 + 16)
		loc_5 = load_i64(memory_at_0, loc_2)
		loc_7 = load_i64(memory_at_0, loc_2 + 8)
		loc_3 = load_i64(memory_at_0, loc_2 + 24)
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		loc_7 = add_i64(loc_3, bxor_i64(loc_7, i64_from_u32(255, 0)))
		reg_1 = rotl_i64(loc_4, i64_from_u32(13, 0))
		loc_4 = add_i64(loc_4, bxor_i64(loc_5, loc_6))
		loc_5 = bxor_i64(reg_1, loc_4)
		loc_6 = add_i64(loc_7, loc_5)
		loc_5 = bxor_i64(loc_6, rotl_i64(loc_5, i64_from_u32(17, 0)))
		loc_3 = bxor_i64(rotl_i64(loc_3, i64_from_u32(16, 0)), loc_7)
		loc_4 = add_i64(loc_3, rotl_i64(loc_4, i64_from_u32(32, 0)))
		reg_0 = rotl_i64(loc_5, i64_from_u32(13, 0))
		loc_5 = add_i64(loc_4, loc_5)
		loc_7 = bxor_i64(reg_0, loc_5)
		loc_4 = bxor_i64(rotl_i64(loc_3, i64_from_u32(21, 0)), loc_4)
		loc_3 = add_i64(loc_4, rotl_i64(loc_6, i64_from_u32(32, 0)))
		loc_6 = add_i64(loc_3, loc_7)
		loc_7 = bxor_i64(rotl_i64(loc_7, i64_from_u32(17, 0)), loc_6)
		loc_4 = bxor_i64(rotl_i64(loc_4, i64_from_u32(16, 0)), loc_3)
		loc_3 = add_i64(loc_4, rotl_i64(loc_5, i64_from_u32(32, 0)))
		loc_5 = bxor_i64(rotl_i64(loc_7, i64_from_u32(13, 0)), add_i64(loc_3, loc_7))
		loc_4 = bxor_i64(rotl_i64(loc_4, i64_from_u32(21, 0)), loc_3)
		loc_3 = add_i64(loc_4, rotl_i64(loc_6, i64_from_u32(32, 0)))
		reg_0 = rotl_i64(loc_5, i64_from_u32(17, 0))
		loc_5 = add_i64(loc_3, loc_5)
		reg_0 = bxor_i64(bxor_i64(bxor_i64(reg_0, rotl_i64(loc_5, i64_from_u32(32, 0))), rotl_i64(bxor_i64(rotl_i64(loc_4, i64_from_u32(16, 0)), loc_3), i64_from_u32(21, 0))), loc_5)
		break
	end
	return reg_0
end
FUNC_LIST[127] = --[[ _ZN69_$LT$core..hash..sip..Sip13Rounds$u20$as$u20$core..hash..sip..Sip$GT$8c_rounds17hce25f1c2ce122c3cE.llvm.11378003028051822986 ]] function(loc_0)
	local loc_1 = i64_ZERO
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_1 = load_i64(memory_at_0, loc_0 + 24)
		reg_1 = rotl_i64(loc_1, i64_from_u32(16, 0))
		loc_1 = add_i64(loc_1, load_i64(memory_at_0, loc_0 + 8))
		loc_2 = bxor_i64(reg_1, loc_1)
		loc_3 = load_i64(memory_at_0, loc_0 + 16)
		loc_4 = add_i64(loc_3, load_i64(memory_at_0, loc_0))
		loc_5 = add_i64(loc_2, rotl_i64(loc_4, i64_from_u32(32, 0)))
		store_i64(memory_at_0, loc_0, loc_5)
		store_i64(memory_at_0, loc_0 + 24, bxor_i64(rotl_i64(loc_2, i64_from_u32(21, 0)), loc_5))
		loc_2 = bxor_i64(rotl_i64(loc_3, i64_from_u32(13, 0)), loc_4)
		loc_1 = add_i64(loc_1, loc_2)
		store_i64(memory_at_0, loc_0 + 16, bxor_i64(loc_1, rotl_i64(loc_2, i64_from_u32(17, 0))))
		store_i64(memory_at_0, loc_0 + 8, rotl_i64(loc_1, i64_from_u32(32, 0)))
		break
	end
end
FUNC_LIST[128] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h0ba207e7987e7cddE ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[118](loc_0, loc_1, add_i32(loc_1, loc_2))
		break
	end
end
FUNC_LIST[129] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbd64d8f175a19decE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			if loc_2 ~= load_i32(memory_at_0, loc_0 + 4) then
				break
			end
			FUNC_LIST[361](loc_0, loc_2)
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		store_i32_n8(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), loc_2), loc_1)
		store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
		break
	end
end
FUNC_LIST[130] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17ha9516edacccddf69E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 <= loc_1 then
				break
			end
			loc_2 = add_i32(load_i32(memory_at_0, loc_0), loc_1)
			loc_4 = load_i32_u8(memory_at_0, loc_2)
			reg_0 = FUNC_LIST[537](loc_2, add_i32(loc_2, 1), add_i32(loc_3, bxor_i32(loc_1, 4294967295)))
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, 4294967295))
			reg_0 = loc_4
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[488](loc_1, loc_3, loc_2)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[131] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17hc82d26aea0de3ad5E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 <= loc_1 then
				break
			end
			loc_2 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_1, 3))
			loc_4 = load_i64(memory_at_0, loc_2)
			reg_0 = FUNC_LIST[537](loc_2, add_i32(loc_2, 8), shl_i32(add_i32(loc_3, bxor_i32(loc_1, 4294967295)), 3))
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, 4294967295))
			reg_0 = loc_4
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[488](loc_1, loc_3, loc_2)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[132] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h8851d3e6914c93e6E.llvm.11378003028051822986 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_1, 3))
		break
	end
	return reg_0
end
FUNC_LIST[133] = --[[ _ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17h5beff956570cd630E ]] function(loc_0, loc_1)
	while true do
		while true do
			if load_i32(memory_at_0, loc_1) ~= 0 then
				break
			end
			FUNC_LIST[450]()
			error("out of code bounds")
		end
		store_i32(memory_at_0, loc_0 + 4, 1049548)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[134] = --[[ _ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17h71dff98c40b4c3e5E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_1)
		store_i32(memory_at_0, loc_1, 0)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_1 + 4)
				reg_0 = FUNC_LIST[44](8, 4)
				loc_1 = reg_0
				if loc_1 == 0 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_1 + 4, loc_3)
				store_i32(memory_at_0, loc_1, loc_2)
				store_i32(memory_at_0, loc_0 + 4, 1049548)
				store_i32(memory_at_0, loc_0, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[450]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](4, 8)
		error("out of code bounds")
	end
end
FUNC_LIST[135] = --[[ _ZN14riscv_emu_rust16default_terminal15DefaultTerminal3new17hd7744369a16caaf4E ]] function(loc_0)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(0, 1))
		store_i64(memory_at_0, loc_0, i64_ONE)
		store_i64(memory_at_0, add_i32(loc_0, 16), i64_ZERO)
		break
	end
end
FUNC_LIST[136] = --[[ _ZN104_$LT$riscv_emu_rust..default_terminal..DefaultTerminal$u20$as$u20$riscv_emu_rust..terminal..Terminal$GT$8put_byte17h7300ce6d4bfaf61bE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[129](add_i32(loc_0, 12), loc_1)
		break
	end
end
FUNC_LIST[137] = --[[ _ZN104_$LT$riscv_emu_rust..default_terminal..DefaultTerminal$u20$as$u20$riscv_emu_rust..terminal..Terminal$GT$9get_input17hba6f8725514ab308E ]] function(loc_0)
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) ~= 0 then
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[130](loc_0, 0, 1049664)
		break
	end
	return reg_0
end
FUNC_LIST[138] = --[[ _ZN104_$LT$riscv_emu_rust..default_terminal..DefaultTerminal$u20$as$u20$riscv_emu_rust..terminal..Terminal$GT$9put_input17h41daec834f85aedeE ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[129](loc_0, loc_1)
		break
	end
end
FUNC_LIST[139] = --[[ _ZN104_$LT$riscv_emu_rust..default_terminal..DefaultTerminal$u20$as$u20$riscv_emu_rust..terminal..Terminal$GT$10get_output17he89a599fd5bca7d9E ]] function(loc_0)
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, add_i32(loc_0, 20)) ~= 0 then
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[130](add_i32(loc_0, 12), 0, 1049680)
		break
	end
	return reg_0
end
FUNC_LIST[140] = --[[ _ZN14riscv_emu_rust6memory6Memory4init17h30e25d2cdc98bfffE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		loc_1 = shr_u64(add_i64(loc_1, i64_from_u32(7, 0)), i64_from_u32(3, 0))
		while true do
			while true do
				if eq_i64(loc_1, i64_ZERO) then
					desired = 1
					break
				end
				while true do
					loc_2 = load_i32(memory_at_0, loc_0 + 8)
					if loc_2 ~= load_i32(memory_at_0, loc_0 + 4) then
						break
					end
					FUNC_LIST[360](loc_0, loc_2)
					loc_2 = load_i32(memory_at_0, loc_0 + 8)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				store_i64(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_2, 3)), i64_ZERO)
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				loc_1 = add_i64(loc_1, i64_from_u32(4294967295, 4294967295))
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[141] = --[[ _ZN14riscv_emu_rust6memory6Memory9read_byte17h6f8876f18b640cdfE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[132](loc_0, wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0))), 1049788)
		reg_0 = wrap_i32_i64(shr_u64(load_i64(memory_at_0, reg_0), shl_i64(loc_1, i64_from_u32(3, 0))))
		break
	end
	return reg_0
end
FUNC_LIST[142] = --[[ _ZN14riscv_emu_rust6memory6Memory13read_halfword17hb22cb570e8e6974bE ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if band_i32(wrap_i32_i64(loc_1), 1) ~= 0 then
					break
				end
				reg_0 = FUNC_LIST[132](loc_0, wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0))), 1049804)
				loc_1 = shr_u64(load_i64(memory_at_0, reg_0), shl_i64(loc_1, i64_from_u32(3, 0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[143](loc_0, loc_1, i64_from_u32(2, 0))
			loc_1 = reg_0
			break
		end
		reg_0 = wrap_i32_i64(loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[143] = --[[ _ZN14riscv_emu_rust6memory6Memory10read_bytes17hf4fb6d6afc37ca80E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = i64_ZERO
		loc_4 = i64_ZERO
		while true do
			while true do
				if ne_i64(loc_2, i64_ZERO) then
					break
				end
				reg_0 = loc_4
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			reg_0 = FUNC_LIST[141](loc_0, loc_1)
			loc_4 = bor_i64(shl_i64(band_i64(extend_i64_u32(reg_0), i64_from_u32(255, 0)), band_i64(loc_3, i64_from_u32(56, 0))), loc_4)
			loc_2 = add_i64(loc_2, i64_from_u32(4294967295, 4294967295))
			loc_3 = add_i64(loc_3, i64_from_u32(8, 0))
			loc_1 = add_i64(loc_1, i64_ONE)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[144] = --[[ _ZN14riscv_emu_rust6memory6Memory9read_word17hf4ec819887cc276cE ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if ne_i64(band_i64(loc_1, i64_from_u32(3, 0)), i64_ZERO) then
					break
				end
				reg_0 = FUNC_LIST[132](loc_0, wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0))), 1049820)
				loc_1 = shr_u64(load_i64(memory_at_0, reg_0), shl_i64(loc_1, i64_from_u32(3, 0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[143](loc_0, loc_1, i64_from_u32(4, 0))
			loc_1 = reg_0
			break
		end
		reg_0 = wrap_i32_i64(loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[145] = --[[ _ZN14riscv_emu_rust6memory6Memory15read_doubleword17hd90544efb05c01ddE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		while true do
			if ne_i64(band_i64(loc_1, i64_from_u32(7, 0)), i64_ZERO) then
				break
			end
			reg_0 = FUNC_LIST[132](loc_0, wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0))), 1049836)
			reg_0 = load_i64(memory_at_0, reg_0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if eq_i64(band_i64(loc_1, i64_from_u32(3, 0)), i64_ZERO) then
				break
			end
			reg_0 = FUNC_LIST[143](loc_0, loc_1, i64_from_u32(8, 0))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[144](loc_0, loc_1)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[144](loc_0, add_i64(loc_1, i64_from_u32(4, 0)))
		reg_0 = bor_i64(shl_i64(extend_i64_u32(reg_0), i64_from_u32(4, 0)), extend_i64_u32(loc_2))
		break
	end
	return reg_0
end
FUNC_LIST[146] = --[[ _ZN14riscv_emu_rust6memory6Memory10write_byte17h360ce7a4f7218f85E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		loc_3 = wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0)))
		reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049852)
		loc_4 = load_i64(memory_at_0, reg_0)
		reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049868)
		loc_1 = shl_i64(loc_1, i64_from_u32(3, 0))
		store_i64(memory_at_0, reg_0, bor_i64(band_i64(loc_4, bxor_i64(shl_i64(i64_from_u32(255, 0), loc_1), i64_from_u32(4294967295, 4294967295))), shl_i64(band_i64(extend_i64_u32(loc_2), i64_from_u32(255, 0)), loc_1)))
		break
	end
end
FUNC_LIST[147] = --[[ _ZN14riscv_emu_rust6memory6Memory14write_halfword17h7344efbe88786dafE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if band_i32(wrap_i32_i64(loc_1), 1) ~= 0 then
				break
			end
			loc_3 = wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0)))
			reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049884)
			loc_4 = load_i64(memory_at_0, reg_0)
			reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049900)
			loc_1 = shl_i64(loc_1, i64_from_u32(3, 0))
			store_i64(memory_at_0, reg_0, bor_i64(band_i64(loc_4, bxor_i64(shl_i64(i64_from_u32(65535, 0), loc_1), i64_from_u32(4294967295, 4294967295))), shl_i64(band_i64(extend_i64_u32(loc_2), i64_from_u32(65535, 0)), loc_1)))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[148](loc_0, loc_1, band_i64(extend_i64_u32(loc_2), i64_from_u32(65535, 0)), i64_from_u32(2, 0))
		break
	end
end
FUNC_LIST[148] = --[[ _ZN14riscv_emu_rust6memory6Memory11write_bytes17h55922176ff30be19E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local desired
	while true do
		loc_4 = i64_ZERO
		while true do
			while true do
				if ne_i64(loc_3, i64_ZERO) then
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			FUNC_LIST[146](loc_0, loc_1, wrap_i32_i64(shr_u64(loc_2, band_i64(loc_4, i64_from_u32(56, 0)))))
			loc_3 = add_i64(loc_3, i64_from_u32(4294967295, 4294967295))
			loc_4 = add_i64(loc_4, i64_from_u32(8, 0))
			loc_1 = add_i64(loc_1, i64_ONE)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[149] = --[[ _ZN14riscv_emu_rust6memory6Memory10write_word17h9c4f6562bcae655aE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if ne_i64(band_i64(loc_1, i64_from_u32(3, 0)), i64_ZERO) then
				break
			end
			loc_3 = wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0)))
			reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049916)
			loc_4 = load_i64(memory_at_0, reg_0)
			reg_0 = FUNC_LIST[132](loc_0, loc_3, 1049932)
			loc_1 = shl_i64(loc_1, i64_from_u32(3, 0))
			store_i64(memory_at_0, reg_0, bor_i64(band_i64(loc_4, bxor_i64(shl_i64(i64_from_u32(4294967295, 0), loc_1), i64_from_u32(4294967295, 4294967295))), shl_i64(extend_i64_u32(loc_2), loc_1)))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[148](loc_0, loc_1, extend_i64_u32(loc_2), i64_from_u32(4, 0))
		break
	end
end
FUNC_LIST[150] = --[[ _ZN14riscv_emu_rust6memory6Memory16write_doubleword17he5c0dc24ca81dab3E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if ne_i64(band_i64(loc_1, i64_from_u32(7, 0)), i64_ZERO) then
				break
			end
			reg_0 = FUNC_LIST[132](loc_0, wrap_i32_i64(shr_u64(loc_1, i64_from_u32(3, 0))), 1049948)
			store_i64(memory_at_0, reg_0, loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if eq_i64(band_i64(loc_1, i64_from_u32(3, 0)), i64_ZERO) then
				break
			end
			FUNC_LIST[148](loc_0, loc_1, loc_2, i64_from_u32(8, 0))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[149](loc_0, loc_1, wrap_i32_i64(loc_2))
		FUNC_LIST[149](loc_0, add_i64(loc_1, i64_from_u32(4, 0)), wrap_i32_i64(shr_u64(loc_2, i64_from_u32(32, 0))))
		break
	end
end
FUNC_LIST[151] = --[[ _ZN14riscv_emu_rust6device5clint5Clint4tick17h768958dfb46295b0E ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	while true do
		loc_2 = add_i64(load_i64(memory_at_0, loc_0), i64_ONE)
		store_i64(memory_at_0, loc_0, loc_2)
		while true do
			if ne_i64(band_i64(loc_2, i64_from_u32(7, 0)), i64_ZERO) then
				break
			end
			store_i64(memory_at_0, loc_0 + 16, add_i64(load_i64(memory_at_0, loc_0 + 16), i64_ONE))
			break
		end
		while true do
			if band_i32(load_i32_u8(memory_at_0, loc_0 + 24), 1) == 0 then
				break
			end
			store_i64(memory_at_0, loc_1, bor_i64(load_i64(memory_at_0, loc_1), i64_from_u32(8, 0)))
			break
		end
		while true do
			if ge_u64(add_i64(load_i64(memory_at_0, loc_0 + 8), i64_from_u32(4294967295, 4294967295)), load_i64(memory_at_0, loc_0 + 16)) then
				break
			end
			store_i64(memory_at_0, loc_1, bor_i64(load_i64(memory_at_0, loc_1), i64_from_u32(128, 0)))
			break
		end
		break
	end
end
FUNC_LIST[152] = --[[ _ZN14riscv_emu_rust6device5clint5Clint4load17h33e3ae191c7cf9c3E ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_2 = add_i64(loc_1, i64_from_u32(4261396480, 4294967295))
			if le_u64(loc_2, i64_from_u32(7, 0)) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_2 = add_i64(loc_1, i64_from_u32(4261363720, 4294967295))
													if le_u64(loc_2, i64_from_u32(7, 0)) then
														break
													end
													loc_1 = add_i64(loc_1, i64_from_u32(4261412864, 4294967295))
													if le_u64(loc_1, i64_from_u32(3, 0)) then
														desired = 10
														break
													end
													reg_0 = 0
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if not br_map[1] then
													br_map[1] = (function()
														return { [0] = 1, 2, 3, 4, 5, 6, 7, 8, }
													end)()
												end
												temp = br_map[1][wrap_i32_i64(loc_2)] or 1
												if temp < 5 then
													if temp < 3 then
														if temp < 2 then
															desired = 9
															break
														else
															desired = 8
															break
														end
													elseif temp > 3 then
														desired = 6
														break
													else
														desired = 7
														break
													end
												elseif temp > 5 then
													if temp < 7 then
														desired = 4
														break
													elseif temp > 7 then
														desired = 2
														break
													else
														desired = 3
														break
													end
												else
													desired = 5
													break
												end
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											while true do
												while true do
													while true do
														while true do
															if not br_map[2] then
																br_map[2] = (function()
																	return { [0] = 0, 1, 2, 3, }
																end)()
															end
															temp = br_map[2][wrap_i32_i64(loc_1)] or 0
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 12
																	break
																end
															elseif temp > 2 then
																desired = 10
																break
															else
																desired = 11
																break
															end
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = load_i32(memory_at_0, loc_0 + 24)
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 24), 8)
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 26))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 27))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = load_i32_u8(memory_at_0, loc_0 + 16)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 17))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 18))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 19))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 20))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 21))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 22))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 23))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[3] then
											br_map[3] = (function()
												return { [0] = 7, 6, 5, 4, 3, 2, 1, 0, }
											end)()
										end
										temp = br_map[3][wrap_i32_i64(loc_2)] or 7
										if temp < 4 then
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 7
													break
												end
											elseif temp > 2 then
												desired = 5
												break
											else
												desired = 6
												break
											end
										elseif temp > 4 then
											if temp < 6 then
												desired = 3
												break
											elseif temp > 6 then
												desired = 1
												break
											else
												desired = 2
												break
											end
										else
											desired = 4
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 15))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 14))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 13))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 12))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 11))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 10))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 9))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = load_i32_u8(memory_at_0, loc_0 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[153] = --[[ _ZN14riscv_emu_rust6device5clint5Clint5store17h00077ac5c4a01633E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					loc_3 = add_i64(loc_1, i64_from_u32(4261396480, 4294967295))
																					if le_u64(loc_3, i64_from_u32(7, 0)) then
																						break
																					end
																					loc_3 = add_i64(loc_1, i64_from_u32(4261363720, 4294967295))
																					if le_u64(loc_3, i64_from_u32(7, 0)) then
																						desired = 18
																						break
																					end
																					if ne_i64(loc_1, i64_from_u32(33554432, 0)) then
																						desired = 16
																						break
																					end
																					store_i32(memory_at_0, loc_0 + 24, bor_i32(band_i32(load_i32(memory_at_0, loc_0 + 24), 4294967294), band_i32(loc_2, 1)))
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				if not br_map[1] then
																					br_map[1] = (function()
																						return { [0] = 1, 17, 16, 15, 14, 13, 12, 11, }
																					end)()
																				end
																				temp = br_map[1][wrap_i32_i64(loc_3)] or 1
																				if temp < 14 then
																					if temp < 12 then
																						if temp < 11 then
																							desired = 17
																							break
																						else
																							desired = 7
																							break
																						end
																					elseif temp > 12 then
																						desired = 5
																						break
																					else
																						desired = 6
																						break
																					end
																				elseif temp > 14 then
																					if temp < 16 then
																						desired = 3
																						break
																					elseif temp > 16 then
																						desired = 1
																						break
																					else
																						desired = 2
																						break
																					end
																				else
																					desired = 4
																					break
																				end
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if not br_map[2] then
																				br_map[2] = (function()
																					return { [0] = 9, 8, 7, 6, 5, 4, 3, 2, }
																				end)()
																			end
																			temp = br_map[2][wrap_i32_i64(loc_3)] or 9
																			if temp < 6 then
																				if temp < 4 then
																					if temp < 3 then
																						desired = 15
																						break
																					else
																						desired = 14
																						break
																					end
																				elseif temp > 4 then
																					desired = 12
																					break
																				else
																					desired = 13
																					break
																				end
																			elseif temp > 6 then
																				if temp < 8 then
																					desired = 10
																					break
																				elseif temp > 8 then
																					desired = 8
																					break
																				else
																					desired = 9
																					break
																				end
																			else
																				desired = 11
																				break
																			end
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																store_i64_n8(memory_at_0, add_i32(loc_0, 23), extend_i64_u32(loc_2))
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															store_i64_n8(memory_at_0, add_i32(loc_0, 22), extend_i64_u32(loc_2))
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														store_i64_n8(memory_at_0, add_i32(loc_0, 21), extend_i64_u32(loc_2))
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i64_n8(memory_at_0, add_i32(loc_0, 20), extend_i64_u32(loc_2))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i64_n8(memory_at_0, add_i32(loc_0, 19), extend_i64_u32(loc_2))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i64_n8(memory_at_0, add_i32(loc_0, 18), extend_i64_u32(loc_2))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64_n8(memory_at_0, add_i32(loc_0, 17), extend_i64_u32(loc_2))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32_n8(memory_at_0, loc_0 + 16, loc_2)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i64_n8(memory_at_0, add_i32(loc_0, 15), extend_i64_u32(loc_2))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64_n8(memory_at_0, add_i32(loc_0, 14), extend_i64_u32(loc_2))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64_n8(memory_at_0, add_i32(loc_0, 13), extend_i64_u32(loc_2))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64_n8(memory_at_0, add_i32(loc_0, 12), extend_i64_u32(loc_2))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64_n8(memory_at_0, add_i32(loc_0, 11), extend_i64_u32(loc_2))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64_n8(memory_at_0, add_i32(loc_0, 10), extend_i64_u32(loc_2))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64_n8(memory_at_0, add_i32(loc_0, 9), extend_i64_u32(loc_2))
		break
	end
end
FUNC_LIST[154] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h43aa39c8d9d4628cE.llvm.593338627389149470 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[155] = --[[ _ZN14riscv_emu_rust3mmu3Mmu3new17h090fd6d2a5a6b868E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[353](add_i32(loc_4, 8), 4064, 1)
		store_i32(memory_at_0, loc_4 + 28, 4064)
		store_i64(memory_at_0, loc_4 + 20, load_i64(memory_at_0, loc_4 + 8))
		loc_5 = 0
		while true do
			while true do
				if loc_5 == 1600 then
					desired = 1
					break
				end
				loc_6 = load_i32(memory_at_0, add_i32(loc_5, 1050572))
				reg_0 = FUNC_LIST[154](add_i32(loc_4, 20), loc_5, 1052172)
				store_i32_n8(memory_at_0, reg_0, loc_6)
				reg_0 = FUNC_LIST[154](add_i32(loc_4, 20), add_i32(loc_5, 1), 1052188)
				store_i32_n8(memory_at_0, reg_0, shr_u32(loc_6, 8))
				reg_0 = FUNC_LIST[154](add_i32(loc_4, 20), add_i32(loc_5, 2), 1052204)
				store_i32_n8(memory_at_0, reg_0, shr_u32(loc_6, 16))
				reg_0 = FUNC_LIST[154](add_i32(loc_4, 20), add_i32(loc_5, 3), 1052220)
				store_i32_n8(memory_at_0, reg_0, shr_u32(loc_6, 24))
				loc_5 = add_i32(loc_5, 4)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i64(memory_at_0, loc_0 + 4280, i64_from_u32(8, 0))
		store_i64(memory_at_0, loc_0 + 4292, load_i64(memory_at_0, loc_4 + 20))
		store_i32(memory_at_0, add_i32(loc_0, 4288), 0)
		store_i32(memory_at_0, add_i32(loc_0, 4300), load_i32(memory_at_0, add_i32(add_i32(loc_4, 20), 8)))
		FUNC_LIST[344](add_i32(loc_0, 4192))
		reg_0 = FUNC_LIST[539](add_i32(loc_0, 48), 0, 4120)
		store_i32(memory_at_0, add_i32(loc_0, 24), 0)
		store_i64(memory_at_0, add_i32(loc_0, 16), i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_0, 8), i64_ZERO)
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_0, 4176), i64_ZERO)
		store_i32_n8(memory_at_0, add_i32(loc_0, 4191), 0)
		store_i64(memory_at_0, add_i32(loc_0, 4183), i64_from_u32(0, 536870914))
		store_i32(memory_at_0, add_i32(loc_0, 4172), loc_3)
		store_i32(memory_at_0, loc_0 + 4168, loc_2)
		store_i32_n8(memory_at_0, loc_0 + 4306, loc_1)
		store_i64(memory_at_0, loc_0 + 32, i64_ZERO)
		store_i32_n16(memory_at_0, loc_0 + 4304, 768)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[156] = --[[ _ZN14riscv_emu_rust3mmu3Mmu4tick17h9fe71f3b28ec6c25E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		FUNC_LIST[151](loc_0, loc_1)
		FUNC_LIST[346](add_i32(loc_0, 4192), add_i32(loc_0, 4280))
		loc_2 = add_i32(loc_0, 4168)
		FUNC_LIST[388](loc_2)
		reg_1 = band_i32(load_i32(memory_at_0, add_i32(loc_0, 4244)), 1)
		reg_2 = FUNC_LIST[389](loc_2)
		FUNC_LIST[385](add_i32(loc_0, 48), reg_1, reg_2, loc_1)
		store_i64(memory_at_0, loc_0 + 32, add_i64(load_i64(memory_at_0, loc_0 + 32), i64_ONE))
		break
	end
end
FUNC_LIST[157] = --[[ _ZN14riscv_emu_rust3mmu3Mmu10fetch_word17h2d9f2e29d1124a1fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				if lt_u64(band_i64(loc_2, i64_from_u32(4095, 0)), i64_from_u32(4093, 0)) then
					break
				end
				loc_4 = i64_ZERO
				loc_5 = 0
				loc_6 = 0
				while true do
					while true do
						if ne_i64(loc_4, i64_from_u32(4, 0)) then
							break
						end
						store_i32_n8(memory_at_0, loc_0 + 8, 23)
						store_i32(memory_at_0, loc_0, loc_6)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_7 = add_i64(loc_2, loc_4)
					FUNC_LIST[158](add_i32(loc_3, 16), loc_1, loc_7, 0)
					while true do
						if wrap_i32_i64(load_i64(memory_at_0, loc_3 + 16)) ~= 0 then
							break
						end
						reg_0 = FUNC_LIST[159](loc_1, load_i64(memory_at_0, loc_3 + 24))
						loc_6 = bor_i32(shl_i32(band_i32(reg_0, 255), band_i32(loc_5, 24)), loc_6)
						loc_5 = add_i32(loc_5, 8)
						loc_4 = add_i64(loc_4, i64_ONE)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 11)
				store_i64(memory_at_0, loc_0, loc_7)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = (if load_i32_u8(memory_at_0, loc_1 + 4306) ~= 0 then loc_2 else band_i64(loc_2, i64_from_u32(4294967295, 0)))
			FUNC_LIST[158](loc_3, loc_1, loc_4, 0)
			while true do
				if wrap_i32_i64(load_i64(memory_at_0, loc_3)) == 0 then
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 11)
				store_i64(memory_at_0, loc_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[160](loc_1, load_i64(memory_at_0, loc_3 + 8))
			loc_5 = reg_0
			store_i32_n8(memory_at_0, loc_0 + 8, 23)
			store_i32(memory_at_0, loc_0, loc_5)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[158] = --[[ _ZN14riscv_emu_rust3mmu3Mmu17translate_address17h02456b5fa41ff2a3E.llvm.593338627389149470 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_4
		loc_2 = (if load_i32_u8(memory_at_0, loc_1 + 4306) ~= 0 then loc_2 else band_i64(loc_2, i64_from_u32(4294967295, 0)))
		loc_5 = i64_ZERO
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 0, 1, 3, }
							end)()
						end
						temp = br_map[1][load_i32_u8(memory_at_0, loc_1 + 4304)] or 2
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_1 + 4305) >= 2 then
						desired = 2
						break
					end
					store_i64(memory_at_0, loc_4 + 48, band_i64(shr_u64(loc_2, i64_from_u32(22, 0)), i64_from_u32(1023, 0)))
					store_i64(memory_at_0, loc_4 + 40, band_i64(shr_u64(loc_2, i64_from_u32(12, 0)), i64_from_u32(1023, 0)))
					FUNC_LIST[183](add_i32(loc_4, 8), loc_1, loc_2, 1, load_i64(memory_at_0, loc_1 + 40), add_i32(loc_4, 40), 2, loc_3)
					loc_2 = load_i64(memory_at_0, loc_4 + 16)
					loc_5 = load_i64(memory_at_0, loc_4 + 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32_u8(memory_at_0, loc_1 + 4305) >= 2 then
					break
				end
				store_i64(memory_at_0, loc_4 + 56, band_i64(shr_u64(loc_2, i64_from_u32(30, 0)), i64_from_u32(511, 0)))
				store_i64(memory_at_0, loc_4 + 48, band_i64(shr_u64(loc_2, i64_from_u32(21, 0)), i64_from_u32(511, 0)))
				store_i64(memory_at_0, loc_4 + 40, band_i64(shr_u64(loc_2, i64_from_u32(12, 0)), i64_from_u32(511, 0)))
				FUNC_LIST[183](add_i32(loc_4, 24), loc_1, loc_2, 2, load_i64(memory_at_0, loc_1 + 40), add_i32(loc_4, 40), 3, loc_3)
				loc_2 = load_i64(memory_at_0, loc_4 + 32)
				loc_5 = load_i64(memory_at_0, loc_4 + 24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_5)
			GLOBAL_LIST[0].value = add_i32(loc_4, 64)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[122](1050240, 41, 1050284)
		error("out of code bounds")
	end
end
FUNC_LIST[159] = --[[ _ZN14riscv_emu_rust3mmu3Mmu8load_raw17h67e30a3109eb57abE.llvm.593338627389149470 ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_1 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
		store_i64(memory_at_0, loc_2 + 8, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if gt_u64(loc_1, i64_from_u32(2147483647, 0)) then
										break
									end
									if lt_u64(add_i64(loc_1, i64_from_u32(4294963168, 4294967295)), i64_from_u32(4064, 0)) then
										desired = 6
										break
									end
									if eq_i64(band_i64(loc_1, i64_from_u32(4294901760, 4294967295)), i64_from_u32(33554432, 0)) then
										desired = 5
										break
									end
									if eq_i64(band_i64(loc_1, i64_from_u32(4227858432, 4294967295)), i64_from_u32(201326592, 0)) then
										desired = 4
										break
									end
									if eq_i64(band_i64(loc_1, i64_from_u32(4294967040, 4294967295)), i64_from_u32(268435456, 0)) then
										desired = 3
										break
									end
									if ne_i64(band_i64(loc_1, i64_from_u32(4294963200, 4294967295)), i64_from_u32(268439552, 0)) then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[347](add_i32(loc_0, 4192), loc_1)
									loc_0 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[177](add_i32(loc_0, 4280), loc_1)
								loc_0 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[154](add_i32(loc_0, 4292), add_i32(wrap_i32_i64(loc_1), 4294963168), 1050208)
							loc_0 = load_i32_u8(memory_at_0, reg_0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[152](loc_0, loc_1)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[386](add_i32(loc_0, 48), loc_1)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[390](add_i32(loc_0, 4168), loc_1)
				loc_0 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
			store_i32(memory_at_0, loc_2 + 20, 2)
			store_i32(memory_at_0, loc_2 + 16, 1050176)
			store_i32(memory_at_0, loc_2 + 44, 29)
			store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
			store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
			FUNC_LIST[491](add_i32(loc_2, 16), 1050192)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[160] = --[[ _ZN14riscv_emu_rust3mmu3Mmu13load_word_raw17ha94e1c0c9d7ce51dE ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_2 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
				if lt_u64(add_i64(loc_2, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483645, 4294967295)) then
					break
				end
				loc_1 = i64_ZERO
				loc_3 = 0
				loc_4 = 0
				while true do
					if eq_i64(loc_1, i64_from_u32(4, 0)) then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[159](loc_0, add_i64(loc_2, loc_1))
					loc_4 = bor_i32(shl_i32(band_i32(reg_0, 255), band_i32(loc_3, 24)), loc_4)
					loc_3 = add_i32(loc_3, 8)
					loc_1 = add_i64(loc_1, i64_ONE)
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[178](add_i32(loc_0, 4280), loc_2)
			loc_4 = reg_0
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[161] = --[[ _ZN14riscv_emu_rust3mmu3Mmu4load17haabd913cb4ba6fe5E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[158](loc_3, loc_1, (if load_i32_u8(memory_at_0, loc_1 + 4306) ~= 0 then loc_2 else band_i64(loc_2, i64_from_u32(4294967295, 0))), 1)
		while true do
			while true do
				if wrap_i32_i64(load_i64(memory_at_0, loc_3)) ~= 0 then
					break
				end
				reg_0 = FUNC_LIST[159](loc_1, load_i64(memory_at_0, loc_3 + 8))
				loc_1 = reg_0
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				store_i32_n8(memory_at_0, loc_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, 12)
			store_i64(memory_at_0, loc_0, loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[162] = --[[ _ZN14riscv_emu_rust3mmu3Mmu10load_bytes17h23603a97f74a76cdE.llvm.593338627389149470 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_4
		store_i64(memory_at_0, loc_4 + 24, loc_3)
		while true do
			while true do
				while true do
					if gt_u64(loc_3, i64_from_u32(8, 0)) then
						break
					end
					if eq_i64(band_i64(shl_i64(i64_ONE, loc_3), i64_from_u32(276, 0)), i64_ZERO) then
						break
					end
					while true do
						if le_u64(band_i64(loc_2, i64_from_u32(4095, 0)), sub_i64(i64_from_u32(4096, 0), loc_3)) then
							break
						end
						loc_5 = i64_ZERO
						loc_6 = i64_ZERO
						while true do
							while true do
								if ne_i64(loc_3, i64_ZERO) then
									break
								end
								store_i32_n8(memory_at_0, loc_0 + 8, 23)
								store_i64(memory_at_0, loc_0, loc_6)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[161](add_i32(loc_4, 32), loc_1, loc_2)
							while true do
								loc_7 = load_i32_u8(memory_at_0, loc_4 + 40)
								if loc_7 ~= 23 then
									break
								end
								loc_3 = add_i64(loc_3, i64_from_u32(4294967295, 4294967295))
								loc_2 = add_i64(loc_2, i64_ONE)
								loc_6 = bor_i64(shl_i64(load_i64_u8(memory_at_0, loc_4 + 32), band_i64(loc_5, i64_from_u32(56, 0))), loc_6)
								loc_5 = add_i64(loc_5, i64_from_u32(8, 0))
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
						store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4 + 32))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[158](add_i32(loc_4, 8), loc_1, loc_2, 1)
					if load_i32(memory_at_0, loc_4 + 8) == 0 then
						desired = 2
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 8, 12)
					store_i64(memory_at_0, loc_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(loc_4, 44), i64_ONE)
				store_i32(memory_at_0, loc_4 + 36, 1)
				store_i32(memory_at_0, loc_4 + 32, 1050080)
				store_i32(memory_at_0, loc_4 + 60, 29)
				store_i32(memory_at_0, loc_4 + 40, add_i32(loc_4, 56))
				store_i32(memory_at_0, loc_4 + 56, add_i32(loc_4, 24))
				FUNC_LIST[491](add_i32(loc_4, 32), 1050104)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							loc_2 = add_i64(loc_3, i64_from_u32(4294967294, 4294967295))
							if gt_u64(loc_2, i64_from_u32(6, 0)) then
								break
							end
							loc_3 = load_i64(memory_at_0, loc_4 + 16)
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, 2, 0, 0, 0, 3, }
								end)()
							end
							temp = br_map[1][wrap_i32_i64(loc_2)] or 1
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, add_i32(loc_4, 44), i64_ONE)
						store_i32(memory_at_0, loc_4 + 36, 1)
						store_i32(memory_at_0, loc_4 + 32, 1050080)
						store_i32(memory_at_0, loc_4 + 60, 29)
						store_i32(memory_at_0, loc_4 + 40, add_i32(loc_4, 56))
						store_i32(memory_at_0, loc_4 + 56, add_i32(loc_4, 24))
						FUNC_LIST[491](add_i32(loc_4, 32), 1050088)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = (if load_i32_u8(memory_at_0, loc_1 + 4306) ~= 0 then loc_3 else band_i64(loc_3, i64_from_u32(4294967295, 0)))
							if lt_u64(add_i64(loc_2, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483647, 4294967295)) then
								break
							end
							loc_7 = 0
							loc_3 = i64_ZERO
							while true do
								if eq_i64(loc_3, i64_from_u32(2, 0)) then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[159](loc_1, add_i64(loc_2, loc_3))
								loc_7 = bor_i32(shl_i32(band_i32(reg_0, 255), band_i32(shl_i32(wrap_i32_i64(loc_3), 3), 8)), loc_7)
								loc_3 = add_i64(loc_3, i64_ONE)
								continue
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[163](add_i32(loc_1, 4280), loc_2)
						loc_7 = reg_0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 8, 23)
					store_i64(memory_at_0, loc_0, band_i64(extend_i64_u32(loc_7), i64_from_u32(65535, 0)))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[160](loc_1, loc_3)
				loc_1 = reg_0
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				store_i64(memory_at_0, loc_0, extend_i64_u32(loc_1))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[164](loc_1, loc_3)
			loc_3 = reg_0
			store_i32_n8(memory_at_0, loc_0 + 8, 23)
			store_i64(memory_at_0, loc_0, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 64)
		break
	end
end
FUNC_LIST[163] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper13read_halfword17h86815f5fb30b4916E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i64(memory_at_0, loc_2 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_ONE), i64_from_u32(2147483649, 0)) then
				break
			end
			reg_0 = FUNC_LIST[142](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)))
			loc_0 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_2, 48)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
		store_i32(memory_at_0, loc_2 + 20, 1)
		store_i32(memory_at_0, loc_2 + 16, 1050436)
		store_i32(memory_at_0, loc_2 + 44, 29)
		store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
		store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
		FUNC_LIST[491](add_i32(loc_2, 16), 1050460)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[164] = --[[ _ZN14riscv_emu_rust3mmu3Mmu19load_doubleword_raw17hdda0b0f12ba1d5cbE ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_2 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
				if lt_u64(add_i64(loc_2, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483641, 4294967295)) then
					break
				end
				loc_1 = i64_ZERO
				loc_3 = i64_ZERO
				while true do
					if eq_i64(loc_1, i64_from_u32(64, 0)) then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[159](loc_0, loc_2)
					loc_3 = bor_i64(shl_i64(band_i64(extend_i64_u32(reg_0), i64_from_u32(255, 0)), band_i64(loc_1, i64_from_u32(56, 0))), loc_3)
					loc_1 = add_i64(loc_1, i64_from_u32(8, 0))
					loc_2 = add_i64(loc_2, i64_ONE)
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[179](add_i32(loc_0, 4280), loc_2)
			loc_3 = reg_0
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[165] = --[[ _ZN14riscv_emu_rust3mmu3Mmu13load_halfword17h2d7719cf23d2617bE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[162](loc_3, loc_1, loc_2, i64_from_u32(2, 0))
		loc_2 = load_i64(memory_at_0, loc_3)
		while true do
			while true do
				loc_1 = load_i32_u8(memory_at_0, loc_3 + 8)
				if loc_1 ~= 23 then
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				store_i64_n16(memory_at_0, loc_0, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_1)
			store_i64(memory_at_0, loc_0, loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[166] = --[[ _ZN14riscv_emu_rust3mmu3Mmu9load_word17h9304eaac3c4a527eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[162](loc_3, loc_1, loc_2, i64_from_u32(4, 0))
		loc_2 = load_i64(memory_at_0, loc_3)
		while true do
			while true do
				loc_1 = load_i32_u8(memory_at_0, loc_3 + 8)
				if loc_1 ~= 23 then
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				store_i64_n32(memory_at_0, loc_0, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_1)
			store_i64(memory_at_0, loc_0, loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[167] = --[[ _ZN14riscv_emu_rust3mmu3Mmu15load_doubleword17h8a28d0bebb158585E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[162](loc_3, loc_1, loc_2, i64_from_u32(8, 0))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3))
		while true do
			while true do
				loc_1 = load_i32_u8(memory_at_0, loc_3 + 8)
				if loc_1 ~= 23 then
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[168] = --[[ _ZN14riscv_emu_rust3mmu3Mmu5store17h11658ce5ef97d6b3E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[158](loc_4, loc_1, loc_2, 2)
		loc_5 = 13
		while true do
			if wrap_i32_i64(load_i64(memory_at_0, loc_4)) ~= 0 then
				break
			end
			FUNC_LIST[169](loc_1, load_i64(memory_at_0, loc_4 + 8), loc_3)
			loc_5 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_5)
		store_i64(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[169] = --[[ _ZN14riscv_emu_rust3mmu3Mmu9store_raw17h511b08a87782d233E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_1 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
		store_i64(memory_at_0, loc_3 + 8, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if gt_u64(loc_1, i64_from_u32(2147483647, 0)) then
									break
								end
								if eq_i64(band_i64(loc_1, i64_from_u32(4294901760, 4294967295)), i64_from_u32(33554432, 0)) then
									desired = 5
									break
								end
								if eq_i64(band_i64(loc_1, i64_from_u32(4227858432, 4294967295)), i64_from_u32(201326592, 0)) then
									desired = 4
									break
								end
								if eq_i64(band_i64(loc_1, i64_from_u32(4294967040, 4294967295)), i64_from_u32(268435456, 0)) then
									desired = 3
									break
								end
								if ne_i64(band_i64(loc_1, i64_from_u32(4294963200, 4294967295)), i64_from_u32(268439552, 0)) then
									desired = 2
									break
								end
								FUNC_LIST[348](add_i32(loc_0, 4192), loc_1, loc_2)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[180](add_i32(loc_0, 4280), loc_1, loc_2)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[153](loc_0, loc_1, loc_2)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[387](add_i32(loc_0, 48), loc_1, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[391](add_i32(loc_0, 4168), loc_1, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
			store_i32(memory_at_0, loc_3 + 20, 2)
			store_i32(memory_at_0, loc_3 + 16, 1050176)
			store_i32(memory_at_0, loc_3 + 44, 29)
			store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
			store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
			FUNC_LIST[491](add_i32(loc_3, 16), 1050224)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[170] = --[[ _ZN14riscv_emu_rust3mmu3Mmu11store_bytes17h5056b4094307fb03E.llvm.593338627389149470 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_5
		store_i64(memory_at_0, loc_5 + 40, loc_4)
		while true do
			if gt_u64(loc_4, i64_from_u32(8, 0)) then
				break
			end
			if eq_i64(band_i64(shl_i64(i64_ONE, loc_4), i64_from_u32(276, 0)), i64_ZERO) then
				break
			end
			while true do
				while true do
					if le_u64(band_i64(loc_2, i64_from_u32(4095, 0)), sub_i64(i64_from_u32(4096, 0), loc_4)) then
						break
					end
					loc_6 = i64_ZERO
					while true do
						while true do
							if (if eq_i64(loc_4, i64_ZERO) then 1 else 0) == 0 then
								break
							end
							loc_7 = 23
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						FUNC_LIST[168](add_i32(loc_5, 8), loc_1, loc_2, wrap_i32_i64(shr_u64(loc_3, band_i64(loc_6, i64_from_u32(56, 0)))))
						loc_4 = add_i64(loc_4, i64_from_u32(4294967295, 4294967295))
						loc_6 = add_i64(loc_6, i64_from_u32(8, 0))
						loc_2 = add_i64(loc_2, i64_ONE)
						loc_7 = load_i32_u8(memory_at_0, loc_5 + 16)
						if loc_7 == 23 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = load_i64(memory_at_0, loc_5 + 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[158](add_i32(loc_5, 24), loc_1, loc_2, 2)
				loc_7 = 13
				if load_i32(memory_at_0, loc_5 + 24) ~= 0 then
					break
				end
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_6 = add_i64(loc_4, i64_from_u32(4294967294, 4294967295))
										if gt_u64(loc_6, i64_from_u32(6, 0)) then
											break
										end
										loc_4 = load_i64(memory_at_0, loc_5 + 32)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 1, 0, 2, 0, 0, 0, 3, }
											end)()
										end
										temp = br_map[1][wrap_i32_i64(loc_6)] or 1
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i64(memory_at_0, add_i32(loc_5, 60), i64_ONE)
									store_i32(memory_at_0, loc_5 + 52, 1)
									store_i32(memory_at_0, loc_5 + 48, 1050080)
									store_i32(memory_at_0, loc_5 + 76, 29)
									store_i32(memory_at_0, loc_5 + 56, add_i32(loc_5, 72))
									store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 40))
									FUNC_LIST[491](add_i32(loc_5, 48), 1050120)
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = wrap_i32_i64(loc_3)
								loc_6 = (if load_i32_u8(memory_at_0, loc_1 + 4306) ~= 0 then loc_4 else band_i64(loc_4, i64_from_u32(4294967295, 0)))
								if lt_u64(add_i64(loc_6, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483647, 4294967295)) then
									desired = 4
									break
								end
								loc_4 = i64_ZERO
								loc_7 = band_i32(loc_7, 65535)
								while true do
									if eq_i64(loc_4, i64_from_u32(2, 0)) then
										desired = 3
										break
									end
									FUNC_LIST[169](loc_1, add_i64(loc_6, loc_4), shr_u32(loc_7, band_i32(shl_i32(wrap_i32_i64(loc_4), 3), 8)))
									loc_4 = add_i64(loc_4, i64_ONE)
									continue
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[171](loc_1, loc_4, wrap_i32_i64(loc_3))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[172](loc_1, loc_4, loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[173](add_i32(loc_1, 4280), loc_6, loc_7)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = 23
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
			store_i64(memory_at_0, loc_0, loc_2)
			GLOBAL_LIST[0].value = add_i32(loc_5, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_5, 60), i64_ONE)
		store_i32(memory_at_0, loc_5 + 52, 1)
		store_i32(memory_at_0, loc_5 + 48, 1050080)
		store_i32(memory_at_0, loc_5 + 76, 29)
		store_i32(memory_at_0, loc_5 + 56, add_i32(loc_5, 72))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 40))
		FUNC_LIST[491](add_i32(loc_5, 48), 1050136)
		error("out of code bounds")
	end
end
FUNC_LIST[171] = --[[ _ZN14riscv_emu_rust3mmu3Mmu14store_word_raw17hf84465973da553feE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local desired
	while true do
		while true do
			while true do
				loc_3 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
				if lt_u64(add_i64(loc_3, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483645, 4294967295)) then
					break
				end
				loc_1 = i64_ZERO
				loc_4 = 0
				while true do
					if eq_i64(loc_1, i64_from_u32(4, 0)) then
						desired = 1
						break
					end
					FUNC_LIST[169](loc_0, add_i64(loc_3, loc_1), shr_u32(loc_2, band_i32(loc_4, 24)))
					loc_4 = add_i32(loc_4, 8)
					loc_1 = add_i64(loc_1, i64_ONE)
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[181](add_i32(loc_0, 4280), loc_3, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[172] = --[[ _ZN14riscv_emu_rust3mmu3Mmu20store_doubleword_raw17h7bd20f6fae0833f5E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local desired
	while true do
		while true do
			while true do
				loc_3 = (if load_i32_u8(memory_at_0, loc_0 + 4306) ~= 0 then loc_1 else band_i64(loc_1, i64_from_u32(4294967295, 0)))
				if lt_u64(add_i64(loc_3, i64_from_u32(2147483648, 4294967295)), i64_from_u32(2147483641, 4294967295)) then
					break
				end
				loc_1 = i64_ZERO
				while true do
					if eq_i64(loc_1, i64_from_u32(64, 0)) then
						desired = 1
						break
					end
					FUNC_LIST[169](loc_0, loc_3, wrap_i32_i64(shr_u64(loc_2, band_i64(loc_1, i64_from_u32(56, 0)))))
					loc_1 = add_i64(loc_1, i64_from_u32(8, 0))
					loc_3 = add_i64(loc_3, i64_ONE)
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[182](add_i32(loc_0, 4280), loc_3, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[173] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper14write_halfword17hdb46a48b702e39a1E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_ONE), i64_from_u32(2147483649, 0)) then
				break
			end
			FUNC_LIST[147](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)), loc_2)
			GLOBAL_LIST[0].value = add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
		store_i32(memory_at_0, loc_3 + 20, 1)
		store_i32(memory_at_0, loc_3 + 16, 1050436)
		store_i32(memory_at_0, loc_3 + 44, 29)
		store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
		FUNC_LIST[491](add_i32(loc_3, 16), 1050524)
		error("out of code bounds")
	end
end
FUNC_LIST[174] = --[[ _ZN14riscv_emu_rust3mmu3Mmu14store_halfword17hd219f636925478a3E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[170](loc_4, loc_1, loc_2, band_i64(extend_i64_u32(loc_3), i64_from_u32(65535, 0)), i64_from_u32(2, 0))
		loc_2 = load_i64(memory_at_0, loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[175] = --[[ _ZN14riscv_emu_rust3mmu3Mmu10store_word17h9aab5a187b25d588E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[170](loc_4, loc_1, loc_2, extend_i64_u32(loc_3), i64_from_u32(4, 0))
		loc_2 = load_i64(memory_at_0, loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[176] = --[[ _ZN14riscv_emu_rust3mmu3Mmu16store_doubleword17h02fa64dd0c4f2b22E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[170](loc_4, loc_1, loc_2, loc_3, i64_from_u32(8, 0))
		loc_3 = load_i64(memory_at_0, loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[177] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper9read_byte17h92bbfea2086e3784E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i64(memory_at_0, loc_2 + 8, loc_1)
		while true do
			if lt_u64(loc_1, i64_from_u32(2147483648, 0)) then
				break
			end
			reg_0 = FUNC_LIST[141](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)))
			loc_0 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_2, 48)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
		store_i32(memory_at_0, loc_2 + 20, 1)
		store_i32(memory_at_0, loc_2 + 16, 1050436)
		store_i32(memory_at_0, loc_2 + 44, 29)
		store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
		store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
		FUNC_LIST[491](add_i32(loc_2, 16), 1050444)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[178] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper9read_word17h76b8f9c418ca6fbaE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i64(memory_at_0, loc_2 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_from_u32(3, 0)), i64_from_u32(2147483651, 0)) then
				break
			end
			reg_0 = FUNC_LIST[144](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)))
			loc_0 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_2, 48)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
		store_i32(memory_at_0, loc_2 + 20, 1)
		store_i32(memory_at_0, loc_2 + 16, 1050436)
		store_i32(memory_at_0, loc_2 + 44, 29)
		store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
		store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
		FUNC_LIST[491](add_i32(loc_2, 16), 1050476)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[179] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper15read_doubleword17hf479a9de620f84abE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i64(memory_at_0, loc_2 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_from_u32(7, 0)), i64_from_u32(2147483655, 0)) then
				break
			end
			reg_0 = FUNC_LIST[145](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)))
			loc_1 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_2, 48)
			reg_0 = loc_1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
		store_i32(memory_at_0, loc_2 + 20, 1)
		store_i32(memory_at_0, loc_2 + 16, 1050436)
		store_i32(memory_at_0, loc_2 + 44, 29)
		store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
		store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
		FUNC_LIST[491](add_i32(loc_2, 16), 1050492)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[180] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper10write_byte17h483dd2ab31dee544E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if lt_u64(loc_1, i64_from_u32(2147483648, 0)) then
				break
			end
			FUNC_LIST[146](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)), loc_2)
			GLOBAL_LIST[0].value = add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
		store_i32(memory_at_0, loc_3 + 20, 1)
		store_i32(memory_at_0, loc_3 + 16, 1050436)
		store_i32(memory_at_0, loc_3 + 44, 29)
		store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
		FUNC_LIST[491](add_i32(loc_3, 16), 1050508)
		error("out of code bounds")
	end
end
FUNC_LIST[181] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper10write_word17hb6afbcfc76f7823aE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_from_u32(3, 0)), i64_from_u32(2147483651, 0)) then
				break
			end
			FUNC_LIST[149](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)), loc_2)
			GLOBAL_LIST[0].value = add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
		store_i32(memory_at_0, loc_3 + 20, 1)
		store_i32(memory_at_0, loc_3 + 16, 1050436)
		store_i32(memory_at_0, loc_3 + 44, 29)
		store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
		FUNC_LIST[491](add_i32(loc_3, 16), 1050540)
		error("out of code bounds")
	end
end
FUNC_LIST[182] = --[[ _ZN14riscv_emu_rust3mmu13MemoryWrapper16write_doubleword17h7bd0617971703c3fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if lt_u64(add_i64(loc_1, i64_from_u32(7, 0)), i64_from_u32(2147483655, 0)) then
				break
			end
			FUNC_LIST[150](loc_0, add_i64(loc_1, i64_from_u32(2147483648, 4294967295)), loc_2)
			GLOBAL_LIST[0].value = add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
		store_i32(memory_at_0, loc_3 + 20, 1)
		store_i32(memory_at_0, loc_3 + 16, 1050436)
		store_i32(memory_at_0, loc_3 + 44, 29)
		store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
		FUNC_LIST[491](add_i32(loc_3, 16), 1050556)
		error("out of code bounds")
	end
end
FUNC_LIST[183] = --[[ _ZN14riscv_emu_rust3mmu3Mmu13traverse_page17h9d2970d79c6004e6E.llvm.593338627389149470 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local loc_18 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			while true do
				while true do
					while true do
						loc_9 = band_i32(loc_3, 255)
						if loc_9 >= loc_6 then
							break
						end
						loc_9 = (if load_i32_u8(memory_at_0, loc_1 + 4304) == 1 then 1 else 0)
						loc_10 = add_i64(shl_i64(load_i64(memory_at_0, add_i32(loc_5, shl_i32(loc_9, 3))), (if loc_9 ~= 0 then i64_from_u32(2, 0) else i64_from_u32(3, 0))), shl_i64(loc_4, i64_from_u32(12, 0)))
						while true do
							while true do
								if loc_9 == 0 then
									break
								end
								reg_0 = FUNC_LIST[160](loc_1, loc_10)
								loc_4 = extend_i64_u32(reg_0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[164](loc_1, loc_10)
							loc_4 = reg_0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_11 = shr_u64(loc_4, i64_from_u32(10, 0))
						while true do
							while true do
								while true do
									while true do
										loc_9 = load_i32_u8(memory_at_0, loc_1 + 4304)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 1, 2, }
											end)()
										end
										temp = br_map[1][add_i32(loc_9, 4294967295)] or 0
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[122](1050316, 14, 1050364)
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_12 = band_i64(loc_11, i64_from_u32(1023, 0))
								loc_13 = band_i64(shr_u64(loc_4, i64_from_u32(20, 0)), i64_from_u32(4095, 0))
								loc_14 = i64_ZERO
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_12 = band_i64(loc_11, i64_from_u32(511, 0))
							loc_14 = band_i64(shl_i64(loc_4, i64_from_u32(2, 0)), i64_from_u32(3221225472, 16777215))
							loc_13 = band_i64(shr_u64(loc_4, i64_from_u32(19, 0)), i64_from_u32(511, 0))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_15 = i64_ONE
						if eq_i64(band_i64(loc_4, i64_ONE), i64_ZERO) then
							desired = 2
							break
						end
						loc_16 = band_i64(shr_u64(loc_4, i64_from_u32(2, 0)), i64_ONE)
						while true do
							loc_17 = band_i64(loc_4, i64_from_u32(2, 0))
							if ne_i64(loc_17, i64_ZERO) then
								break
							end
							if ne_i64(loc_16, i64_ZERO) then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_11 = band_i64((if loc_9 == 1 then i64_from_u32(4194303, 0) else i64_from_u32(4294967295, 4095)), loc_11)
						while true do
							while true do
								while true do
									if eq_i64(band_i64(loc_4, i64_from_u32(10, 0)), i64_ZERO) then
										break
									end
									if eq_i64(band_i64(loc_4, i64_from_u32(64, 0)), i64_ZERO) then
										desired = 6
										break
									end
									if band_i32(loc_7, 255) ~= 2 then
										desired = 3
										break
									end
									if eq_i64(band_i64(loc_4, i64_from_u32(128, 0)), i64_ZERO) then
										desired = 6
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if band_i32(loc_3, 255) ~= 0 then
									desired = 5
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_18 = bor_i64(loc_4, (if band_i32(loc_7, 255) == 2 then i64_from_u32(192, 0) else i64_from_u32(64, 0)))
							while true do
								if loc_9 ~= 1 then
									break
								end
								FUNC_LIST[171](loc_1, loc_10, wrap_i32_i64(loc_18))
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[172](loc_1, loc_10, loc_18)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[183](loc_8, loc_1, loc_2, add_i32(loc_3, 4294967295), loc_11, loc_5, loc_6, loc_7)
						loc_4 = load_i64(memory_at_0, loc_8 + 8)
						loc_15 = load_i64(memory_at_0, loc_8)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](2, 2, 1050300)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 0, 1, 2, }
									end)()
								end
								temp = br_map[2][band_i32(loc_7, 255)] or 3
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if eq_i64(band_i64(loc_4, i64_from_u32(8, 0)), i64_ZERO) then
								desired = 2
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if eq_i64(loc_17, i64_ZERO) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if eq_i64(loc_16, i64_ZERO) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							if load_i32_u8(memory_at_0, loc_1 + 4304) == 1 then
								break
							end
							while true do
								while true do
									while true do
										while true do
											if not br_map[3] then
												br_map[3] = (function()
													return { [0] = 1, 3, 2, }
												end)()
											end
											temp = br_map[3][band_i32(loc_3, 255)] or 0
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 8
													break
												end
											elseif temp > 2 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[122](1050316, 14, 1050348)
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = shl_i64(loc_11, i64_from_u32(12, 0))
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if (if eq_i64(bor_i64(loc_12, loc_13), i64_ZERO) then 1 else 0) == 0 then
									desired = 1
									break
								end
								loc_4 = bor_i64(bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 8), i64_from_u32(21, 0)), shl_i64(load_i64(memory_at_0, loc_5), i64_from_u32(12, 0))), loc_14)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if (if eq_i64(loc_12, i64_ZERO) then 1 else 0) == 0 then
								desired = 1
								break
							end
							loc_4 = bor_i64(bor_i64(shl_i64(loc_13, i64_from_u32(21, 0)), shl_i64(load_i64(memory_at_0, loc_5), i64_from_u32(12, 0))), loc_14)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if not br_map[4] then
									br_map[4] = (function()
										return { [0] = 1, 0, }
									end)()
								end
								temp = br_map[4][band_i32(loc_3, 255)] or 3
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 3
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if (if eq_i64(loc_12, i64_ZERO) then 1 else 0) == 0 then
								desired = 1
								break
							end
							loc_4 = bor_i64(shl_i64(load_i64(memory_at_0, loc_5), i64_from_u32(12, 0)), shl_i64(loc_13, i64_from_u32(22, 0)))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = shl_i64(loc_11, i64_from_u32(12, 0))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = bor_i64(loc_4, band_i64(loc_2, i64_from_u32(4095, 0)))
					loc_15 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[122](1050316, 14, 1050332)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i64(memory_at_0, loc_0 + 8, loc_4)
		store_i64(memory_at_0, loc_0, loc_15)
		GLOBAL_LIST[0].value = add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[184] = --[[ _ZN3std11collections4hash3map11RandomState3new4KEYS7__getit17h36aea65bfa82ea0fE ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[379](1065408, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[185] = --[[ _ZN4core3ops8function6FnOnce9call_once17h00fd7e1f605bc2a4E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					loc_6 = load_i32_u8(memory_at_0, loc_1 + 37689)
					if loc_6 ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				loc_7 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					if loc_6 ~= 0 then
						break
					end
					loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if ge_i64(loc_5, loc_7) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056612)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056628)
		error("out of code bounds")
	end
end
FUNC_LIST[186] = --[[ _ZN14riscv_emu_rust3cpu14parse_format_b17hb44ba5f7560cd770E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = shr_u32(loc_1, 20)
		store_i32(memory_at_0, loc_0 + 12, band_i32(loc_2, 31))
		store_i32(memory_at_0, loc_0 + 8, band_i32(shr_u32(loc_1, 15), 31))
		store_i64(memory_at_0, loc_0, extend_i64_i32(bor_i32(bor_i32(bor_i32(band_i32(shr_i32(loc_1, 31), 4294963200), band_i32(shl_i32(loc_1, 4), 2048)), band_i32(loc_2, 2016)), band_i32(shr_u32(loc_1, 7), 30))))
		break
	end
end
FUNC_LIST[187] = --[[ _ZN4core3ops8function6FnOnce9call_once17h0127cabcf76e9ab8E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				reg_1 = add_i32(loc_1, 33376)
				loc_1 = add_i32(loc_1, 32768)
				FUNC_LIST[175](loc_4, reg_1, add_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4 + 16)), load_i32(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3))))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057372)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057388)
		error("out of code bounds")
	end
end
FUNC_LIST[188] = --[[ _ZN14riscv_emu_rust3cpu14parse_format_s17hd31d3a1562a4b1f2E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = shr_u32(loc_1, 20)
		store_i32(memory_at_0, loc_0 + 12, band_i32(loc_2, 31))
		store_i32(memory_at_0, loc_0 + 8, band_i32(shr_u32(loc_1, 15), 31))
		store_i64(memory_at_0, loc_0, extend_i64_i32(bor_i32(bor_i32(band_i32(shr_i32(loc_1, 31), 4294963200), band_i32(loc_2, 4064)), band_i32(shr_u32(loc_1, 7), 31))))
		break
	end
end
FUNC_LIST[189] = --[[ _ZN4core3ops8function6FnOnce9call_once17h035031437b3da758E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = band_i32(shr_u32(loc_2, 20), 31)
		loc_6 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
		while true do
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_6 = mul_i64(load_i64_u32(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768)), loc_6)
				loc_6 = bor_i64(band_i64(shr_i64(loc_6, i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), shr_u64(loc_6, i64_from_u32(32, 0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[540](loc_4, load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768)), i64_ZERO, loc_6, shr_i64(loc_6, i64_from_u32(63, 0)))
			loc_6 = load_i64(memory_at_0, add_i32(loc_4, 8))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_6)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[190] = --[[ _ZN4core3ops8function6FnOnce9call_once17h08395d469eb0b9a5E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[166](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_u32(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1057148)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057132)
		error("out of code bounds")
	end
end
FUNC_LIST[191] = --[[ _ZN14riscv_emu_rust3cpu14parse_format_i17h6b0281ffb9bfc66dE ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 12, band_i32(shr_u32(loc_1, 15), 31))
		store_i32(memory_at_0, loc_0 + 8, band_i32(shr_u32(loc_1, 7), 31))
		store_i64(memory_at_0, loc_0, extend_i64_i32(bor_i32(band_i32(shr_i32(loc_1, 31), 4294965248), band_i32(shr_u32(loc_1, 20), 2047))))
		break
	end
end
FUNC_LIST[192] = --[[ _ZN4core3ops8function6FnOnce9call_once17h0bf76e2f53ad12ddE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](loc_4, add_i32(loc_1, 33376), load_i64(memory_at_0, loc_5))
		while true do
			while true do
				loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_6 == 23 then
					break
				end
				loc_7 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_1 + 37691, 1)
			store_i64(memory_at_0, loc_1 + 33296, load_i64(memory_at_0, loc_5))
			store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), load_i64_i32(memory_at_0, loc_4))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_7)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[193] = --[[ _ZN4core3ops8function6FnOnce9call_once17h0cf25d1cc459c2e5E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 32768)
		loc_6 = load_i64(memory_at_0, add_i32(loc_5, band_i32(shr_u32(loc_2, 17), 248)))
		loc_7 = load_i64(memory_at_0, add_i32(loc_5, band_i32(shr_u32(loc_2, 12), 248)))
		while true do
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_6 = mul_i64(band_i64(loc_6, i64_from_u32(4294967295, 0)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
				loc_6 = bor_i64(band_i64(shr_i64(loc_6, i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), shr_u64(loc_6, i64_from_u32(32, 0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[540](loc_4, loc_6, i64_ZERO, loc_7, i64_ZERO)
			loc_6 = load_i64(memory_at_0, add_i32(loc_4, 8))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_6)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[194] = --[[ _ZN4core3ops8function6FnOnce9call_once17h0efbe8a9785a2d4eE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		while true do
			while true do
				loc_4 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))
				loc_5 = load_i32_u8(memory_at_0, loc_1 + 37689)
				loc_4 = (if loc_5 ~= 0 then loc_4 else band_i64(loc_4, i64_from_u32(4294967295, 0)))
				if (if eq_i64(loc_4, i64_ZERO) then 1 else 0) == 0 then
					break
				end
				loc_4 = i64_from_u32(4294967295, 4294967295)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
			loc_4 = div_u64((if loc_5 ~= 0 then loc_6 else band_i64(loc_6, i64_from_u32(4294967295, 0))), loc_4)
			if loc_5 ~= 0 then
				break
			end
			loc_4 = bor_i64(band_i64(shr_i64(shl_i64(loc_4, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_4, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[195] = --[[ _ZN4core3ops8function6FnOnce9call_once17h10ab3840cee8b3f0E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_i32(shl_i32(load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[196] = --[[ _ZN4core3ops8function6FnOnce9call_once17h11e32aad414cf1c2E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), (load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) * load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[197] = --[[ _ZN4core3ops8function6FnOnce9call_once17h15d7274a0e7f5f55E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = bor_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)))
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_5)
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057180)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057196)
		error("out of code bounds")
	end
end
FUNC_LIST[198] = --[[ _ZN4core3ops8function6FnOnce9call_once17h17799ab0cddb9787E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = add_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[199] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1a18391af45a4660E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), bxor_i64(band_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))), i64_from_u32(0, 2147483648)), load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[200] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1b5c9e90bd738d29E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[165](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_u16(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1057084)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057068)
		error("out of code bounds")
	end
end
FUNC_LIST[201] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1b9dee5cf81fb35eE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 33024)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[202] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1cf9cf6cb7d522c7E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i32(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		while true do
			loc_4 = load_i32(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
			if loc_4 == 0 then
				break
			end
			loc_5 = (loc_5 % loc_4)
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), extend_i64_i32(loc_5))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[203] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1da329ab923e9c57E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		while true do
			while true do
				loc_4 = load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))
				if loc_4 ~= 0 then
					break
				end
				loc_5 = i64_from_u32(4294967295, 4294967295)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = extend_i64_i32(div_u32(load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)), loc_4))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[204] = --[[ _ZN4core3ops8function6FnOnce9call_once17h1f06e9c9a18787f4E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_n32(add_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[205] = --[[ _ZN4core3ops8function6FnOnce9call_once17h25b52f737e12795dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[206](loc_4, loc_2)
		store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(load_i32(memory_at_0, loc_4 + 8), 3)), 32768), load_i64(memory_at_0, loc_4))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[206] = --[[ _ZN14riscv_emu_rust3cpu14parse_format_u17ha2e30132025a6560E ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 8, band_i32(shr_u32(loc_1, 7), 31))
		store_i64(memory_at_0, loc_0, bor_i64((if gt_i32(loc_1, 4294967295) then i64_ZERO else i64_from_u32(0, 4294967295)), extend_i64_u32(band_i32(loc_1, 4294963200))))
		break
	end
end
FUNC_LIST[207] = --[[ _ZN4core3ops8function6FnOnce9call_once17h27a354ee627b18e6E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = band_i32(shr_u32(loc_2, 7), 31)
		while true do
			while true do
				loc_5 = add_i32(loc_1, 32768)
				loc_6 = load_i32(memory_at_0, add_i32(loc_5, band_i32(shr_u32(loc_2, 17), 248)))
				if loc_6 == 0 then
					break
				end
				while true do
					while true do
						loc_7 = load_i64(memory_at_0, add_i32(loc_5, band_i32(shr_u32(loc_2, 12), 248)))
						loc_2 = wrap_i32_i64(loc_7)
						if loc_2 ~= 2147483648 then
							break
						end
						if loc_6 == 4294967295 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768), extend_i64_i32(div_i32(loc_2, loc_6)))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768), extend_i64_n32(loc_7))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768), i64_from_u32(4294967295, 4294967295))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[208] = --[[ _ZN4core3ops8function6FnOnce9call_once17h28870b52193289d0E ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768)
		loc_1 = add_i32(loc_1, 33024)
		store_i64(memory_at_0, reg_0, extend_i64_u32((if load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) == load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))) then 1 else 0)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[209] = --[[ _ZN4core3ops8function6FnOnce9call_once17h296a45327580cd10E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = load_i64(memory_at_0, loc_1 + 33288)
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		FUNC_LIST[210](loc_4, loc_2)
		loc_6 = load_i64(memory_at_0, loc_4)
		store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(load_i32(memory_at_0, loc_4 + 8), 3)), 32768), loc_5)
		store_i64(memory_at_0, loc_1 + 33288, add_i64(loc_6, loc_3))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[210] = --[[ _ZN14riscv_emu_rust3cpu14parse_format_j17h3d232b9cf0bfa370E ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 8, band_i32(shr_u32(loc_1, 7), 31))
		store_i64(memory_at_0, loc_0, extend_i64_i32(bor_i32(bor_i32(bor_i32(band_i32(shr_i32(loc_1, 31), 4293918720), band_i32(loc_1, 1044480)), band_i32(shr_u32(loc_1, 9), 2048)), band_i32(shr_u32(loc_1, 20), 2046))))
		break
	end
end
FUNC_LIST[211] = --[[ _ZN4core3ops8function6FnOnce9call_once17h2ace4627c2305702E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), (load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 24), 248))) - (load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) * load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[212] = --[[ _ZN4core3ops8function6FnOnce9call_once17h2ad3fbb059631a71E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), convert_f64_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[213] = --[[ _ZN4core3ops8function6FnOnce9call_once17h2d7d204c770c3647E ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768)
		loc_1 = add_i32(loc_1, 33024)
		store_i64(memory_at_0, reg_0, extend_i64_u32((if load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) <= load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))) then 1 else 0)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[214] = --[[ _ZN4core3ops8function6FnOnce9call_once17h306989a146cf843eE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64(memory_at_0, loc_4 + 16)
			FUNC_LIST[176](loc_4, loc_5, load_i64(memory_at_0, loc_6), bor_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768)), loc_8))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[215] = --[[ _ZN4core3ops8function6FnOnce9call_once17h30a30c0691bc2960E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[122](1057404, 40, 1057444)
		error("out of code bounds")
	end
end
FUNC_LIST[216] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3266d00cc4dcf20aE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), (load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) - load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[217] = --[[ _ZN4core3ops8function6FnOnce9call_once17h370ba50bf3019a6fE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_n32(shl_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), extend_i64_u32(band_i32(shr_u32(loc_2, 20), 31)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[218] = --[[ _ZN4core3ops8function6FnOnce9call_once17h392e52c26ce03e14E ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768)
		loc_1 = add_i32(loc_1, 33024)
		store_i64(memory_at_0, reg_0, extend_i64_u32((if load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) < load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))) then 1 else 0)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[219] = --[[ _ZN4core3ops8function6FnOnce9call_once17h39e24c8445eb37cdE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[220] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3a1a5f452e06266cE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		while true do
			while true do
				loc_6 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_6 == 23 then
					break
				end
				loc_7 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = band_i32(shr_u32(loc_2, 7), 31)
			loc_7 = load_i64(memory_at_0, loc_4 + 16)
			loc_8 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
			while true do
				loc_2 = load_i32_u8(memory_at_0, loc_1 + 37689)
				if loc_2 ~= 0 then
					break
				end
				loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), loc_7)
			loc_7 = bor_i64(loc_7, loc_8)
			FUNC_LIST[222](loc_4, loc_1, loc_5, (if loc_2 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0))))
			loc_7 = load_i64(memory_at_0, loc_4)
			loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_7)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[221] = --[[ _ZN14riscv_emu_rust3cpu3Cpu8read_csr17h2a666adb070c8735E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[319](loc_1, loc_2)
			if reg_0 ~= 0 then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, 2)
			store_i64(memory_at_0, loc_0, add_i64(load_i64(memory_at_0, loc_1 + 33288), i64_from_u32(4294967292, 4294967295)))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[318](loc_1, loc_2)
		loc_3 = reg_0
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		store_i64(memory_at_0, loc_0, loc_3)
		break
	end
end
FUNC_LIST[222] = --[[ _ZN14riscv_emu_rust3cpu3Cpu9write_csr17he3aca8da4d7f5632E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				reg_0 = FUNC_LIST[319](loc_1, loc_2)
				if reg_0 ~= 0 then
					break
				end
				loc_3 = add_i64(load_i64(memory_at_0, loc_1 + 33288), i64_from_u32(4294967292, 4294967295))
				loc_5 = 2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[317](loc_1, loc_2, loc_3)
			loc_5 = 23
			while true do
				if band_i32(loc_2, 65535) ~= 384 then
					break
				end
				while true do
					while true do
						if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
							break
						end
						loc_2 = shr_u32(wrap_i32_i64(loc_3), 31)
						loc_6 = i64_from_u32(4194303, 0)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = i64_from_u32(4294967295, 4095)
					while true do
						loc_7 = shr_u64(loc_3, i64_from_u32(60, 0))
						loc_8 = add_i64(loc_7, i64_from_u32(4294967288, 4294967295))
						if le_u64(loc_8, i64_ONE) then
							break
						end
						loc_2 = 0
						if eq_i64(loc_7, i64_ZERO) then
							desired = 3
							break
						end
						store_i64(memory_at_0, add_i32(loc_4, 20), i64_ONE)
						store_i32(memory_at_0, loc_4 + 12, 2)
						store_i32(memory_at_0, loc_4 + 8, 1055980)
						store_i32(memory_at_0, loc_4 + 36, 30)
						store_i64(memory_at_0, loc_4 + 40, loc_7)
						store_i32(memory_at_0, loc_4 + 16, add_i32(loc_4, 32))
						store_i32(memory_at_0, loc_4 + 32, add_i32(loc_4, 40))
						FUNC_LIST[447](add_i32(loc_4, 8))
						FUNC_LIST[122](1052248, 14, 1055996)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][wrap_i32_i64(loc_8)] or 1
							if temp < 1 then
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 3
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(loc_1, 33416), band_i64(loc_6, loc_3))
				store_i32_n8(memory_at_0, add_i32(loc_1, 37680), loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_5)
		store_i64(memory_at_0, loc_0, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_4, 48)
		break
	end
end
FUNC_LIST[223] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3a811906f26dd701E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), bor_i64(band_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))), i64_from_u32(0, 2147483648)), band_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), i64_from_u32(4294967295, 2147483647))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[224] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3ba0b9d9dfaf72e4E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					loc_6 = load_i32_u8(memory_at_0, loc_1 + 37689)
					if loc_6 ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				loc_7 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					if loc_6 ~= 0 then
						break
					end
					loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if ne_i64(loc_5, loc_7) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056516)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056532)
		error("out of code bounds")
	end
end
FUNC_LIST[225] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3df89b93235f3ddaE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		loc_6 = load_i64(memory_at_0, loc_4 + 16)
		while true do
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
			if loc_7 ~= 23 then
				break
			end
			loc_7 = band_i32(shr_u32(loc_2, 7), 31)
			loc_2 = band_i32(shr_u32(loc_2, 15), 31)
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_6 = bor_i64(band_i64(shr_i64(shl_i64(loc_6, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_6, i64_from_u32(4294967295, 0)))
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_7, 3)), 32768), loc_6)
			FUNC_LIST[222](loc_4, loc_1, loc_5, extend_i64_u32(loc_2))
			loc_6 = load_i64(memory_at_0, loc_4)
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_6)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[226] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3e99690af109f173E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)))
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_5)
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056420)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056436)
		error("out of code bounds")
	end
end
FUNC_LIST[227] = --[[ _ZN4core3ops8function6FnOnce9call_once17h3f5296d8379e9459E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = load_i32_u8(memory_at_0, loc_1 + 37689)
		loc_5 = shr_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)), extend_i64_u32(band_i32((if loc_4 ~= 0 then 63 else 31), shr_u32(loc_2, 20))))
		while true do
			if loc_4 ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[228] = --[[ _ZN4core3ops8function6FnOnce9call_once17h493cd18829ad3d87E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))
			loc_8 = load_i64(memory_at_0, loc_4 + 16)
			FUNC_LIST[176](loc_4, loc_5, load_i64(memory_at_0, loc_6), (if gt_u64(loc_9, loc_8) then loc_9 else loc_8))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[229] = --[[ _ZN4core3ops8function6FnOnce9call_once17h4c4c026e48ef0628E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), promote_f64_f32(demote_f32_f64(load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[230] = --[[ _ZN4core3ops8function6FnOnce9call_once17h4d7d074ac0671c43E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				reg_1 = add_i32(loc_1, 33376)
				loc_1 = add_i32(loc_1, 32768)
				FUNC_LIST[174](loc_4, reg_1, add_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4 + 16)), load_i32_u16(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3))))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057276)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057292)
		error("out of code bounds")
	end
end
FUNC_LIST[231] = --[[ _ZN4core3ops8function6FnOnce9call_once17h50a9df1b1916b719E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local desired
	while true do
		while true do
			while true do
				loc_4 = load_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 33024))
				if loc_4 == 0e0 then
					break
				end
				loc_4 = (load_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 33024)) / loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_1 + 24, bor_i64(load_i64(memory_at_0, loc_1 + 24), i64_from_u32(8, 0)))
			loc_4 = math.huge
			break
		end
		store_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[232] = --[[ _ZN4core3ops8function6FnOnce9call_once17h514d22c552fcb644E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[167](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1057020)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057004)
		error("out of code bounds")
	end
end
FUNC_LIST[233] = --[[ _ZN4core3ops8function6FnOnce9call_once17h5189bba7064d00aaE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = i64_ONE
		while true do
			while true do
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37691) == 0 then
						break
					end
					loc_6 = load_i64(memory_at_0, loc_1 + 33296)
					if ne_i64(loc_6, load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))) then
						break
					end
					FUNC_LIST[176](loc_4, add_i32(loc_1, 33376), loc_6, load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 20), 31), 3)), 32768)))
					loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
					if loc_7 ~= 23 then
						desired = 2
						break
					end
					store_i32_n8(memory_at_0, loc_1 + 37691, 0)
					loc_5 = i64_ZERO
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_5)
				loc_7 = 23
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = load_i64(memory_at_0, loc_4)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[234] = --[[ _ZN4core3ops8function6FnOnce9call_once17h55eba6ce6a49394cE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				FUNC_LIST[175](loc_4, add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)), load_i64(memory_at_0, loc_4 + 16)), load_i32(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 33024)))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056844)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1056860)
		error("out of code bounds")
	end
end
FUNC_LIST[235] = --[[ _ZN4core3ops8function6FnOnce9call_once17h56f40b36efa93900E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		while true do
			while true do
				loc_6 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_6 == 23 then
					break
				end
				loc_7 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = band_i32(shr_u32(loc_2, 7), 31)
			loc_7 = load_i64(memory_at_0, loc_4 + 16)
			loc_8 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
			while true do
				loc_2 = load_i32_u8(memory_at_0, loc_1 + 37689)
				if loc_2 ~= 0 then
					break
				end
				loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), loc_7)
			FUNC_LIST[222](loc_4, loc_1, loc_5, (if loc_2 ~= 0 then loc_8 else band_i64(loc_8, i64_from_u32(4294967295, 0))))
			loc_7 = load_i64(memory_at_0, loc_4)
			loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_7)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[236] = --[[ _ZN4core3ops8function6FnOnce9call_once17h5c0a4737a769e8c1E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = bxor_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)))
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_5)
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057460)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057476)
		error("out of code bounds")
	end
end
FUNC_LIST[237] = --[[ _ZN4core3ops8function6FnOnce9call_once17h5d43c5e1f8b03cf3E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_i32(shr_u32(load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), shr_u32(loc_2, 20))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[238] = --[[ _ZN4core3ops8function6FnOnce9call_once17h5ef308df1be84d16E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = bxor_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[239] = --[[ _ZN4core3ops8function6FnOnce9call_once17h6032ecdfbfd5b146E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 12)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				while true do
					loc_6 = add_i32(loc_1, 32768)
					loc_7 = load_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_2, 3)))
					loc_2 = load_i32_u8(memory_at_0, loc_1 + 37689)
					reg_0 = (if loc_2 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))
					loc_7 = load_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_5, 3)))
					if ge_u64(reg_0, (if loc_2 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056644)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1056660)
		error("out of code bounds")
	end
end
FUNC_LIST[240] = --[[ _ZN4core3ops8function6FnOnce9call_once17h645a266df055c06aE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					loc_6 = load_i32_u8(memory_at_0, loc_1 + 37689)
					if loc_6 ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				loc_7 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					if loc_6 ~= 0 then
						break
					end
					loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if lt_i64(loc_5, loc_7) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056548)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056564)
		error("out of code bounds")
	end
end
FUNC_LIST[241] = --[[ _ZN4core3ops8function6FnOnce9call_once17h645d78dffd6ee886E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		loc_6 = band_i64(loc_5, i64_from_u32(4294967295, 0))
		while true do
			while true do
				loc_7 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
				loc_4 = load_i32_u8(memory_at_0, loc_1 + 37689)
				loc_7 = (if loc_4 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))
				if ne_i64(loc_7, i64_ZERO) then
					break
				end
				if loc_4 ~= 0 then
					desired = 1
					break
				end
				loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), loc_6)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rem_u64((if loc_4 ~= 0 then loc_5 else loc_6), loc_7)
			if loc_4 ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[242] = --[[ _ZN4core3ops8function6FnOnce9call_once17h64b4d2fad4ac8d68E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		loc_1 = load_i32_u8(memory_at_0, loc_1 + 37689)
		reg_1 = (if loc_1 ~= 0 then loc_5 else band_i64(loc_5, i64_from_u32(4294967295, 0)))
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
		store_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_u32((if lt_u64(reg_1, (if loc_1 ~= 0 then loc_5 else band_i64(loc_5, i64_from_u32(4294967295, 0)))) then 1 else 0)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[243] = --[[ _ZN4core3ops8function6FnOnce9call_once17h67e8ac7e3a71c164E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		loc_6 = load_i32_u8(memory_at_0, loc_1 + 37689)
		loc_5 = shr_u64((if loc_6 ~= 0 then loc_5 else band_i64(loc_5, i64_from_u32(4294967295, 0))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))))
		while true do
			if loc_6 ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[244] = --[[ _ZN4core3ops8function6FnOnce9call_once17h6d66f6c888fe4e10E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), promote_f64_f32(load_f32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[245] = --[[ _ZN4core3ops8function6FnOnce9call_once17h6df01719160ac4c7E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = mul_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[246] = --[[ _ZN4core3ops8function6FnOnce9call_once17h6e09fdbe7477de39E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[206](loc_4, loc_2)
		loc_3 = add_i64(load_i64(memory_at_0, loc_4), loc_3)
		loc_2 = load_i32(memory_at_0, loc_4 + 8)
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_3 = bor_i64(band_i64(shr_i64(shl_i64(loc_3, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_3, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_3)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[247] = --[[ _ZN4core3ops8function6FnOnce9call_once17h6fdf3f385614d769E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 8)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				loc_6 = add_i32(loc_1, 32768)
				loc_7 = load_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_2, 3)))
				loc_1 = load_i32_u8(memory_at_0, loc_1 + 37689)
				reg_1 = (if loc_1 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))
				loc_7 = load_i64(memory_at_0, loc_4)
				store_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_5, 3)), extend_i64_u32((if lt_u64(reg_1, (if loc_1 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))) then 1 else 0)))
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057340)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057356)
		error("out of code bounds")
	end
end
FUNC_LIST[248] = --[[ _ZN4core3ops8function6FnOnce9call_once17h71cd2b99cc857d26E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[166](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_i32(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1057116)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057100)
		error("out of code bounds")
	end
end
FUNC_LIST[249] = --[[ _ZN4core3ops8function6FnOnce9call_once17h76b7b59016846deaE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 8)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				loc_1 = add_i32(loc_1, 32768)
				store_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3)), extend_i64_u32((if lt_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4)) then 1 else 0)))
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057308)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057324)
		error("out of code bounds")
	end
end
FUNC_LIST[250] = --[[ _ZN4core3ops8function6FnOnce9call_once17h77bd3f0b40f5a432E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local desired
	while true do
		while true do
			while true do
				loc_4 = add_i32(loc_1, 32768)
				loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
				if (if eq_i64(loc_5, i64_ZERO) then 1 else 0) == 0 then
					break
				end
				loc_6 = i64_from_u32(4294967295, 4294967295)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
			loc_4 = load_i32_u8(memory_at_0, loc_1 + 37689)
			loc_7 = i64_from_u32(0, 2147483648)
			while true do
				if ne_i64(loc_5, i64_from_u32(4294967295, 4294967295)) then
					break
				end
				if eq_i64(loc_6, (if loc_4 ~= 0 then i64_from_u32(0, 2147483648) else i64_from_u32(2147483648, 4294967295))) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if ne_i64(loc_6, i64_from_u32(0, 2147483648)) then
						break
					end
					if eq_i64(loc_5, i64_from_u32(4294967295, 4294967295)) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = div_i64(loc_6, loc_5)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_4 == 0 then
					break
				end
				loc_6 = loc_7
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_6)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[251] = --[[ _ZN4core3ops8function6FnOnce9call_once17h7a8a390a24b6a0a6E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = shr_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[252] = --[[ _ZN4core3ops8function6FnOnce9call_once17h7dc5b97d03d4a675E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = band_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[253] = --[[ _ZN4core3ops8function6FnOnce9call_once17h8dc2d73e5d32c4b3E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64(memory_at_0, loc_4 + 16)
			FUNC_LIST[176](loc_4, loc_5, load_i64(memory_at_0, loc_6), band_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768)), loc_8))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[254] = --[[ _ZN4core3ops8function6FnOnce9call_once17h8ebd917a65e982ccE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		loc_5 = load_i64(memory_at_0, loc_1 + 33288)
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_5)
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056876)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056892)
		error("out of code bounds")
	end
end
FUNC_LIST[255] = --[[ _ZN4core3ops8function6FnOnce9call_once17h92335a4089cb228eE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), convert_f64_i32(load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[256] = --[[ _ZN4core3ops8function6FnOnce9call_once17h94e0da3f24dafadeE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[166](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 33024), load_i64_i32(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1056796)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056780)
		error("out of code bounds")
	end
end
FUNC_LIST[257] = --[[ _ZN4core3ops8function6FnOnce9call_once17h97990502329e046cE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = load_i32_u8(memory_at_0, loc_1 + 37689)
		loc_5 = shl_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)), extend_i64_u32(band_i32((if loc_4 ~= 0 then 63 else 31), shr_u32(loc_2, 20))))
		while true do
			if loc_4 ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[258] = --[[ _ZN4core3ops8function6FnOnce9call_once17h97c30e795e8bb198E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local desired
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		loc_6 = band_i32(shr_u32(loc_2, 7), 31)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
				if loc_2 == 0 then
					break
				end
				while true do
					while true do
						loc_4 = wrap_i32_i64(loc_5)
						if loc_4 ~= 2147483648 then
							break
						end
						if loc_2 == 4294967295 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if loc_2 ~= 4294967295 then
								break
							end
							loc_5 = i64_ZERO
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = extend_i64_i32(rem_i32(loc_4, loc_2))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), loc_5)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), extend_i64_n32(loc_5))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[259] = --[[ _ZN4core3ops8function6FnOnce9call_once17h9846b6f0f4003176E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_i32(shr_u32(load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[260] = --[[ _ZN4core3ops8function6FnOnce9call_once17h99421a80875ad725E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[161](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_u8(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1056988)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056972)
		error("out of code bounds")
	end
end
FUNC_LIST[261] = --[[ _ZN4core3ops8function6FnOnce9call_once17h9bb180fb78c771ccE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 8)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				loc_1 = add_i32(loc_1, 32768)
				store_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3)), extend_i64_n32(add_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4))))
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056452)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1056468)
		error("out of code bounds")
	end
end
FUNC_LIST[262] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha138ed1dd6e370b9E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64_i32(memory_at_0, loc_4 + 16)
			FUNC_LIST[175](loc_4, loc_5, load_i64(memory_at_0, loc_6), load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768)))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[263] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha493575f121f3492E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_u32((if lt_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)))) then 1 else 0)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[264] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha5c2c8934a2b578eE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[161](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_i8(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1056956)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056940)
		error("out of code bounds")
	end
end
FUNC_LIST[265] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha6e67a8b526fcbe5E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = band_i32(shr_u32(loc_2, 20), 31)
		loc_6 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
		while true do
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_6 = mul_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768)), loc_6)
				loc_6 = bor_i64(band_i64(shr_i64(loc_6, i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), shr_u64(loc_6, i64_from_u32(32, 0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768))
			FUNC_LIST[540](loc_4, loc_7, shr_i64(loc_7, i64_from_u32(63, 0)), loc_6, shr_i64(loc_6, i64_from_u32(63, 0)))
			loc_6 = load_i64(memory_at_0, add_i32(loc_4, 8))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_6)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[266] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha7e121b5e5b37265E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), load_i64_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 33024)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[267] = --[[ _ZN4core3ops8function6FnOnce9call_once17ha83d759643cedeb5E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_4 + 16)
			FUNC_LIST[175](loc_4, loc_5, load_i64(memory_at_0, loc_6), band_i32(loc_6, load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), extend_i64_i32(loc_6))
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[268] = --[[ _ZN4core3ops8function6FnOnce9call_once17hae8c0b3197d5c809E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_i32(shr_i32(load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), shr_u32(loc_2, 20))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[269] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb0680646483b3836E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		loc_6 = load_i64(memory_at_0, loc_4 + 16)
		while true do
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
			if loc_7 ~= 23 then
				break
			end
			loc_7 = band_i32(shr_u32(loc_2, 7), 31)
			loc_2 = band_i32(shr_u32(loc_2, 15), 31)
			while true do
				loc_8 = load_i32_u8(memory_at_0, loc_1 + 37689)
				if loc_8 ~= 0 then
					break
				end
				loc_6 = bor_i64(band_i64(shr_i64(shl_i64(loc_6, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_6, i64_from_u32(4294967295, 0)))
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_7, 3)), 32768), loc_6)
			loc_6 = bor_i64(loc_6, extend_i64_u32(loc_2))
			FUNC_LIST[222](loc_4, loc_1, loc_5, (if loc_8 ~= 0 then loc_6 else band_i64(loc_6, i64_from_u32(4294967295, 0))))
			loc_6 = load_i64(memory_at_0, loc_4)
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_6)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[270] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb12be292b0438685E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = shl_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[271] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb254c84637771aa1E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), load_i64_u32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[272] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb33b97fbac47edaeE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64(memory_at_0, loc_4 + 16)
			FUNC_LIST[176](loc_4, loc_5, load_i64(memory_at_0, loc_6), add_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768)), loc_8))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[273] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb7a72462119796f7E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					loc_6 = load_i32_u8(memory_at_0, loc_1 + 37689)
					if loc_6 ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				loc_7 = load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				while true do
					if loc_6 ~= 0 then
						break
					end
					loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if eq_i64(loc_5, loc_7) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056676)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056692)
		error("out of code bounds")
	end
end
FUNC_LIST[274] = --[[ _ZN4core3ops8function6FnOnce9call_once17hb94a98a4c9e83bb7E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), ((load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) * load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)))) + load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 24), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[275] = --[[ _ZN4core3ops8function6FnOnce9call_once17hbab8ccc7de9df4f4E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](loc_4, add_i32(loc_1, 33376), load_i64(memory_at_0, loc_5))
		while true do
			while true do
				loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_6 == 23 then
					break
				end
				loc_7 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_1 + 37691, 1)
			store_i64(memory_at_0, loc_1 + 33296, load_i64(memory_at_0, loc_5))
			store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), load_i64(memory_at_0, loc_4))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_7)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[276] = --[[ _ZN4core3ops8function6FnOnce9call_once17hbdeaa6058b5fab3eE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), convert_f64_u32(load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[277] = --[[ _ZN4core3ops8function6FnOnce9call_once17hbe19041310b03114E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				FUNC_LIST[176](loc_4, add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)), load_i64(memory_at_0, loc_4 + 16)), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 33024)))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056812)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1056828)
		error("out of code bounds")
	end
end
FUNC_LIST[278] = --[[ _ZN4core3ops8function6FnOnce9call_once17hbeb15ae3847617c3E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[186](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 12)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				while true do
					loc_6 = add_i32(loc_1, 32768)
					loc_7 = load_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_2, 3)))
					loc_2 = load_i32_u8(memory_at_0, loc_1 + 37689)
					reg_0 = (if loc_2 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))
					loc_7 = load_i64(memory_at_0, add_i32(loc_6, shl_i32(loc_5, 3)))
					if lt_u64(reg_0, (if loc_2 ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0)))) then
						break
					end
					store_i64(memory_at_0, loc_1 + 33288, add_i64(load_i64(memory_at_0, loc_4), loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056580)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1056596)
		error("out of code bounds")
	end
end
FUNC_LIST[279] = --[[ _ZN4core3ops8function6FnOnce9call_once17hc048b8f2306b2c19E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = i64_ONE
		while true do
			while true do
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37691) == 0 then
						break
					end
					loc_6 = load_i64(memory_at_0, loc_1 + 33296)
					if ne_i64(loc_6, load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))) then
						break
					end
					FUNC_LIST[175](loc_4, add_i32(loc_1, 33376), loc_6, load_i32(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 20), 31), 3)), 32768)))
					loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
					if loc_7 ~= 23 then
						desired = 2
						break
					end
					store_i32_n8(memory_at_0, loc_1 + 37691, 0)
					loc_5 = i64_ZERO
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_5)
				loc_7 = 23
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = load_i64(memory_at_0, loc_4)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[280] = --[[ _ZN4core3ops8function6FnOnce9call_once17hc070ffa3bad05dd2E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_4 + 16)
			FUNC_LIST[175](loc_4, loc_5, load_i64(memory_at_0, loc_6), bor_i32(loc_6, load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), extend_i64_i32(loc_6))
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[281] = --[[ _ZN4core3ops8function6FnOnce9call_once17hc1f413a4688af8f8E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				reg_1 = add_i32(loc_1, 33376)
				loc_1 = add_i32(loc_1, 32768)
				FUNC_LIST[168](loc_4, reg_1, add_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4 + 16)), load_i32_u8(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3))))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057212)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057228)
		error("out of code bounds")
	end
end
FUNC_LIST[282] = --[[ _ZN4core3ops8function6FnOnce9call_once17hc249887273a4387dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		while true do
			while true do
				loc_6 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_6 == 23 then
					break
				end
				loc_7 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = band_i32(shr_u32(loc_2, 7), 31)
			loc_7 = load_i64(memory_at_0, loc_4 + 16)
			loc_8 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768), loc_7)
			FUNC_LIST[222](loc_4, loc_1, loc_5, band_i64(loc_7, bxor_i64(loc_8, i64_from_u32(4294967295, 4294967295))))
			loc_7 = load_i64(memory_at_0, loc_4)
			loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_7)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[283] = --[[ _ZN4core3ops8function6FnOnce9call_once17hc86019468567725fE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[221](loc_4, loc_1, 833)
		loc_5 = load_i64(memory_at_0, loc_4)
		while true do
			loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
			if loc_6 ~= 23 then
				break
			end
			store_i64(memory_at_0, loc_1 + 33288, loc_5)
			loc_7 = load_i64(memory_at_0, loc_1 + 6144)
			store_i64(memory_at_0, loc_1 + 6144, bor_i64(bor_i64(band_i64(loc_7, i64_from_u32(4294961015, 4294967295)), band_i64(shr_u64(loc_7, i64_from_u32(4, 0)), i64_from_u32(8, 0))), i64_from_u32(128, 0)))
			while true do
				while true do
					while true do
						while true do
							loc_7 = band_i64(shr_u64(loc_7, i64_from_u32(11, 0)), i64_from_u32(3, 0))
							if gt_u64(loc_7, i64_from_u32(3, 0)) then
								break
							end
							loc_8 = 0
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 3, 1, 0, 2, }
								end)()
							end
							temp = br_map[1][wrap_i32_i64(loc_7)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[122](1052248, 14, 1057164)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = 3
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_1 + 37688, loc_8)
			reg_1 = FUNC_LIST[284](add_i32(loc_1, 37688))
			store_i32_n8(memory_at_0, add_i32(loc_1, 37681), band_i32(reg_1, 255))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[284] = --[[ _ZN73_$LT$riscv_emu_rust..cpu..PrivilegeMode$u20$as$u20$core..clone..Clone$GT$5clone17h114b9f87a51d2948E ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32_u8(memory_at_0, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[285] = --[[ _ZN4core3ops8function6FnOnce9call_once17hcdde60c4eb1ce1b0E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = mul_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) == 0 then
					break
				end
				loc_5 = extend_i64_n32(loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[286] = --[[ _ZN4core3ops8function6FnOnce9call_once17hd1854da3c788723fE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[165](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 32768), load_i64_i16(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1057052)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1057036)
		error("out of code bounds")
	end
end
FUNC_LIST[287] = --[[ _ZN4core3ops8function6FnOnce9call_once17hd5a8dfefd7ea50a1E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_4 + 16)
			FUNC_LIST[175](loc_4, loc_5, load_i64(memory_at_0, loc_6), add_i32(loc_6, load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), extend_i64_i32(loc_6))
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[288] = --[[ _ZN4core3ops8function6FnOnce9call_once17hd6ea175ebe82eff0E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			loc_2 = load_i32(memory_at_0, loc_4 + 12)
			if loc_2 > 31 then
				break
			end
			FUNC_LIST[167](add_i32(loc_4, 16), add_i32(loc_1, 33376), add_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))))
			while true do
				while true do
					loc_2 = load_i32_u8(memory_at_0, loc_4 + 24)
					if loc_2 ~= 23 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 8)
						if loc_5 >= 32 then
							break
						end
						store_f64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_5, 3)), 33024), load_f64(memory_at_0, loc_4 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[493](loc_5, 32, 1056764)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i64(memory_at_0, loc_4 + 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 8, loc_2)
			store_i64(memory_at_0, loc_0, loc_6)
			GLOBAL_LIST[0].value = add_i32(loc_4, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056748)
		error("out of code bounds")
	end
end
FUNC_LIST[289] = --[[ _ZN4core3ops8function6FnOnce9call_once17hd9c29584985fda77E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 33024), load_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[290] = --[[ _ZN4core3ops8function6FnOnce9call_once17hddbe19ca60db05bfE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[188](add_i32(loc_4, 16), loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 24)
				if loc_2 > 31 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 28)
				if loc_5 >= 32 then
					desired = 1
					break
				end
				reg_1 = add_i32(loc_1, 33376)
				loc_1 = add_i32(loc_1, 32768)
				FUNC_LIST[176](loc_4, reg_1, add_i64(load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_2, 3))), load_i64(memory_at_0, loc_4 + 16)), load_i64(memory_at_0, add_i32(loc_1, shl_i32(loc_5, 3))))
				loc_6 = load_i64(memory_at_0, loc_4)
				store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_0, loc_6)
				GLOBAL_LIST[0].value = add_i32(loc_4, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1057244)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_5, 32, 1057260)
		error("out of code bounds")
	end
end
FUNC_LIST[291] = --[[ _ZN4core3ops8function6FnOnce9call_once17he61275450e3a6c02E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		while true do
			while true do
				loc_4 = load_f64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 33024))
				loc_5 = (if loc_4 >= 0e0 then 1 else 0)
				if band_i32((if loc_4 < 4.294967296e9 then 1 else 0), loc_5) == 0 then
					break
				end
				loc_6 = truncate_u32_f64(loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = 0
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), extend_i64_i32((if loc_4 > 4.294967295e9 then 4294967295 else (if loc_5 ~= 0 then loc_6 else 0))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[292] = --[[ _ZN4core3ops8function6FnOnce9call_once17he754e814f985212dE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[191](add_i32(loc_5, 24), loc_2)
		store_i32(memory_at_0, loc_5 + 48, 0)
		store_i64(memory_at_0, loc_5 + 40, i64_ONE)
		loc_2 = load_i32(memory_at_0, loc_5 + 32)
		FUNC_LIST[293](add_i32(loc_5, 16), loc_2)
		loc_6 = add_i32(add_i32(loc_5, 88), 12)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 92, 1)
		store_i32(memory_at_0, loc_5 + 88, 1056048)
		store_i64(memory_at_0, loc_5 + 52, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 52))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
		FUNC_LIST[367](add_i32(loc_5, 64))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056908)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[293](add_i32(loc_5, 8), load_i32(memory_at_0, loc_5 + 36))
		store_i32(memory_at_0, add_i32(add_i32(loc_5, 64), 12), 31)
		store_i64(memory_at_0, loc_6, i64_from_u32(2, 0))
		store_i32(memory_at_0, loc_5 + 68, 30)
		store_i32(memory_at_0, loc_5 + 92, 2)
		store_i32(memory_at_0, loc_5 + 88, 1056228)
		store_i64(memory_at_0, loc_5 + 80, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 80))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 24))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 64))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			while true do
				if loc_4 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_5 + 36)
				if loc_4 > 31 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(loc_5, 100), i64_ZERO)
			store_i32(memory_at_0, loc_5 + 92, 1)
			store_i32(memory_at_0, loc_5 + 88, 1056264)
			store_i32(memory_at_0, loc_5 + 96, 1052248)
			FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
			FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
			FUNC_LIST[367](add_i32(loc_5, 64))
			store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 40), 8)))
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 40))
			GLOBAL_LIST[0].value = add_i32(loc_5, 112)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_4, 32, 1056924)
		error("out of code bounds")
	end
end
FUNC_LIST[293] = --[[ _ZN14riscv_emu_rust3cpu17get_register_name17h7b7e40bffb15f89cE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_1)
		while true do
			if loc_1 < 32 then
				break
			end
			store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
			store_i32(memory_at_0, loc_2 + 20, 1)
			store_i32(memory_at_0, loc_2 + 16, 1056396)
			store_i32(memory_at_0, loc_2 + 44, 32)
			store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
			store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 12))
			FUNC_LIST[491](add_i32(loc_2, 16), 1056404)
			error("out of code bounds")
		end
		loc_1 = shl_i32(loc_1, 2)
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, add_i32(loc_1, 1057764)))
		store_i32(memory_at_0, loc_0, load_i32(memory_at_0, add_i32(loc_1, 1057892)))
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[294] = --[[ _ZN5alloc3fmt6format17h72da8280f5a072cdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32(memory_at_0, add_i32(loc_1, 12))
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][load_i32(memory_at_0, loc_1 + 4)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 ~= 0 then
							desired = 3
							break
						end
						loc_3 = 1052248
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 ~= 0 then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_1)
					loc_1 = load_i32(memory_at_0, loc_3 + 4)
					loc_3 = load_i32(memory_at_0, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[486](loc_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[353](add_i32(loc_2, 8), loc_1, 0)
			loc_4 = load_i32(memory_at_0, loc_2 + 12)
			reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_2 + 8), loc_3, loc_1)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_0 + 8, loc_1)
			store_i32(memory_at_0, loc_0 + 4, loc_4)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[295] = --[[ _ZN4core3ops8function6FnOnce9call_once17he75dd2a87e188f4aE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = shr_u32(loc_2, 20)
		FUNC_LIST[221](add_i32(loc_4, 16), loc_1, loc_5)
		loc_6 = load_i64(memory_at_0, loc_4 + 16)
		while true do
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
			if loc_7 ~= 23 then
				break
			end
			loc_7 = band_i32(shr_u32(loc_2, 7), 31)
			loc_2 = band_i32(shr_u32(loc_2, 15), 31)
			while true do
				if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
					break
				end
				loc_6 = bor_i64(band_i64(shr_i64(shl_i64(loc_6, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_6, i64_from_u32(4294967295, 0)))
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_7, 3)), 32768), loc_6)
			FUNC_LIST[222](loc_4, loc_1, loc_5, band_i64(loc_6, bxor_i64(extend_i64_u32(loc_2), i64_from_u32(4294967295, 4294967295))))
			loc_6 = load_i64(memory_at_0, loc_4)
			loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_6)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[296] = --[[ _ZN4core3ops8function6FnOnce9call_once17he88754b9b84ddd4bE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 33024)
		store_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), (load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))) + load_f64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[297] = --[[ _ZN4core3ops8function6FnOnce9call_once17he898c432d2aba606E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[191](loc_4, loc_2)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_4 + 12)
				if loc_2 > 31 then
					break
				end
				loc_5 = band_i64(load_i64(memory_at_0, loc_4), load_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768)))
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
						break
					end
					loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= 32 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768), loc_5)
				store_i32_n8(memory_at_0, loc_0 + 8, 23)
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056484)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056500)
		error("out of code bounds")
	end
end
FUNC_LIST[298] = --[[ _ZN4core3ops8function6FnOnce9call_once17he8d86cb8e71f1cedE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local desired
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248)))
		while true do
			while true do
				loc_6 = load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248)))
				if (if eq_i64(loc_6, i64_ZERO) then 1 else 0) == 0 then
					break
				end
				loc_7 = loc_5
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32_u8(memory_at_0, loc_1 + 37689)
			while true do
				if ne_i64(loc_6, i64_from_u32(4294967295, 4294967295)) then
					break
				end
				loc_7 = i64_ZERO
				if eq_i64(loc_5, (if loc_4 ~= 0 then i64_from_u32(0, 2147483648) else i64_from_u32(2147483648, 4294967295))) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = i64_ZERO
			while true do
				if eq_i64(loc_6, i64_from_u32(4294967295, 4294967295)) then
					break
				end
				loc_7 = rem_i64(loc_5, loc_6)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 ~= 0 then
				break
			end
			loc_7 = bor_i64(band_i64(shr_i64(shl_i64(loc_7, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_7, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_7)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[299] = --[[ _ZN4core3ops8function6FnOnce9call_once17heaa6cd14a638a489E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_n32(sub_i64(load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), load_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[300] = --[[ _ZN4core3ops8function6FnOnce9call_once17hec3624d839d00edcE ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		loc_1 = add_i32(loc_1, 32768)
		store_i64(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), extend_i64_i32(shr_i32(load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248))), load_i32(memory_at_0, add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248))))))
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[301] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf11ccfce0f800a0bE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = bor_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[302] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf2a11f78f6580164E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[167](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64(memory_at_0, loc_4 + 16)
			FUNC_LIST[176](loc_4, loc_5, load_i64(memory_at_0, loc_6), load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768)))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), loc_8)
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[303] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf49e828b154d4c45E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local loc_5 = 0
	while true do
		loc_4 = load_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768))
		loc_5 = load_i32_u8(memory_at_0, loc_1 + 37689)
		loc_4 = shr_u64((if loc_5 ~= 0 then loc_4 else band_i64(loc_4, i64_from_u32(4294967295, 0))), extend_i64_u32(band_i32((if loc_5 ~= 0 then 63 else 31), shr_u32(loc_2, 20))))
		while true do
			if loc_5 ~= 0 then
				break
			end
			loc_4 = bor_i64(band_i64(shr_i64(shl_i64(loc_4, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_4, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_4)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[304] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf7090f2d342bfe0fE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[221](loc_4, loc_1, 321)
		loc_5 = load_i64(memory_at_0, loc_4)
		while true do
			loc_6 = load_i32_u8(memory_at_0, loc_4 + 8)
			if loc_6 ~= 23 then
				break
			end
			store_i64(memory_at_0, loc_1 + 33288, loc_5)
			loc_7 = load_i64(memory_at_0, loc_1 + 6144)
			store_i32_n8(memory_at_0, loc_1 + 37688, band_i32(shr_u32(wrap_i32_i64(loc_7), 8), 1))
			store_i64(memory_at_0, loc_1 + 6144, bor_i64(bor_i64(band_i64(loc_7, i64_from_u32(4294967005, 4294967295)), band_i64(shr_u64(loc_7, i64_from_u32(4, 0)), i64_from_u32(2, 0))), i64_from_u32(32, 0)))
			reg_1 = FUNC_LIST[284](add_i32(loc_1, 37688))
			store_i32_n8(memory_at_0, add_i32(loc_1, 37681), band_i32(reg_1, 255))
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_6)
		store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[305] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf9083968b962d33dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	while true do
		loc_4 = add_i32(loc_1, 32768)
		loc_5 = sub_i64(load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 12), 248))), load_i64(memory_at_0, add_i32(loc_4, band_i32(shr_u32(loc_2, 17), 248))))
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then
				break
			end
			loc_5 = bor_i64(band_i64(shr_i64(shl_i64(loc_5, i64_from_u32(32, 0)), i64_from_u32(63, 0)), i64_from_u32(0, 4294967295)), band_i64(loc_5, i64_from_u32(4294967295, 0)))
			break
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 4), 248)), 32768), loc_5)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[306] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf9559bd78e8983e4E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 33376)
		loc_6 = add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 12), 248)), 32768)
		FUNC_LIST[166](add_i32(loc_4, 16), loc_5, load_i64(memory_at_0, loc_6))
		while true do
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 24)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4 + 16)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_4 + 16)
			loc_7 = load_i32(memory_at_0, add_i32(add_i32(loc_1, band_i32(shr_u32(loc_2, 17), 248)), 32768))
			FUNC_LIST[175](loc_4, loc_5, load_i64(memory_at_0, loc_6), (if loc_6 > loc_7 then loc_6 else loc_7))
			while true do
				loc_7 = load_i32_u8(memory_at_0, loc_4 + 8)
				if loc_7 == 23 then
					break
				end
				loc_8 = load_i64(memory_at_0, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(add_i32(loc_1, shl_i32(band_i32(shr_u32(loc_2, 7), 31), 3)), 32768), extend_i64_i32(loc_6))
			loc_7 = 23
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_7)
		store_i64(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[307] = --[[ _ZN4core3ops8function6FnOnce9call_once17hfa276f630d6f93b9E ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		store_i32_n8(memory_at_0, loc_1 + 37690, 1)
		store_i32_n8(memory_at_0, loc_0 + 8, 23)
		break
	end
end
FUNC_LIST[308] = --[[ _ZN4core3ops8function6FnOnce9call_once17hffa0de469aa96a0dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	local br_map = {}
	while true do
		loc_4 = 8
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 0, 1, 2, }
							end)()
						end
						temp = br_map[1][load_i32_u8(memory_at_0, loc_1 + 37688)] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = 9
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[122](1056708, 22, 1056732)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 10
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 8, loc_4)
		store_i64(memory_at_0, loc_0, loc_3)
		break
	end
end
FUNC_LIST[309] = --[[ _ZN60_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$3fmt17ha8b4f08181843953E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[523](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 8), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[310] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h690cc4d97482560eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_1, 4))
		break
	end
	return reg_0
end
FUNC_LIST[311] = --[[ _ZN14riscv_emu_rust3cpu22get_privilege_encoding17h14ea568ee4790bacE ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = 0
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 0, 1, 2, }
							end)()
						end
						temp = br_map[1][load_i32_u8(memory_at_0, loc_0)] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[122](1052248, 14, 1052348)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 3
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[312] = --[[ _ZN14riscv_emu_rust3cpu3Cpu3new17hd6c79b4c5386095fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 31696)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = 0
		while true do
			while true do
				if loc_4 == 256 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(add_i32(loc_3, 27128), loc_4), i64_ZERO)
				loc_4 = add_i32(loc_4, 8)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		FUNC_LIST[155](add_i32(loc_3, 27384), 1, loc_1, loc_2)
		store_i64(memory_at_0, loc_3 + 432, i64_from_u32(4, 0))
		loc_4 = 0
		loc_1 = 4096
		loc_2 = 0
		while true do
			while true do
				store_i32(memory_at_0, loc_3 + 440, loc_4)
				if loc_1 == 0 then
					desired = 1
					break
				end
				loc_5 = (if loc_2 ~= 0 then add_i32(loc_2, 4294967295) else 4096)
				while true do
					if loc_4 ~= load_i32(memory_at_0, loc_3 + 436) then
						break
					end
					FUNC_LIST[363](add_i32(loc_3, 432), loc_4)
					loc_4 = load_i32(memory_at_0, loc_3 + 440)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_4 = add_i32(load_i32(memory_at_0, loc_3 + 432), shl_i32(loc_4, 4))
				store_i32(memory_at_0, loc_4 + 12, loc_5)
				loc_2 = add_i32(loc_2, 1)
				store_i32(memory_at_0, loc_4 + 8, loc_2)
				store_i64(memory_at_0, loc_4, i64_from_u32(0, 116))
				loc_1 = add_i32(loc_1, 4294967295)
				loc_4 = add_i32(load_i32(memory_at_0, loc_3 + 440), 1)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		FUNC_LIST[121](loc_3, 1052236)
		loc_6 = load_i64(memory_at_0, loc_3)
		loc_7 = load_i64(memory_at_0, loc_3 + 8)
		store_i32(memory_at_0, add_i32(loc_0, 33360), load_i32(memory_at_0, add_i32(loc_3, 440)))
		store_i64(memory_at_0, loc_0 + 33352, load_i64(memory_at_0, loc_3 + 432))
		store_i64(memory_at_0, loc_0 + 33336, i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_0, 33344), i64_ZERO)
		reg_0 = FUNC_LIST[539](add_i32(add_i32(loc_3, 432), 26608), 0, 88)
		reg_0 = FUNC_LIST[539](add_i32(loc_3, 16), 0, 160)
		reg_0 = FUNC_LIST[538](add_i32(add_i32(loc_3, 16), 160), add_i32(loc_3, 27128), 256)
		reg_0 = FUNC_LIST[539](loc_0, 0, 6152)
		loc_4 = reg_0
		reg_0 = FUNC_LIST[539](add_i32(loc_3, 432), 0, 26608)
		reg_0 = FUNC_LIST[538](add_i32(loc_4, 33376), add_i32(loc_3, 27384), 4312)
		store_i64(memory_at_0, loc_4 + 6152, i64_from_u32(2148806959, 2147483648))
		reg_0 = FUNC_LIST[538](add_i32(loc_4, 6160), add_i32(loc_3, 432), 26696)
		store_i64(memory_at_0, loc_4 + 32856, i64_from_u32(4128, 0))
		reg_0 = FUNC_LIST[538](add_i32(loc_4, 32864), add_i32(loc_3, 16), 416)
		store_i64(memory_at_0, add_i32(loc_4, 33296), i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_4, 33288), i64_ZERO)
		store_i64(memory_at_0, loc_4 + 33280, i64_ZERO)
		store_i32_n8(memory_at_0, loc_4 + 37692, 0)
		store_i32(memory_at_0, loc_4 + 37688, 259)
		store_i64(memory_at_0, loc_4 + 33364, i64_from_u32(0, 4095))
		store_i64(memory_at_0, loc_4 + 33328, loc_7)
		store_i64(memory_at_0, loc_4 + 33320, loc_6)
		store_i32(memory_at_0, loc_4 + 33316, 0)
		store_i64(memory_at_0, loc_4 + 33308, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 33304, 1052240)
		GLOBAL_LIST[0].value = add_i32(loc_3, 31696)
		break
	end
end
FUNC_LIST[313] = --[[ _ZN14riscv_emu_rust3cpu3Cpu4tick17h594027284625aa52E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = i64_ZERO
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_1
		while true do
			if load_i32_u8(memory_at_0, loc_0 + 37690) ~= 0 then
				break
			end
			loc_2 = load_i64(memory_at_0, loc_0 + 33288)
			FUNC_LIST[157](add_i32(loc_1, 56), add_i32(loc_0, 33376), loc_2)
			while true do
				while true do
					while true do
						while true do
							loc_3 = load_i32_u8(memory_at_0, loc_1 + 64)
							if loc_3 ~= 23 then
								break
							end
							loc_3 = load_i32(memory_at_0, loc_1 + 56)
							store_i32(memory_at_0, loc_1 + 44, loc_3)
							loc_4 = load_i64(memory_at_0, loc_0 + 33288)
							store_i64(memory_at_0, loc_1 + 48, loc_4)
							while true do
								while true do
									if band_i32(loc_3, 3) ~= 3 then
										break
									end
									loc_5 = add_i64(loc_4, i64_from_u32(4, 0))
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = add_i64(loc_4, i64_from_u32(2, 0))
								reg_0 = FUNC_LIST[314](band_i32(loc_3, 65535))
								loc_3 = reg_0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_0 + 33288, loc_5)
							store_i32(memory_at_0, loc_1 + 56, loc_3)
							while true do
								if load_i32(memory_at_0, add_i32(loc_0, 33316)) == 0 then
									break
								end
								reg_0 = FUNC_LIST[126](add_i32(loc_0, 33320), add_i32(loc_1, 56))
								loc_5 = reg_0
								loc_6 = load_i32(memory_at_0, add_i32(loc_0, 33308))
								loc_7 = band_i32(loc_6, wrap_i32_i64(loc_5))
								loc_8 = mul_i64(band_i64(shr_u64(loc_5, i64_from_u32(25, 0)), i64_from_u32(127, 0)), i64_from_u32(16843009, 16843009))
								loc_9 = load_i32(memory_at_0, loc_0 + 33304)
								loc_10 = 0
								while true do
									loc_11 = load_i64(memory_at_0, add_i32(loc_9, loc_7))
									loc_5 = bxor_i64(loc_11, loc_8)
									loc_5 = band_i64(band_i64(bxor_i64(loc_5, i64_from_u32(4294967295, 4294967295)), add_i64(loc_5, i64_from_u32(4278124287, 4278124286))), i64_from_u32(2155905152, 2155905152))
									while true do
										while true do
											if ne_i64(loc_5, i64_ZERO) then
												break
											end
											if (if eq_i64(band_i64(band_i64(loc_11, shl_i64(loc_11, i64_ONE)), i64_from_u32(2155905152, 2155905152)), i64_ZERO) then 1 else 0) == 0 then
												desired = 6
												break
											end
											loc_10 = add_i32(loc_10, 8)
											loc_7 = band_i32(add_i32(loc_10, loc_7), loc_6)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										loc_12 = ctz_i64(loc_5)
										loc_5 = band_i64(add_i64(loc_5, i64_from_u32(4294967295, 4294967295)), loc_5)
										loc_13 = sub_i32(loc_9, shl_i32(band_i32(add_i32(shr_u32(wrap_i32_i64(loc_12), 3), loc_7), loc_6), 3))
										if loc_3 ~= load_i32(memory_at_0, add_i32(loc_13, 4294967288)) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = add_i32(loc_0, 33336)
								store_i64(memory_at_0, loc_7, add_i64(load_i64(memory_at_0, loc_7), i64_ONE))
								while true do
									loc_9 = load_i32(memory_at_0, add_i32(loc_0, 33364))
									loc_7 = add_i32(loc_13, 4294967292)
									loc_6 = load_i32(memory_at_0, loc_7)
									if loc_9 == loc_6 then
										break
									end
									loc_9 = add_i32(loc_0, 33352)
									reg_0 = FUNC_LIST[310](loc_9, loc_6, 1057492)
									loc_13 = load_i32(memory_at_0, reg_0 + 8)
									reg_0 = FUNC_LIST[310](loc_9, load_i32(memory_at_0, loc_7), 1057508)
									loc_6 = load_i32(memory_at_0, reg_0 + 12)
									while true do
										while true do
											if load_i32(memory_at_0, add_i32(loc_0, 33368)) == load_i32(memory_at_0, loc_7) then
												break
											end
											reg_0 = FUNC_LIST[310](loc_9, loc_13, 1057524)
											store_i32(memory_at_0, reg_0 + 12, loc_6)
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_0 + 33368, loc_6)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[310](loc_9, loc_6, 1057540)
									store_i32(memory_at_0, reg_0 + 8, loc_13)
									reg_0 = FUNC_LIST[310](loc_9, load_i32(memory_at_0, loc_7), 1057556)
									store_i32(memory_at_0, reg_0 + 12, 4096)
									loc_6 = load_i32(memory_at_0, loc_0 + 33364)
									reg_0 = FUNC_LIST[310](loc_9, load_i32(memory_at_0, loc_7), 1057572)
									store_i32(memory_at_0, reg_0 + 8, loc_6)
									loc_6 = load_i32(memory_at_0, loc_7)
									reg_0 = FUNC_LIST[310](loc_9, load_i32(memory_at_0, loc_0 + 33364), 1057588)
									store_i32(memory_at_0, reg_0 + 12, loc_6)
									store_i32(memory_at_0, loc_0 + 33364, load_i32(memory_at_0, loc_7))
									loc_9 = load_i32(memory_at_0, loc_7)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[310](add_i32(loc_0, 33352), loc_9, 1057604)
								loc_6 = load_i32(memory_at_0, reg_0 + 4)
								if loc_6 < 116 then
									desired = 3
									break
								end
								FUNC_LIST[493](loc_6, 116, 1055788)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = add_i32(loc_0, 33344)
							store_i64(memory_at_0, loc_7, add_i64(load_i64(memory_at_0, loc_7), i64_ONE))
							FUNC_LIST[315](add_i32(loc_1, 32), loc_3)
							if load_i32(memory_at_0, loc_1 + 32) == 0 then
								desired = 4
								break
							end
							store_i32(memory_at_0, add_i32(add_i32(loc_1, 80), 12), 33)
							store_i64(memory_at_0, add_i32(add_i32(loc_1, 56), 12), i64_from_u32(2, 0))
							store_i32(memory_at_0, loc_1 + 60, 2)
							store_i32(memory_at_0, loc_1 + 56, 1052396)
							store_i32(memory_at_0, loc_1 + 84, 30)
							store_i32(memory_at_0, loc_1 + 64, add_i32(loc_1, 80))
							store_i32(memory_at_0, loc_1 + 88, add_i32(loc_1, 44))
							store_i32(memory_at_0, loc_1 + 80, add_i32(loc_1, 48))
							FUNC_LIST[491](add_i32(loc_1, 56), 1052412)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, loc_0 + 33288, add_i64(load_i64(memory_at_0, loc_0 + 33288), i64_from_u32(4, 0)))
						loc_5 = load_i64(memory_at_0, loc_1 + 56)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_13 = add_i32(loc_0, 33304)
					loc_6 = load_i32(memory_at_0, loc_1 + 36)
					while true do
						loc_9 = add_i32(loc_0, 33352)
						loc_7 = load_i32(memory_at_0, add_i32(loc_0, 33368))
						reg_0 = FUNC_LIST[310](loc_9, loc_7, 1057620)
						if load_i32(memory_at_0, reg_0 + 4) == 116 then
							break
						end
						reg_2 = FUNC_LIST[310](loc_9, loc_7, 1057636)
						FUNC_LIST[383](add_i32(loc_1, 24), loc_13, reg_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[310](loc_9, loc_7, 1057652)
					loc_10 = load_i32(memory_at_0, reg_1 + 12)
					store_i32(memory_at_0, loc_0 + 33368, loc_10)
					reg_0 = FUNC_LIST[310](loc_9, loc_10, 1057668)
					store_i32(memory_at_0, reg_0 + 8, 4096)
					FUNC_LIST[382](add_i32(loc_1, 16), loc_13, loc_3, loc_7)
					reg_0 = FUNC_LIST[310](loc_9, loc_7, 1057684)
					store_i32(memory_at_0, reg_0 + 12, 4096)
					loc_13 = add_i32(loc_0, 33364)
					loc_10 = load_i32(memory_at_0, loc_13)
					reg_0 = FUNC_LIST[310](loc_9, loc_7, 1057700)
					store_i32(memory_at_0, reg_0 + 8, loc_10)
					reg_0 = FUNC_LIST[310](loc_9, loc_7, 1057716)
					store_i32(memory_at_0, reg_0, loc_3)
					reg_0 = FUNC_LIST[310](loc_9, loc_7, 1057732)
					store_i32(memory_at_0, reg_0 + 4, loc_6)
					reg_0 = FUNC_LIST[310](loc_9, load_i32(memory_at_0, loc_13), 1057748)
					store_i32(memory_at_0, reg_0 + 12, loc_7)
					store_i32(memory_at_0, loc_13, loc_7)
					if loc_6 < 116 then
						break
					end
					FUNC_LIST[493](loc_6, 116, 1052428)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				TABLE_LIST[0].data[load_i32(memory_at_0, add_i32(mul_i32(loc_6, 24), 1053012))](loc_1, loc_0, loc_3, loc_4)
				loc_5 = load_i64(memory_at_0, loc_1)
				loc_3 = load_i32_u8(memory_at_0, loc_1 + 8)
				store_i64(memory_at_0, loc_0 + 32768, i64_ZERO)
				if loc_3 == 23 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[316](loc_0, loc_5, loc_3, loc_2, 0)
			break
		end
		FUNC_LIST[156](add_i32(loc_0, 33376), add_i32(loc_0, 6688))
		loc_12 = load_i64(memory_at_0, loc_0 + 33288)
		while true do
			while true do
				while true do
					loc_5 = band_i64(load_i64(memory_at_0, loc_0 + 6176), load_i64(memory_at_0, loc_0 + 6688))
					if eq_i64(band_i64(loc_5, i64_from_u32(2048, 0)), i64_ZERO) then
						break
					end
					loc_2 = i64_from_u32(4294965247, 4294967295)
					reg_0 = FUNC_LIST[316](loc_0, loc_12, 22, loc_12, 1)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if eq_i64(band_i64(loc_5, i64_from_u32(8, 0)), i64_ZERO) then
						break
					end
					loc_2 = i64_from_u32(4294967287, 4294967295)
					reg_0 = FUNC_LIST[316](loc_0, load_i64(memory_at_0, loc_0 + 33288), 16, loc_12, 1)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if eq_i64(band_i64(loc_5, i64_from_u32(128, 0)), i64_ZERO) then
						break
					end
					loc_2 = i64_from_u32(4294967167, 4294967295)
					reg_0 = FUNC_LIST[316](loc_0, load_i64(memory_at_0, loc_0 + 33288), 19, loc_12, 1)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if eq_i64(band_i64(loc_5, i64_from_u32(512, 0)), i64_ZERO) then
						break
					end
					loc_2 = i64_from_u32(4294966783, 4294967295)
					reg_0 = FUNC_LIST[316](loc_0, load_i64(memory_at_0, loc_0 + 33288), 21, loc_12, 1)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if eq_i64(band_i64(loc_5, i64_from_u32(2, 0)), i64_ZERO) then
						break
					end
					loc_2 = i64_from_u32(4294966783, 4294967295)
					reg_0 = FUNC_LIST[316](loc_0, load_i64(memory_at_0, loc_0 + 33288), 15, loc_12, 1)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if eq_i64(band_i64(loc_5, i64_from_u32(32, 0)), i64_ZERO) then
					desired = 1
					break
				end
				loc_2 = i64_from_u32(4294967263, 4294967295)
				reg_0 = FUNC_LIST[316](loc_0, load_i64(memory_at_0, loc_0 + 33288), 18, loc_12, 1)
				if reg_0 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 37690, 0)
			store_i64(memory_at_0, loc_0 + 6688, band_i64(load_i64(memory_at_0, loc_0 + 6688), loc_2))
			break
		end
		loc_5 = add_i64(load_i64(memory_at_0, loc_0 + 33280), i64_ONE)
		store_i64(memory_at_0, loc_0 + 24576, loc_5)
		store_i64(memory_at_0, loc_0 + 33280, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_1, 96)
		break
	end
end
FUNC_LIST[314] = --[[ _ZN14riscv_emu_rust3cpu3Cpu10uncompress17h377c5dd617f11db5E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = band_i32(shr_u32(loc_0, 13), 7)
		loc_2 = 4294967295
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				if not br_map[1] then
																																					br_map[1] = (function()
																																						return { [0] = 0, 1, 2, }
																																					end)()
																																				end
																																				temp = br_map[1][band_i32(loc_0, 3)] or 33
																																				if temp < 2 then
																																					if temp < 1 then
																																						break
																																					else
																																						desired = 33
																																						break
																																					end
																																				elseif temp > 2 then
																																					desired = 1
																																					break
																																				else
																																					desired = 32
																																					break
																																				end
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			if not br_map[2] then
																																				br_map[2] = (function()
																																					return { [0] = 8, 2, 3, 4, 32, 5, 6, 7, }
																																				end)()
																																			end
																																			temp = br_map[2][loc_1] or 32
																																			if temp < 6 then
																																				if temp < 4 then
																																					if temp < 3 then
																																						desired = 31
																																						break
																																					else
																																						desired = 30
																																						break
																																					end
																																				elseif temp > 4 then
																																					desired = 28
																																					break
																																				else
																																					desired = 29
																																					break
																																				end
																																			elseif temp > 6 then
																																				if temp < 8 then
																																					desired = 26
																																					break
																																				elseif temp > 8 then
																																					desired = 1
																																					break
																																				else
																																					desired = 25
																																					break
																																				end
																																			else
																																				desired = 27
																																				break
																																			end
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		if not br_map[3] then
																																			br_map[3] = (function()
																																				return { [0] = 8, 15, 16, 9, 10, 11, 12, 13, }
																																			end)()
																																		end
																																		temp = br_map[3][loc_1] or 8
																																		if temp < 12 then
																																			if temp < 10 then
																																				if temp < 9 then
																																					desired = 24
																																					break
																																				else
																																					desired = 23
																																					break
																																				end
																																			elseif temp > 10 then
																																				desired = 21
																																				break
																																			else
																																				desired = 22
																																				break
																																			end
																																		elseif temp > 12 then
																																			if temp < 15 then
																																				desired = 19
																																				break
																																			elseif temp > 15 then
																																				desired = 16
																																				break
																																			else
																																				desired = 17
																																				break
																																			end
																																		else
																																			desired = 20
																																			break
																																		end
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	if not br_map[4] then
																																		br_map[4] = (function()
																																			return { [0] = 25, 26, 27, 28, 29, 22, 23, 24, }
																																		end)()
																																	end
																																	temp = br_map[4][loc_1] or 25
																																	if temp < 26 then
																																		if temp < 24 then
																																			if temp < 23 then
																																				desired = 9
																																				break
																																			else
																																				desired = 8
																																				break
																																			end
																																		elseif temp > 24 then
																																			desired = 6
																																			break
																																		else
																																			desired = 7
																																			break
																																		end
																																	elseif temp > 26 then
																																		if temp < 28 then
																																			desired = 4
																																			break
																																		elseif temp > 28 then
																																			desired = 2
																																			break
																																		else
																																			desired = 3
																																			break
																																		end
																																	else
																																		desired = 5
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																reg_0 = bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 8), 229376), shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 56), band_i32(shl_i32(loc_0, 1), 192)), 20)), band_i32(shl_i32(loc_0, 5), 896)), 275463)
																																desired = 0
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															reg_0 = bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 8), 229376), shl_i32(bor_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 56), band_i32(shr_u32(loc_0, 4), 4)), band_i32(shl_i32(loc_0, 1), 64)), 20)), band_i32(shl_i32(loc_0, 5), 896)), 271363)
																															desired = 0
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														reg_0 = bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 8), 229376), shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 56), band_i32(shl_i32(loc_0, 1), 192)), 20)), band_i32(shl_i32(loc_0, 5), 896)), 275459)
																														desired = 0
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													reg_0 = bor_i32(bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 18), 7340032), shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 32), band_i32(shl_i32(loc_0, 1), 192)), 20)), band_i32(shl_i32(loc_0, 8), 229376)), band_i32(loc_0, 3072)), 8663079)
																													desired = 0
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_1 = shr_u32(loc_0, 7)
																												reg_0 = bor_i32(bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 18), 7340032), shl_i32(bor_i32(band_i32(loc_1, 32), band_i32(shl_i32(loc_0, 1), 64)), 20)), band_i32(shl_i32(loc_0, 8), 229376)), shl_i32(bor_i32(band_i32(loc_1, 24), band_i32(shr_u32(loc_0, 4), 4)), 7)), 8658979)
																												desired = 0
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											reg_0 = bor_i32(bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 18), 7340032), shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 32), band_i32(shl_i32(loc_0, 1), 192)), 20)), band_i32(shl_i32(loc_0, 8), 229376)), band_i32(loc_0, 3072)), 8663075)
																											desired = 0
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										reg_0 = bor_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 48), band_i32(shr_u32(loc_0, 1), 960)), band_i32(shr_u32(loc_0, 4), 4))
																										loc_0 = shr_u32(loc_0, 2)
																										loc_1 = bor_i32(reg_0, band_i32(loc_0, 8))
																										if loc_1 == 0 then
																											desired = 1
																											break
																										end
																										reg_0 = bor_i32(bor_i32(shl_i32(loc_1, 20), band_i32(shl_i32(loc_0, 7), 896)), 66579)
																										desired = 0
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_1 = shr_u32(loc_0, 7)
																									loc_2 = bor_i32(bor_i32(band_i32(shr_u32(loc_0, 2), 31), band_i32(loc_1, 32)), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4294967232))
																									loc_0 = band_i32(loc_1, 31)
																									if loc_0 ~= 0 then
																										desired = 18
																										break
																									end
																									reg_0 = (if bor_i32(loc_2, loc_0) ~= 0 then 4294967295 else 19)
																									desired = 0
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_1 = band_i32(shr_u32(loc_0, 7), 31)
																								if not br_map[5] then
																									br_map[5] = (function()
																										return { [0] = 21, 8, 7, }
																									end)()
																								end
																								temp = br_map[5][loc_1] or 8
																								if temp < 8 then
																									desired = 15
																									break
																								elseif temp > 8 then
																									desired = 1
																									break
																								else
																									desired = 14
																									break
																								end
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							if not br_map[6] then
																								br_map[6] = (function()
																									return { [0] = 8, 9, 10, 11, }
																								end)()
																							end
																							temp = br_map[6][band_i32(shr_u32(loc_0, 10), 3)] or 8
																							if temp < 10 then
																								if temp < 9 then
																									desired = 13
																									break
																								else
																									desired = 12
																									break
																								end
																							elseif temp > 10 then
																								desired = 10
																								break
																							else
																								desired = 11
																								break
																							end
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_1 = shr_i32(shl_i32(loc_0, 19), 31)
																						loc_2 = shr_u32(loc_0, 1)
																						reg_0 = bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_1, 524288), band_i32(shl_i32(bor_i32(bor_i32(bor_i32(bor_i32(bor_i32(bor_i32(band_i32(shr_u32(loc_0, 2), 14), band_i32(shl_i32(loc_0, 3), 32)), band_i32(loc_2, 768)), band_i32(shl_i32(loc_0, 2), 1024)), band_i32(loc_2, 64)), band_i32(shl_i32(loc_0, 1), 128)), band_i32(shr_u32(loc_0, 7), 16)), 8), 523776)), band_i32(shr_u32(loc_0, 4), 256)), 12), band_i32(loc_1, 1044480)), 111)
																						desired = 0
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_1 = shr_i32(shl_i32(loc_0, 19), 31)
																					loc_2 = band_i32(loc_1, 4294966784)
																					reg_0 = bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 13), 7340032), shl_i32(bor_i32(band_i32(shr_u32(bor_i32(bor_i32(bor_i32(band_i32(shr_u32(loc_0, 4), 256), band_i32(shl_i32(loc_0, 1), 192)), band_i32(shl_i32(loc_0, 3), 32)), loc_2), 5), 63), band_i32(shr_u32(loc_2, 6), 64)), 25)), shl_i32(bor_i32(band_i32(shr_u32(loc_1, 11), 1), bor_i32(band_i32(shr_u32(loc_0, 2), 6), band_i32(shr_u32(loc_0, 7), 24))), 7)), 8388707)
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = shr_i32(shl_i32(loc_0, 19), 31)
																				loc_2 = band_i32(loc_1, 4294966784)
																				reg_0 = bor_i32(bor_i32(bor_i32(band_i32(shl_i32(loc_0, 13), 7340032), shl_i32(bor_i32(band_i32(shr_u32(bor_i32(bor_i32(bor_i32(band_i32(shr_u32(loc_0, 4), 256), band_i32(shl_i32(loc_0, 1), 192)), band_i32(shl_i32(loc_0, 3), 32)), loc_2), 5), 63), band_i32(shr_u32(loc_2, 6), 64)), 25)), shl_i32(bor_i32(band_i32(shr_u32(loc_1, 11), 1), bor_i32(band_i32(shr_u32(loc_0, 2), 6), band_i32(shr_u32(loc_0, 7), 24))), 7)), 8392803)
																				desired = 0
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_2, 20), shl_i32(loc_0, 15)), shl_i32(loc_0, 7)), 19)
																			desired = 0
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = shr_u32(loc_0, 7)
																		loc_1 = band_i32(loc_3, 31)
																		if loc_1 == 0 then
																			desired = 1
																			break
																		end
																		reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_3, 32), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4032)), band_i32(shr_u32(loc_0, 2), 31)), 20), shl_i32(loc_1, 15)), shl_i32(loc_1, 7)), 27)
																		desired = 0
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_1 = shr_u32(loc_0, 7)
																	loc_3 = band_i32(loc_1, 31)
																	if loc_3 == 0 then
																		desired = 1
																		break
																	end
																	reg_0 = bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4032)), band_i32(shr_u32(loc_0, 2), 31)), 20), shl_i32(loc_3, 7)), 19)
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_0 = bor_i32(bor_i32(bor_i32(bor_i32(bor_i32(band_i32(shr_u32(loc_0, 2), 16), band_i32(shr_u32(loc_0, 3), 512)), band_i32(shl_i32(loc_0, 1), 64)), band_i32(shl_i32(loc_0, 4), 384)), band_i32(shl_i32(loc_0, 3), 32)), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4294966272))
																if loc_0 == 0 then
																	desired = 1
																	break
																end
																reg_0 = bor_i32(shl_i32(loc_0, 20), 65811)
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_0 = bor_i32(bor_i32(band_i32(shl_i32(loc_0, 10), 126976), band_i32(shl_i32(loc_0, 5), 131072)), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4294705152))
															if loc_0 == 0 then
																desired = 1
																break
															end
															reg_0 = bor_i32(bor_i32(loc_0, shl_i32(loc_1, 7)), 55)
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_1 = shr_u32(loc_0, 7)
														reg_0 = shl_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_u32(loc_0, 2), 31)), 20)
														loc_0 = bor_i32(band_i32(loc_1, 7), 8)
														reg_0 = bor_i32(bor_i32(bor_i32(reg_0, shl_i32(loc_0, 15)), shl_i32(loc_0, 7)), 20499)
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_1 = shr_u32(loc_0, 7)
													reg_0 = shl_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_u32(loc_0, 2), 31)), 20)
													loc_0 = bor_i32(band_i32(loc_1, 7), 8)
													reg_0 = bor_i32(bor_i32(bor_i32(reg_0, shl_i32(loc_0, 15)), shl_i32(loc_0, 7)), 1073762323)
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = shr_u32(loc_0, 7)
												reg_0 = shl_i32(bor_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_i32(shl_i32(loc_0, 19), 31), 4032)), band_i32(shr_u32(loc_0, 2), 31)), 20)
												loc_0 = bor_i32(band_i32(loc_1, 7), 8)
												reg_0 = bor_i32(bor_i32(bor_i32(reg_0, shl_i32(loc_0, 15)), shl_i32(loc_0, 7)), 28691)
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_3 = band_i32(shr_u32(loc_0, 2), 7)
											loc_4 = band_i32(shr_u32(loc_0, 7), 7)
											loc_1 = band_i32(shr_u32(loc_0, 5), 3)
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if band_i32(loc_0, 4096) ~= 0 then
																			break
																		end
																		if not br_map[7] then
																			br_map[7] = (function()
																				return { [0] = 1, 2, 3, 4, }
																			end)()
																		end
																		temp = br_map[7][loc_1] or 1
																		if temp < 3 then
																			if temp < 2 then
																				desired = 15
																				break
																			else
																				desired = 14
																				break
																			end
																		elseif temp > 3 then
																			desired = 12
																			break
																		else
																			desired = 13
																			break
																		end
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if not br_map[8] then
																		br_map[8] = (function()
																			return { [0] = 4, 5, }
																		end)()
																	end
																	temp = br_map[8][loc_1] or 14
																	if temp < 5 then
																		desired = 11
																		break
																	elseif temp > 5 then
																		desired = 1
																		break
																	else
																		desired = 10
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_0 = bor_i32(loc_4, 8)
																reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 1082130483)
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_0 = bor_i32(loc_4, 8)
															reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 8405043)
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_0 = bor_i32(loc_4, 8)
														reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 8413235)
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_0 = bor_i32(loc_4, 8)
													reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 8417331)
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_0 = bor_i32(loc_4, 8)
												reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 1082130491)
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = bor_i32(loc_4, 8)
											reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(loc_0, 15), shl_i32(loc_3, 20)), shl_i32(loc_0, 7)), 8388667)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 32), band_i32(shr_u32(loc_0, 1), 448)), 20), band_i32(shl_i32(loc_0, 18), 32505856)), band_i32(loc_0, 3072)), 77863)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 32), band_i32(shr_u32(loc_0, 1), 192)), 20), band_i32(shl_i32(loc_0, 18), 32505856)), band_i32(loc_0, 3584)), 73763)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(bor_i32(band_i32(shr_u32(loc_0, 7), 32), band_i32(shr_u32(loc_0, 1), 448)), 20), band_i32(shl_i32(loc_0, 18), 32505856)), band_i32(loc_0, 3072)), 77859)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = shr_u32(loc_0, 7)
							loc_1 = band_i32(loc_3, 31)
							if loc_1 == 0 then
								desired = 1
								break
							end
							reg_0 = bor_i32(bor_i32(bor_i32(shl_i32(bor_i32(band_i32(loc_3, 32), band_i32(shr_u32(loc_0, 2), 31)), 20), shl_i32(loc_1, 15)), shl_i32(loc_1, 7)), 4115)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = shr_u32(loc_0, 7)
						loc_3 = band_i32(loc_1, 31)
						if loc_3 == 0 then
							desired = 1
							break
						end
						reg_0 = bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_u32(loc_0, 2), 24)), band_i32(shl_i32(loc_0, 4), 448)), 20), shl_i32(loc_3, 7)), 77831)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = shr_u32(loc_0, 7)
					loc_3 = band_i32(loc_1, 31)
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_u32(loc_0, 2), 28)), band_i32(shl_i32(loc_0, 4), 192)), 20), shl_i32(loc_3, 7)), 73731)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = shr_u32(loc_0, 7)
				loc_3 = band_i32(loc_1, 31)
				if loc_3 == 0 then
					desired = 1
					break
				end
				reg_0 = bor_i32(bor_i32(shl_i32(bor_i32(bor_i32(band_i32(loc_1, 32), band_i32(shr_u32(loc_0, 2), 24)), band_i32(shl_i32(loc_0, 4), 448)), 20), shl_i32(loc_3, 7)), 77827)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = shr_u32(loc_0, 2)
			loc_3 = band_i32(loc_4, 31)
			loc_5 = shr_u32(loc_0, 7)
			loc_1 = band_i32(loc_5, 31)
			while true do
				if band_i32(loc_0, 4096) == 0 then
					break
				end
				while true do
					if band_i32(bor_i32(loc_5, loc_4), 31) ~= 0 then
						break
					end
					reg_0 = 1048691
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						if loc_3 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 == 0 then
						desired = 1
						break
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					loc_2 = bor_i32(bor_i32(bor_i32(shl_i32(loc_3, 20), shl_i32(loc_1, 15)), shl_i32(loc_1, 7)), 51)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = bor_i32(shl_i32(loc_1, 15), 231)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if loc_1 == 0 then
						break
					end
					if loc_3 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 == 0 then
					desired = 1
					break
				end
				if loc_3 == 0 then
					desired = 1
					break
				end
				reg_0 = bor_i32(bor_i32(shl_i32(loc_3, 20), shl_i32(loc_1, 7)), 51)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = bor_i32(shl_i32(loc_1, 15), 103)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[315] = --[[ _ZN14riscv_emu_rust3cpu3Cpu32decode_and_get_instruction_index17h6733dfe668920c51E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local desired
	while true do
		loc_2 = 0
		loc_3 = 1053020
		loc_4 = 1
		while true do
			while true do
				loc_5 = loc_2
				if loc_5 == 116 then
					desired = 1
					break
				end
				loc_6 = load_i32(memory_at_0, loc_3)
				loc_7 = add_i32(loc_3, 4)
				loc_3 = add_i32(loc_3, 24)
				loc_2 = add_i32(loc_5, 1)
				if band_i32(loc_6, loc_1) ~= load_i32(memory_at_0, loc_7) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 0
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_5)
		store_i32(memory_at_0, loc_0, loc_4)
		break
	end
end
FUNC_LIST[316] = --[[ _ZN14riscv_emu_rust3cpu3Cpu11handle_trap17h46a6830d66c452daE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_6 = add_i32(loc_0, 37688)
		reg_0 = FUNC_LIST[311](loc_6)
		loc_7 = reg_0
		loc_8 = (if load_i32_u8(memory_at_0, loc_0 + 37689) ~= 0 then i64_from_u32(0, 2147483648) else i64_from_u32(2147483648, 0))
		loc_9 = i64_ZERO
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									if not br_map[1] then
																										br_map[1] = (function()
																											return { [0] = 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, }
																										end)()
																									end
																									temp = br_map[1][band_i32(loc_2, 255)] or 22
																									if temp < 11 then
																										if temp < 5 then
																											if temp < 2 then
																												if temp < 1 then
																													break
																												else
																													desired = 22
																													break
																												end
																											elseif temp > 2 then
																												if temp < 4 then
																													desired = 20
																													break
																												else
																													desired = 19
																													break
																												end
																											else
																												desired = 21
																												break
																											end
																										elseif temp > 5 then
																											if temp < 8 then
																												if temp < 7 then
																													desired = 17
																													break
																												else
																													desired = 16
																													break
																												end
																											elseif temp > 8 then
																												if temp < 10 then
																													desired = 14
																													break
																												else
																													desired = 13
																													break
																												end
																											else
																												desired = 15
																												break
																											end
																										else
																											desired = 18
																											break
																										end
																									elseif temp > 11 then
																										if temp < 17 then
																											if temp < 14 then
																												if temp < 13 then
																													desired = 11
																													break
																												else
																													desired = 10
																													break
																												end
																											elseif temp > 14 then
																												if temp < 16 then
																													desired = 8
																													break
																												else
																													desired = 7
																													break
																												end
																											else
																												desired = 9
																												break
																											end
																										elseif temp > 17 then
																											if temp < 20 then
																												if temp < 19 then
																													desired = 5
																													break
																												else
																													desired = 4
																													break
																												end
																											elseif temp > 20 then
																												if temp < 22 then
																													desired = 2
																													break
																												else
																													desired = 1
																													break
																												end
																											else
																												desired = 3
																												break
																											end
																										else
																											desired = 6
																											break
																										end
																									else
																										desired = 12
																										break
																									end
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_9 = i64_ONE
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_9 = i64_from_u32(2, 0)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_9 = i64_from_u32(3, 0)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_9 = i64_from_u32(4, 0)
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_9 = i64_from_u32(5, 0)
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_9 = i64_from_u32(6, 0)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_9 = i64_from_u32(7, 0)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_9 = i64_from_u32(8, 0)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_9 = i64_from_u32(9, 0)
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_9 = i64_from_u32(11, 0)
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_9 = i64_from_u32(12, 0)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_9 = i64_from_u32(13, 0)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_9 = i64_from_u32(15, 0)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_9 = loc_8
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_9 = bor_i64(loc_8, i64_ONE)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_9 = bor_i64(loc_8, i64_from_u32(3, 0))
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_9 = bor_i64(loc_8, i64_from_u32(4, 0))
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_9 = bor_i64(loc_8, i64_from_u32(5, 0))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = bor_i64(loc_8, i64_from_u32(7, 0))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_9 = bor_i64(loc_8, i64_from_u32(8, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = bor_i64(loc_8, i64_from_u32(9, 0))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = bor_i64(loc_8, i64_from_u32(11, 0))
			break
		end
		while true do
			while true do
				loc_8 = shl_i64(i64_ONE, loc_9)
				if ne_i64(band_i64(load_i64(memory_at_0, add_i32(loc_0, (if loc_4 ~= 0 then 6168 else 6160))), loc_8), i64_ZERO) then
					break
				end
				loc_10 = 3
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if eq_i64(band_i64((if loc_4 ~= 0 then load_i64(memory_at_0, loc_0 + 2072) else load_i64(memory_at_0, loc_0 + 2064)), loc_8), i64_ZERO) then
					break
				end
				loc_10 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = 1
			break
		end
		store_i32_n8(memory_at_0, loc_5 + 15, loc_10)
		reg_0 = FUNC_LIST[311](add_i32(loc_5, 15))
		loc_11 = reg_0
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_12 = load_i32_u8(memory_at_0, loc_6)
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 0, 1, 2, 3, }
								end)()
							end
							temp = br_map[2][loc_12] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = load_i64(memory_at_0, loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = band_i64(load_i64(memory_at_0, loc_0 + 6144), i64_from_u32(909666, 2147483651))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[122](1052248, 14, 1055820)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i64(memory_at_0, loc_0 + 6144)
			break
		end
		loc_7 = band_i32(loc_7, 255)
		while true do
			while true do
				if loc_4 == 0 then
					break
				end
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[3] then
										br_map[3] = (function()
											return { [0] = 0, 1, 2, 3, }
										end)()
									end
									temp = br_map[3][loc_10] or 0
									if temp < 2 then
										if temp < 1 then
											break
										else
											desired = 6
											break
										end
									elseif temp > 2 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_13 = load_i64(memory_at_0, loc_0 + 32)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_13 = band_i64(load_i64(memory_at_0, loc_0 + 6176), i64_from_u32(546, 0))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[122](1052248, 14, 1055836)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_13 = load_i64(memory_at_0, loc_0 + 6176)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_4 = band_i32(loc_11, 255)
					if loc_4 < loc_7 then
						break
					end
					while true do
						if loc_7 ~= loc_4 then
							break
						end
						while true do
							while true do
								while true do
									while true do
										if not br_map[4] then
											br_map[4] = (function()
												return { [0] = 0, 1, 2, 3, }
											end)()
										end
										temp = br_map[4][loc_12] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if (if eq_i64(band_i64(loc_8, i64_ONE), i64_ZERO) then 1 else 0) == 0 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if (if eq_i64(band_i64(loc_8, i64_from_u32(2, 0)), i64_ZERO) then 1 else 0) == 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[122](1052248, 14, 1055852)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if eq_i64(band_i64(loc_8, i64_from_u32(8, 0)), i64_ZERO) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														if not br_map[5] then
															br_map[5] = (function()
																return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, }
															end)()
														end
														temp = br_map[5][add_i32(band_i32(loc_2, 255), 4294967282)] or 10
														if temp < 5 then
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 11
																	break
																end
															elseif temp > 2 then
																if temp < 4 then
																	desired = 9
																	break
																else
																	desired = 8
																	break
																end
															else
																desired = 10
																break
															end
														elseif temp > 5 then
															if temp < 8 then
																if temp < 7 then
																	desired = 6
																	break
																else
																	desired = 5
																	break
																end
															elseif temp > 8 then
																desired = 2
																break
															else
																desired = 4
																break
															end
														else
															desired = 7
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if (if eq_i64(band_i64(loc_13, i64_ONE), i64_ZERO) then 1 else 0) == 0 then
														desired = 2
														break
													end
													desired = 3
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if (if eq_i64(band_i64(loc_13, i64_from_u32(2, 0)), i64_ZERO) then 1 else 0) == 0 then
													desired = 2
													break
												end
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if (if eq_i64(band_i64(loc_13, i64_from_u32(8, 0)), i64_ZERO) then 1 else 0) == 0 then
												desired = 2
												break
											end
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if (if eq_i64(band_i64(loc_13, i64_from_u32(16, 0)), i64_ZERO) then 1 else 0) == 0 then
											desired = 2
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if (if eq_i64(band_i64(loc_13, i64_from_u32(32, 0)), i64_ZERO) then 1 else 0) == 0 then
										desired = 2
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if (if eq_i64(band_i64(loc_13, i64_from_u32(128, 0)), i64_ZERO) then 1 else 0) == 0 then
									desired = 2
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if (if eq_i64(band_i64(loc_13, i64_from_u32(256, 0)), i64_ZERO) then 1 else 0) == 0 then
								desired = 2
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if (if eq_i64(band_i64(loc_13, i64_from_u32(512, 0)), i64_ZERO) then 1 else 0) == 0 then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if ne_i64(band_i64(loc_13, i64_from_u32(2048, 0)), i64_ZERO) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 37688, loc_10)
			reg_1 = FUNC_LIST[284](loc_6)
			store_i32_n8(memory_at_0, add_i32(loc_0, 37681), band_i32(reg_1, 255))
			loc_4 = 261
			loc_6 = 322
			loc_2 = 321
			loc_11 = 323
			while true do
				while true do
					while true do
						while true do
							if not br_map[6] then
								br_map[6] = (function()
									return { [0] = 0, 3, 1, 2, }
								end)()
							end
							temp = br_map[6][loc_10] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = 5
						loc_6 = 66
						loc_2 = 65
						loc_11 = 67
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[122](1052248, 14, 1055868)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = 773
				loc_6 = 834
				loc_2 = 833
				loc_11 = 835
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_13 = extend_i64_u32(loc_7)
			FUNC_LIST[317](loc_0, loc_2, loc_3)
			FUNC_LIST[317](loc_0, loc_6, loc_9)
			FUNC_LIST[317](loc_0, loc_11, loc_1)
			reg_1 = FUNC_LIST[318](loc_0, loc_4)
			loc_8 = reg_1
			store_i64(memory_at_0, loc_0 + 33288, (if eq_i64(band_i64(loc_8, i64_from_u32(3, 0)), i64_ZERO) then loc_8 else add_i64(band_i64(loc_8, i64_from_u32(4294967292, 4294967295)), band_i64(shl_i64(loc_9, i64_from_u32(2, 0)), i64_from_u32(262140, 0)))))
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[7] then
									br_map[7] = (function()
										return { [0] = 0, 1, 2, 3, }
									end)()
								end
								temp = br_map[7][load_i32_u8(memory_at_0, loc_0 + 37688)] or 0
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[122](1055884, 19, 1055904)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = load_i64(memory_at_0, loc_0 + 6144)
						store_i64(memory_at_0, loc_0 + 6144, bor_i64(bor_i64(band_i64(loc_9, i64_from_u32(4294967005, 4294967295)), band_i64(shl_i64(loc_13, i64_from_u32(8, 0)), i64_from_u32(256, 0))), band_i64(shl_i64(loc_9, i64_from_u32(4, 0)), i64_from_u32(32, 0))))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[122](1052248, 14, 1055920)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = load_i64(memory_at_0, loc_0 + 6144)
				store_i64(memory_at_0, loc_0 + 6144, bor_i64(bor_i64(band_i64(loc_9, i64_from_u32(4294961015, 4294967295)), band_i64(shl_i64(loc_9, i64_from_u32(4, 0)), i64_from_u32(128, 0))), shl_i64(loc_13, i64_from_u32(11, 0))))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = 1
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[317] = --[[ _ZN14riscv_emu_rust3cpu3Cpu13write_csr_raw17h310e0038b40c34deE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_3 = band_i32(loc_1, 65535)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 1, 2, }
											end)()
										end
										temp = br_map[1][add_i32(loc_3, 4294967295)] or 0
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										if not br_map[2] then
											br_map[2] = (function()
												return { [0] = 3, 7, 7, 7, 4, }
											end)()
										end
										temp = br_map[2][add_i32(loc_3, 4294967040)] or 0
										if temp < 4 then
											if temp < 3 then
												break
											else
												desired = 5
												break
											end
										elseif temp > 4 then
											desired = 1
											break
										else
											desired = 4
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_3 == 324 then
										desired = 3
										break
									end
									if loc_3 == 771 then
										desired = 2
										break
									end
									if loc_3 ~= 3073 then
										desired = 1
										break
									end
									store_i64(memory_at_0, add_i32(loc_0, 33392), loc_2)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i64(memory_at_0, loc_0 + 24, bor_i64(band_i64(load_i64(memory_at_0, loc_0 + 24), i64_from_u32(4294967264, 4294967295)), band_i64(loc_2, i64_from_u32(31, 0))))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_0 + 24, bor_i64(band_i64(load_i64(memory_at_0, loc_0 + 24), i64_from_u32(4294967071, 4294967295)), band_i64(shl_i64(loc_2, i64_from_u32(5, 0)), i64_from_u32(224, 0))))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, loc_0 + 6144, bor_i64(band_i64(load_i64(memory_at_0, loc_0 + 6144), i64_from_u32(4294057629, 2147483644)), band_i64(loc_2, i64_from_u32(909666, 2147483651))))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64(memory_at_0, loc_0 + 6176, bor_i64(band_i64(load_i64(memory_at_0, loc_0 + 6176), i64_from_u32(4294966749, 4294967295)), band_i64(loc_2, i64_from_u32(546, 0))))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_0 + 6688, bor_i64(band_i64(load_i64(memory_at_0, loc_0 + 6688), i64_from_u32(4294966749, 4294967295)), band_i64(loc_2, i64_from_u32(546, 0))))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0 + 6168, band_i64(loc_2, i64_from_u32(1638, 0)))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_0, shl_i32(band_i32(loc_1, 65535), 3)), loc_2)
		break
	end
end
FUNC_LIST[318] = --[[ _ZN14riscv_emu_rust3cpu3Cpu12read_csr_raw17h205726a44ad6244cE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_2 = band_i32(loc_1, 65535)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 1, 2, }
											end)()
										end
										temp = br_map[1][add_i32(loc_2, 4294967295)] or 0
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										while true do
											if not br_map[2] then
												br_map[2] = (function()
													return { [0] = 4, 1, 1, 1, 5, }
												end)()
											end
											temp = br_map[2][add_i32(loc_2, 4294967040)] or 0
											if temp < 4 then
												if temp < 1 then
													break
												else
													desired = 8
													break
												end
											elseif temp > 4 then
												desired = 4
												break
											else
												desired = 5
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_2 == 324 then
											desired = 3
											break
										end
										if loc_2 == 3073 then
											desired = 2
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = band_i32(loc_1, 65535)
									if loc_1 >= 4096 then
										desired = 1
										break
									end
									reg_0 = load_i64(memory_at_0, add_i32(loc_0, shl_i32(loc_1, 3)))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = band_i64(load_i64(memory_at_0, loc_0 + 24), i64_from_u32(31, 0))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = band_i64(shr_u64(load_i64(memory_at_0, loc_0 + 24), i64_from_u32(5, 0)), i64_from_u32(7, 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = band_i64(load_i64(memory_at_0, loc_0 + 6144), i64_from_u32(909666, 2147483651))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = band_i64(load_i64(memory_at_0, loc_0 + 6176), i64_from_u32(546, 0))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = band_i64(load_i64(memory_at_0, loc_0 + 6688), i64_from_u32(546, 0))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = load_i64(memory_at_0, add_i32(loc_0, 33392))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_1, 4096, 1055936)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[319] = --[[ _ZN14riscv_emu_rust3cpu3Cpu24has_csr_access_privilege17hacd0c297448fb9f6E ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[311](add_i32(loc_0, 37688))
		reg_0 = (if band_i32(shr_u32(loc_1, 8), 3) <= band_i32(reg_1, 255) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[320] = --[[ _ZN14riscv_emu_rust3cpu3Cpu28disassemble_next_instruction17h9fb6b519326e5c54E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[157](add_i32(loc_2, 16), add_i32(loc_1, 33376), load_i64(memory_at_0, loc_1 + 33288))
		loc_3 = add_i32(loc_1, 33288)
		while true do
			while true do
				while true do
					if load_i32_u8(memory_at_0, loc_2 + 24) ~= 23 then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_2 + 16)
					store_i32(memory_at_0, loc_2 + 12, loc_4)
					while true do
						if band_i32(loc_4, 3) == 3 then
							break
						end
						loc_4 = band_i32(loc_4, 65535)
						store_i32(memory_at_0, loc_2 + 12, loc_4)
						reg_0 = FUNC_LIST[314](loc_4)
						loc_4 = reg_0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[315](loc_2, loc_4)
					while true do
						if load_i32(memory_at_0, loc_2) ~= 0 then
							break
						end
						loc_3 = load_i32(memory_at_0, loc_2 + 4)
						if loc_3 >= 116 then
							desired = 2
							break
						end
						loc_5 = add_i32(loc_2, 68)
						store_i32(memory_at_0, loc_5, 1)
						loc_6 = add_i32(add_i32(loc_2, 48), 12)
						store_i32(memory_at_0, loc_6, 1)
						store_i32(memory_at_0, loc_2 + 108, 30)
						loc_7 = load_i64(memory_at_0, loc_1 + 33288)
						store_i64(memory_at_0, loc_2 + 16, (if load_i32_u8(memory_at_0, loc_1 + 37689) ~= 0 then loc_7 else band_i64(loc_7, i64_from_u32(4294967295, 0))))
						store_i32(memory_at_0, loc_2 + 52, 2)
						store_i32(memory_at_0, loc_2 + 48, 1056016)
						store_i32(memory_at_0, loc_2 + 104, add_i32(loc_2, 16))
						store_i32_n8(memory_at_0, loc_2 + 100, 3)
						store_i32(memory_at_0, loc_2 + 96, 8)
						store_i64(memory_at_0, loc_2 + 88, i64_from_u32(32, 0))
						store_i64(memory_at_0, loc_2 + 80, i64_from_u32(0, 16))
						store_i32(memory_at_0, loc_2 + 72, 2)
						store_i32(memory_at_0, loc_2 + 64, add_i32(loc_2, 72))
						store_i32(memory_at_0, loc_2 + 56, add_i32(loc_2, 104))
						FUNC_LIST[294](add_i32(loc_2, 36), add_i32(loc_2, 48))
						store_i32(memory_at_0, loc_5, 1)
						store_i32(memory_at_0, loc_6, 1)
						store_i32(memory_at_0, loc_2 + 108, 33)
						store_i32(memory_at_0, loc_2 + 52, 2)
						store_i32(memory_at_0, loc_2 + 48, 1056032)
						store_i32(memory_at_0, loc_2 + 104, add_i32(loc_2, 12))
						store_i32_n8(memory_at_0, loc_2 + 100, 3)
						store_i32(memory_at_0, loc_2 + 96, 8)
						store_i64(memory_at_0, loc_2 + 88, i64_from_u32(32, 0))
						store_i64(memory_at_0, loc_2 + 80, i64_from_u32(0, 8))
						store_i32(memory_at_0, loc_2 + 72, 2)
						store_i32(memory_at_0, loc_2 + 64, add_i32(loc_2, 72))
						store_i32(memory_at_0, loc_2 + 56, add_i32(loc_2, 104))
						FUNC_LIST[294](add_i32(loc_2, 16), add_i32(loc_2, 48))
						FUNC_LIST[128](add_i32(loc_2, 36), load_i32(memory_at_0, loc_2 + 16), load_i32(memory_at_0, loc_2 + 24))
						FUNC_LIST[367](add_i32(loc_2, 16))
						loc_5 = add_i32(add_i32(loc_2, 72), 12)
						store_i64(memory_at_0, loc_5, i64_ONE)
						store_i32(memory_at_0, loc_2 + 76, 2)
						store_i32(memory_at_0, loc_2 + 72, 1056032)
						store_i32(memory_at_0, loc_2 + 20, 31)
						loc_3 = mul_i32(loc_3, 24)
						store_i32(memory_at_0, loc_2 + 16, add_i32(loc_3, 1053004))
						store_i32(memory_at_0, loc_2 + 80, add_i32(loc_2, 16))
						FUNC_LIST[294](add_i32(loc_2, 48), add_i32(loc_2, 72))
						FUNC_LIST[128](add_i32(loc_2, 36), load_i32(memory_at_0, loc_2 + 48), load_i32(memory_at_0, loc_2 + 56))
						loc_3 = load_i32(memory_at_0, add_i32(loc_3, 1053016))
						FUNC_LIST[367](add_i32(loc_2, 48))
						TABLE_LIST[0].data[loc_3](add_i32(loc_2, 48), loc_1, loc_4, load_i64(memory_at_0, loc_1 + 33288), 1)
						store_i64(memory_at_0, loc_5, i64_ONE)
						store_i32(memory_at_0, loc_2 + 108, 34)
						store_i32(memory_at_0, loc_2 + 76, 1)
						store_i32(memory_at_0, loc_2 + 72, 1056048)
						store_i32(memory_at_0, loc_2 + 104, add_i32(loc_2, 48))
						store_i32(memory_at_0, loc_2 + 80, add_i32(loc_2, 104))
						FUNC_LIST[294](add_i32(loc_2, 16), add_i32(loc_2, 72))
						FUNC_LIST[367](add_i32(loc_2, 48))
						FUNC_LIST[128](add_i32(loc_2, 36), load_i32(memory_at_0, loc_2 + 16), load_i32(memory_at_0, loc_2 + 24))
						FUNC_LIST[367](add_i32(loc_2, 16))
						store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_2, 36), 8)))
						store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2 + 36))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, add_i32(add_i32(loc_2, 48), 12), 33)
					store_i64(memory_at_0, add_i32(add_i32(loc_2, 72), 12), i64_from_u32(2, 0))
					store_i32(memory_at_0, loc_2 + 76, 2)
					store_i32(memory_at_0, loc_2 + 72, 1052396)
					store_i32(memory_at_0, loc_2 + 52, 30)
					store_i32(memory_at_0, loc_2 + 48, loc_3)
					store_i32(memory_at_0, loc_2 + 80, add_i32(loc_2, 48))
					store_i32(memory_at_0, loc_2 + 56, add_i32(loc_2, 12))
					FUNC_LIST[294](loc_0, add_i32(loc_2, 72))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, add_i32(loc_2, 68), 1)
				store_i32(memory_at_0, add_i32(loc_2, 60), 1)
				store_i32(memory_at_0, loc_2 + 40, 30)
				store_i32(memory_at_0, loc_2 + 36, loc_3)
				store_i32(memory_at_0, loc_2 + 52, 2)
				store_i32(memory_at_0, loc_2 + 48, 1056088)
				store_i32_n8(memory_at_0, loc_2 + 100, 3)
				store_i32(memory_at_0, loc_2 + 96, 8)
				store_i64(memory_at_0, loc_2 + 88, i64_from_u32(32, 0))
				store_i64(memory_at_0, loc_2 + 80, i64_from_u32(0, 16))
				store_i32(memory_at_0, loc_2 + 72, 2)
				store_i32(memory_at_0, loc_2 + 64, add_i32(loc_2, 72))
				store_i32(memory_at_0, loc_2 + 56, add_i32(loc_2, 36))
				FUNC_LIST[294](loc_0, add_i32(loc_2, 48))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_3, 116, 1055804)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 112)
		break
	end
end
FUNC_LIST[321] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_b17h440e79b389d6a080E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[186](add_i32(loc_5, 16), loc_2)
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		loc_2 = load_i32(memory_at_0, loc_5 + 24)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_2)
		loc_6 = add_i32(loc_5, 68)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 60, 1)
		store_i32(memory_at_0, loc_5 + 56, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
		FUNC_LIST[367](add_i32(loc_5, 44))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 68), i64_ONE)
				store_i32(memory_at_0, loc_5 + 92, 30)
				store_i32(memory_at_0, loc_5 + 60, 1)
				store_i32(memory_at_0, loc_5 + 56, 1056108)
				store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 88))
				FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
				FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
				FUNC_LIST[367](add_i32(loc_5, 44))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056116)
			error("out of code bounds")
		end
		loc_2 = load_i32(memory_at_0, loc_5 + 28)
		FUNC_LIST[293](loc_5, loc_2)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 60, 1)
		store_i32(memory_at_0, loc_5 + 56, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
		FUNC_LIST[367](add_i32(loc_5, 44))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 68), i64_ONE)
				store_i32(memory_at_0, loc_5 + 92, 30)
				store_i32(memory_at_0, loc_5 + 60, 1)
				store_i32(memory_at_0, loc_5 + 56, 1056108)
				store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 88))
				FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
				FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
				FUNC_LIST[367](add_i32(loc_5, 44))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056144)
			error("out of code bounds")
		end
		store_i64(memory_at_0, add_i32(loc_5, 68), i64_ONE)
		store_i32(memory_at_0, loc_5 + 60, 1)
		store_i32(memory_at_0, loc_5 + 56, 1056136)
		store_i32(memory_at_0, loc_5 + 84, 30)
		store_i64(memory_at_0, loc_5 + 88, add_i64(load_i64(memory_at_0, loc_5 + 16), loc_3))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 80))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 88))
		FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
		FUNC_LIST[367](add_i32(loc_5, 44))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[322] = --[[ _ZN14riscv_emu_rust3cpu15dump_format_csr17h01b414012cacd136E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		store_i32_n16(memory_at_0, loc_5 + 28, shr_u32(loc_2, 20))
		loc_6 = band_i32(shr_u32(loc_2, 7), 31)
		store_i32(memory_at_0, loc_5 + 24, loc_6)
		store_i32(memory_at_0, loc_5 + 20, band_i32(shr_u32(loc_2, 15), 31))
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_6)
		loc_2 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_2, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		loc_7 = add_i32(loc_5, 28)
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_2, i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_2, i64_ONE)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i32(memory_at_0, loc_5 + 92, 35)
		store_i32(memory_at_0, loc_5 + 88, loc_7)
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			reg_0 = FUNC_LIST[318](loc_1, load_i32_u16(memory_at_0, loc_5 + 28))
			loc_8 = reg_0
			store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
			store_i32(memory_at_0, loc_5 + 48, 30)
			store_i64(memory_at_0, loc_5 + 88, loc_8)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[293](loc_5, load_i32(memory_at_0, loc_5 + 20))
		store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			while true do
				if loc_4 == 0 then
					break
				end
				loc_2 = load_i32(memory_at_0, loc_5 + 20)
				if loc_2 > 31 then
					desired = 1
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
				store_i32(memory_at_0, loc_5 + 92, 30)
				store_i32(memory_at_0, loc_5 + 68, 1)
				store_i32(memory_at_0, loc_5 + 64, 1056108)
				store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
				FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
				FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
				FUNC_LIST[367](add_i32(loc_5, 52))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
			store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
			GLOBAL_LIST[0].value = add_i32(loc_5, 96)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[493](loc_2, 32, 1056160)
		error("out of code bounds")
	end
end
FUNC_LIST[323] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_i17hbb914c4d942d6cdeE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[191](add_i32(loc_5, 16), loc_2)
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		loc_2 = load_i32(memory_at_0, loc_5 + 24)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_2)
		loc_6 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
				store_i32(memory_at_0, loc_5 + 92, 30)
				store_i32(memory_at_0, loc_5 + 68, 1)
				store_i32(memory_at_0, loc_5 + 64, 1056108)
				store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
				FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
				FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
				FUNC_LIST[367](add_i32(loc_5, 52))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056176)
			error("out of code bounds")
		end
		loc_2 = load_i32(memory_at_0, loc_5 + 28)
		FUNC_LIST[293](loc_5, loc_2)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
				store_i32(memory_at_0, loc_5 + 92, 30)
				store_i32(memory_at_0, loc_5 + 68, 1)
				store_i32(memory_at_0, loc_5 + 64, 1056108)
				store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
				FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
				FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
				FUNC_LIST[367](add_i32(loc_5, 52))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056192)
			error("out of code bounds")
		end
		store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i32(memory_at_0, loc_5 + 92, 30)
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 88, add_i32(loc_5, 16))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[324] = --[[ _ZN14riscv_emu_rust3cpu17dump_format_i_mem17hb6e904a9bc1e6675E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[191](add_i32(loc_5, 24), loc_2)
		store_i32(memory_at_0, loc_5 + 48, 0)
		store_i64(memory_at_0, loc_5 + 40, i64_ONE)
		loc_2 = load_i32(memory_at_0, loc_5 + 32)
		FUNC_LIST[293](add_i32(loc_5, 16), loc_2)
		loc_6 = add_i32(add_i32(loc_5, 88), 12)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 92, 1)
		store_i32(memory_at_0, loc_5 + 88, 1056048)
		store_i64(memory_at_0, loc_5 + 52, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 52))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
		FUNC_LIST[367](add_i32(loc_5, 64))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056208)
			error("out of code bounds")
		end
		FUNC_LIST[293](add_i32(loc_5, 8), load_i32(memory_at_0, loc_5 + 36))
		store_i32(memory_at_0, add_i32(add_i32(loc_5, 64), 12), 31)
		store_i64(memory_at_0, loc_6, i64_from_u32(2, 0))
		store_i32(memory_at_0, loc_5 + 68, 30)
		store_i32(memory_at_0, loc_5 + 92, 2)
		store_i32(memory_at_0, loc_5 + 88, 1056228)
		store_i64(memory_at_0, loc_5 + 80, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 80))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 24))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 64))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_5 + 36)
				if loc_4 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_4, 32, 1056244)
			error("out of code bounds")
		end
		store_i64(memory_at_0, add_i32(loc_5, 100), i64_ZERO)
		store_i32(memory_at_0, loc_5 + 92, 1)
		store_i32(memory_at_0, loc_5 + 88, 1056264)
		store_i32(memory_at_0, loc_5 + 96, 1052248)
		FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
		FUNC_LIST[367](add_i32(loc_5, 64))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 40), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 40))
		GLOBAL_LIST[0].value = add_i32(loc_5, 112)
		break
	end
end
FUNC_LIST[325] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_j17hdfd33f20a11f64f1E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[210](add_i32(loc_5, 16), loc_2)
		loc_6 = load_i64(memory_at_0, loc_5 + 16)
		loc_2 = load_i32(memory_at_0, loc_5 + 24)
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_2)
		loc_7 = add_i32(loc_5, 68)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 60, 1)
		store_i32(memory_at_0, loc_5 + 56, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
		FUNC_LIST[367](add_i32(loc_5, 44))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_7, i64_ONE)
			store_i32(memory_at_0, loc_5 + 60, 1)
			store_i32(memory_at_0, loc_5 + 56, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
			FUNC_LIST[367](add_i32(loc_5, 44))
			break
		end
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 60, 1)
		store_i32(memory_at_0, loc_5 + 56, 1056136)
		store_i32(memory_at_0, loc_5 + 84, 30)
		store_i64(memory_at_0, loc_5 + 88, add_i64(loc_6, loc_3))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 80))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 88))
		FUNC_LIST[294](add_i32(loc_5, 44), add_i32(loc_5, 56))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 44), load_i32(memory_at_0, loc_5 + 52))
		FUNC_LIST[367](add_i32(loc_5, 44))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[326] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_r17hd7fb69232cb18f40E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		loc_6 = band_i32(shr_u32(loc_2, 7), 31)
		FUNC_LIST[293](add_i32(loc_5, 24), loc_6)
		loc_7 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 24))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		loc_8 = shr_u32(loc_2, 20)
		loc_2 = band_i32(shr_u32(loc_2, 15), 31)
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_7, i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		loc_8 = band_i32(loc_8, 31)
		FUNC_LIST[293](add_i32(loc_5, 16), loc_2)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		FUNC_LIST[293](add_i32(loc_5, 8), loc_8)
		loc_2 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_2, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_2, i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_8, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[327] = --[[ _ZN14riscv_emu_rust3cpu14dump_format_r217h578085d10d8c2872E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 32, i64_ONE)
		loc_6 = band_i32(shr_u32(loc_2, 7), 31)
		FUNC_LIST[293](add_i32(loc_5, 24), loc_6)
		loc_7 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056048)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 24))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		loc_8 = shr_u32(loc_2, 20)
		loc_9 = band_i32(shr_u32(loc_2, 15), 31)
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_7, i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_6, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		loc_8 = band_i32(loc_8, 31)
		FUNC_LIST[293](add_i32(loc_5, 16), loc_9)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_9, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		loc_2 = shr_u32(loc_2, 27)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_8)
		loc_7 = add_i32(loc_5, 76)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_7, i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_8, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		FUNC_LIST[293](loc_5, loc_2)
		store_i64(memory_at_0, loc_7, i64_ONE)
		store_i32(memory_at_0, loc_5 + 48, 31)
		store_i32(memory_at_0, loc_5 + 68, 1)
		store_i32(memory_at_0, loc_5 + 64, 1056136)
		store_i64(memory_at_0, loc_5 + 88, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_5 + 44, add_i32(loc_5, 88))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 44))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
		FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, add_i32(loc_5, 76), i64_ONE)
			store_i32(memory_at_0, loc_5 + 68, 1)
			store_i32(memory_at_0, loc_5 + 64, 1056108)
			store_i32(memory_at_0, loc_5 + 92, 30)
			store_i32(memory_at_0, loc_5 + 88, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 88))
			FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 64))
			FUNC_LIST[128](add_i32(loc_5, 32), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
			FUNC_LIST[367](add_i32(loc_5, 52))
			break
		end
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 32))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 32), 8)))
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[328] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_s17h5e41252ca4b45d9aE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[188](add_i32(loc_5, 24), loc_2)
		store_i32(memory_at_0, loc_5 + 48, 0)
		store_i64(memory_at_0, loc_5 + 40, i64_ONE)
		loc_2 = load_i32(memory_at_0, loc_5 + 36)
		FUNC_LIST[293](add_i32(loc_5, 16), loc_2)
		loc_6 = add_i32(add_i32(loc_5, 88), 12)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 31)
		store_i32(memory_at_0, loc_5 + 92, 1)
		store_i32(memory_at_0, loc_5 + 88, 1056048)
		store_i64(memory_at_0, loc_5 + 52, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 80, add_i32(loc_5, 52))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 80))
		FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
		FUNC_LIST[367](add_i32(loc_5, 64))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				if loc_2 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_2, 32, 1056272)
			error("out of code bounds")
		end
		FUNC_LIST[293](add_i32(loc_5, 8), load_i32(memory_at_0, loc_5 + 32))
		store_i32(memory_at_0, add_i32(add_i32(loc_5, 64), 12), 31)
		store_i64(memory_at_0, loc_6, i64_from_u32(2, 0))
		store_i32(memory_at_0, loc_5 + 68, 30)
		store_i32(memory_at_0, loc_5 + 92, 2)
		store_i32(memory_at_0, loc_5 + 88, 1056228)
		store_i64(memory_at_0, loc_5 + 80, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 72, add_i32(loc_5, 80))
		store_i32(memory_at_0, loc_5 + 64, add_i32(loc_5, 24))
		store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 64))
		FUNC_LIST[294](add_i32(loc_5, 52), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 52), load_i32(memory_at_0, loc_5 + 60))
		FUNC_LIST[367](add_i32(loc_5, 52))
		while true do
			if loc_4 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_5 + 32)
				if loc_4 > 31 then
					break
				end
				store_i64(memory_at_0, add_i32(loc_5, 100), i64_ONE)
				store_i32(memory_at_0, loc_5 + 56, 30)
				store_i32(memory_at_0, loc_5 + 92, 1)
				store_i32(memory_at_0, loc_5 + 88, 1056108)
				store_i32(memory_at_0, loc_5 + 52, add_i32(add_i32(loc_1, shl_i32(loc_4, 3)), 32768))
				store_i32(memory_at_0, loc_5 + 96, add_i32(loc_5, 52))
				FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
				FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
				FUNC_LIST[367](add_i32(loc_5, 64))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[493](loc_4, 32, 1056288)
			error("out of code bounds")
		end
		store_i64(memory_at_0, add_i32(loc_5, 100), i64_ZERO)
		store_i32(memory_at_0, loc_5 + 92, 1)
		store_i32(memory_at_0, loc_5 + 88, 1056264)
		store_i32(memory_at_0, loc_5 + 96, 1052248)
		FUNC_LIST[294](add_i32(loc_5, 64), add_i32(loc_5, 88))
		FUNC_LIST[128](add_i32(loc_5, 40), load_i32(memory_at_0, loc_5 + 64), load_i32(memory_at_0, loc_5 + 72))
		FUNC_LIST[367](add_i32(loc_5, 64))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 40), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 40))
		GLOBAL_LIST[0].value = add_i32(loc_5, 112)
		break
	end
end
FUNC_LIST[329] = --[[ _ZN14riscv_emu_rust3cpu13dump_format_u17h55bb54060d169571E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[206](add_i32(loc_5, 16), loc_2)
		loc_2 = load_i32(memory_at_0, loc_5 + 24)
		store_i32(memory_at_0, loc_5 + 40, loc_2)
		store_i64(memory_at_0, loc_5 + 32, load_i64(memory_at_0, loc_5 + 16))
		store_i32(memory_at_0, loc_5 + 56, 0)
		store_i64(memory_at_0, loc_5 + 48, i64_ONE)
		FUNC_LIST[293](add_i32(loc_5, 8), loc_2)
		loc_6 = add_i32(loc_5, 92)
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 64, 31)
		store_i32(memory_at_0, loc_5 + 84, 1)
		store_i32(memory_at_0, loc_5 + 80, 1056048)
		store_i64(memory_at_0, loc_5 + 104, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_5 + 60, add_i32(loc_5, 104))
		store_i32(memory_at_0, loc_5 + 88, add_i32(loc_5, 60))
		FUNC_LIST[294](add_i32(loc_5, 68), add_i32(loc_5, 80))
		FUNC_LIST[128](add_i32(loc_5, 48), load_i32(memory_at_0, loc_5 + 68), load_i32(memory_at_0, loc_5 + 76))
		FUNC_LIST[367](add_i32(loc_5, 68))
		while true do
			if loc_4 == 0 then
				break
			end
			store_i64(memory_at_0, loc_6, i64_ONE)
			store_i32(memory_at_0, loc_5 + 84, 1)
			store_i32(memory_at_0, loc_5 + 80, 1056108)
			store_i32(memory_at_0, loc_5 + 108, 30)
			store_i32(memory_at_0, loc_5 + 104, add_i32(add_i32(loc_1, shl_i32(loc_2, 3)), 32768))
			store_i32(memory_at_0, loc_5 + 88, add_i32(loc_5, 104))
			FUNC_LIST[294](add_i32(loc_5, 68), add_i32(loc_5, 80))
			FUNC_LIST[128](add_i32(loc_5, 48), load_i32(memory_at_0, loc_5 + 68), load_i32(memory_at_0, loc_5 + 76))
			FUNC_LIST[367](add_i32(loc_5, 68))
			break
		end
		store_i64(memory_at_0, loc_6, i64_ONE)
		store_i32(memory_at_0, loc_5 + 84, 1)
		store_i32(memory_at_0, loc_5 + 80, 1056136)
		store_i32(memory_at_0, loc_5 + 108, 30)
		store_i32(memory_at_0, loc_5 + 88, add_i32(loc_5, 104))
		store_i32(memory_at_0, loc_5 + 104, add_i32(loc_5, 32))
		FUNC_LIST[294](add_i32(loc_5, 68), add_i32(loc_5, 80))
		FUNC_LIST[128](add_i32(loc_5, 48), load_i32(memory_at_0, loc_5 + 68), load_i32(memory_at_0, loc_5 + 76))
		FUNC_LIST[367](add_i32(loc_5, 68))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_5, 48), 8)))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_5 + 48))
		GLOBAL_LIST[0].value = add_i32(loc_5, 112)
		break
	end
end
FUNC_LIST[330] = --[[ _ZN14riscv_emu_rust3cpu10dump_empty17h320b7ab50ed39a7aE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		store_i32(memory_at_0, loc_0 + 8, 0)
		store_i64(memory_at_0, loc_0, i64_ONE)
		break
	end
end
FUNC_LIST[331] = --[[ _ZN5alloc3fmt6format17h72da8280f5a072cdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32(memory_at_0, add_i32(loc_1, 12))
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][load_i32(memory_at_0, loc_1 + 4)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 ~= 0 then
							desired = 3
							break
						end
						loc_3 = 1058020
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 ~= 0 then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_1)
					loc_1 = load_i32(memory_at_0, loc_3 + 4)
					loc_3 = load_i32(memory_at_0, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[486](loc_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[353](add_i32(loc_2, 8), loc_1, 0)
			loc_4 = load_i32(memory_at_0, loc_2 + 12)
			reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_2 + 8), loc_3, loc_1)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_0 + 8, loc_1)
			store_i32(memory_at_0, loc_0 + 4, loc_4)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[332] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h1357aca8affe7fe8E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(loc_1, 80))
		break
	end
	return reg_0
end
FUNC_LIST[333] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h43aa39c8d9d4628cE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[334] = --[[ _ZN14riscv_emu_rust8Emulator3new17he440bf0a281a0a2dE ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[312](add_i32(loc_0, 8), loc_1, loc_2)
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i32_n8(memory_at_0, loc_0 + 37704, 0)
		break
	end
end
FUNC_LIST[335] = --[[ _ZN14riscv_emu_rust8Emulator3run17h806b3da8d68b2d27E ]] function(loc_0)
	while true do
		while true do
			if load_i32_u8(memory_at_0, loc_0 + 37704) ~= 0 then
				break
			end
			FUNC_LIST[336](loc_0)
			error("out of code bounds")
		end
		FUNC_LIST[337](loc_0)
		break
	end
end
FUNC_LIST[336] = --[[ _ZN14riscv_emu_rust8Emulator11run_program17h6eee8dc0102b3314E ]] function(loc_0)
	while true do
		loc_0 = add_i32(loc_0, 8)
		while true do
			FUNC_LIST[313](loc_0)
			continue
		end
		break
	end
end
FUNC_LIST[337] = --[[ _ZN14riscv_emu_rust8Emulator8run_test17h7eb94fb7586dbba1E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_1
		store_i64(memory_at_0, add_i32(loc_1, 44), i64_ZERO)
		store_i32(memory_at_0, loc_1 + 36, 1)
		store_i32(memory_at_0, loc_1 + 32, 1058084)
		store_i32(memory_at_0, loc_1 + 40, 1058020)
		loc_2 = add_i32(loc_0, 33384)
		loc_3 = add_i32(loc_0, 8)
		FUNC_LIST[447](add_i32(loc_1, 32))
		while true do
			while true do
				while true do
					while true do
						FUNC_LIST[320](add_i32(loc_1, 4), loc_3)
						FUNC_LIST[338](loc_0, load_i32(memory_at_0, loc_1 + 4), load_i32(memory_at_0, loc_1 + 12))
						FUNC_LIST[338](loc_0, 1058092, 1)
						FUNC_LIST[313](loc_3)
						reg_1 = FUNC_LIST[160](loc_2, load_i64(memory_at_0, loc_0))
						loc_4 = reg_1
						store_i32(memory_at_0, loc_1 + 16, loc_4)
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 2, }
								end)()
							end
							temp = br_map[1][loc_4] or 3
							if temp < 2 then
								break
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						FUNC_LIST[367](add_i32(loc_1, 4))
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(loc_1, 44), i64_ONE)
				store_i32(memory_at_0, loc_1 + 36, 2)
				store_i32(memory_at_0, loc_1 + 32, 1058112)
				store_i32(memory_at_0, loc_1 + 60, 161)
				store_i32(memory_at_0, loc_1 + 40, add_i32(loc_1, 56))
				store_i32(memory_at_0, loc_1 + 56, add_i32(loc_1, 16))
				FUNC_LIST[331](add_i32(loc_1, 20), add_i32(loc_1, 32))
				FUNC_LIST[338](loc_0, load_i32(memory_at_0, loc_1 + 20), load_i32(memory_at_0, loc_1 + 28))
				FUNC_LIST[367](add_i32(loc_1, 20))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, add_i32(loc_1, 44), i64_ONE)
			store_i32(memory_at_0, loc_1 + 36, 2)
			store_i32(memory_at_0, loc_1 + 32, 1058148)
			store_i32(memory_at_0, loc_1 + 60, 161)
			store_i32(memory_at_0, loc_1 + 40, add_i32(loc_1, 56))
			store_i32(memory_at_0, loc_1 + 56, add_i32(loc_1, 16))
			FUNC_LIST[331](add_i32(loc_1, 20), add_i32(loc_1, 32))
			FUNC_LIST[338](loc_0, load_i32(memory_at_0, loc_1 + 20), load_i32(memory_at_0, loc_1 + 28))
			FUNC_LIST[367](add_i32(loc_1, 20))
			break
		end
		FUNC_LIST[367](add_i32(loc_1, 4))
		GLOBAL_LIST[0].value = add_i32(loc_1, 64)
		break
	end
end
FUNC_LIST[338] = --[[ _ZN14riscv_emu_rust8Emulator21put_bytes_to_terminal17h97cdf210a2e8af82E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, add_i32(loc_0, 37552))
		loc_0 = load_i32(memory_at_0, add_i32(loc_0, 37556))
		while true do
			while true do
				if loc_2 ~= 0 then
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, loc_0 + 12)](loc_3, load_i32_u8(memory_at_0, loc_1))
			loc_2 = add_i32(loc_2, 4294967295)
			loc_1 = add_i32(loc_1, 1)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[339] = --[[ _ZN14riscv_emu_rust8Emulator13setup_program17hb708037d2747f2ffE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local loc_18 = i64_ZERO
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = i64_ZERO
	local loc_22 = i64_ZERO
	local loc_23 = i64_ZERO
	local loc_24 = i64_ZERO
	local loc_25 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[333](loc_1, 0, 1058252)
						if load_i32_u8(memory_at_0, reg_0) ~= 127 then
							break
						end
						reg_0 = FUNC_LIST[333](loc_1, 1, 1058268)
						if load_i32_u8(memory_at_0, reg_0) ~= 69 then
							break
						end
						reg_0 = FUNC_LIST[333](loc_1, 2, 1058284)
						if load_i32_u8(memory_at_0, reg_0) ~= 76 then
							break
						end
						reg_0 = FUNC_LIST[333](loc_1, 3, 1058300)
						if load_i32_u8(memory_at_0, reg_0) ~= 70 then
							break
						end
						reg_1 = FUNC_LIST[333](loc_1, 4, 1058316)
						loc_3 = load_i32_u8(memory_at_0, reg_1)
						store_i32_n8(memory_at_0, loc_2 + 15, loc_3)
						loc_4 = 32
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 2, }
							end)()
						end
						temp = br_map[1][add_i32(loc_3, 4294967295)] or 1
						if temp < 2 then
							desired = 3
							break
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[122](1058992, 32, 1059024)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
				store_i32(memory_at_0, loc_2 + 20, 1)
				store_i32(memory_at_0, loc_2 + 16, 1058968)
				store_i32(memory_at_0, loc_2 + 56, 162)
				store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 52))
				store_i32(memory_at_0, loc_2 + 52, add_i32(loc_2, 15))
				FUNC_LIST[491](add_i32(loc_2, 16), 1058976)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 64
			break
		end
		reg_0 = FUNC_LIST[333](loc_1, 5, 1058332)
		reg_0 = FUNC_LIST[333](loc_1, 6, 1058348)
		reg_0 = FUNC_LIST[333](loc_1, 7, 1058364)
		reg_0 = FUNC_LIST[333](loc_1, 8, 1058380)
		loc_3 = 16
		while true do
			while true do
				while true do
					if loc_3 ~= 18 then
						break
					end
					loc_3 = 18
					while true do
						while true do
							if loc_3 ~= 20 then
								break
							end
							loc_3 = 20
							while true do
								while true do
									if loc_3 ~= 24 then
										break
									end
									loc_5 = shr_u32(loc_4, 2)
									loc_6 = shr_u32(loc_4, 3)
									loc_7 = 24
									loc_8 = i64_ZERO
									loc_3 = 0
									while true do
										while true do
											if loc_3 ~= loc_6 then
												break
											end
											loc_7 = add_i32(loc_5, 24)
											while true do
												while true do
													if loc_5 ~= loc_3 then
														break
													end
													loc_9 = i64_ZERO
													loc_3 = 0
													while true do
														while true do
															if loc_3 ~= loc_6 then
																break
															end
															loc_3 = 0
															while true do
																loc_5 = add_i32(loc_7, loc_3)
																while true do
																	if loc_3 ~= 4 then
																		break
																	end
																	loc_7 = 0
																	while true do
																		loc_3 = add_i32(loc_5, loc_7)
																		while true do
																			if loc_7 ~= 2 then
																				break
																			end
																			loc_7 = 0
																			while true do
																				while true do
																					if loc_7 ~= 2 then
																						break
																					end
																					loc_7 = 0
																					while true do
																						loc_5 = add_i32(loc_3, loc_7)
																						while true do
																							if loc_7 ~= 2 then
																								break
																							end
																							loc_7 = 0
																							while true do
																								loc_3 = add_i32(loc_5, loc_7)
																								while true do
																									if loc_7 ~= 2 then
																										break
																									end
																									loc_10 = i64_ZERO
																									loc_11 = i64_ZERO
																									while true do
																										while true do
																											if ne_i64(loc_10, i64_from_u32(16, 0)) then
																												break
																											end
																											loc_7 = 0
																											while true do
																												while true do
																													if loc_7 ~= 2 then
																														break
																													end
																													store_i32(memory_at_0, loc_2 + 48, 0)
																													store_i64(memory_at_0, loc_2 + 40, i64_from_u32(8, 0))
																													store_i32(memory_at_0, loc_2 + 60, 0)
																													store_i64(memory_at_0, loc_2 + 52, i64_from_u32(8, 0))
																													loc_7 = shl_i32(loc_6, 3)
																													loc_3 = wrap_i32_i64(loc_9)
																													loc_12 = i64_ZERO
																													while true do
																														while true do
																															while true do
																																while true do
																																	if eq_i64(loc_12, loc_11) then
																																		break
																																	end
																																	loc_10 = i64_ZERO
																																	loc_13 = i64_ZERO
																																	desired = 30
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																loc_14 = 0
																																reg_0 = FUNC_LIST[44](8, 1)
																																loc_3 = reg_0
																																if loc_3 == 0 then
																																	desired = 28
																																	break
																																end
																																store_i64(memory_at_0, loc_3, i64_from_u32(1752134702, 7631727))
																																store_i64(memory_at_0, loc_2 + 20, i64_from_u32(8, 8))
																																store_i32(memory_at_0, loc_2 + 16, loc_3)
																																loc_15 = load_i32(memory_at_0, loc_2 + 48)
																																while true do
																																	while true do
																																		if loc_14 ~= loc_15 then
																																			break
																																		end
																																		loc_16 = i64_ZERO
																																		desired = 1
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																			continue
																																		end
																																		break
																																	end
																																	reg_0 = FUNC_LIST[332](add_i32(loc_2, 40), loc_14, 1058396)
																																	loc_17 = load_i64(memory_at_0, reg_0 + 24)
																																	reg_0 = FUNC_LIST[332](add_i32(loc_2, 40), loc_14, 1058412)
																																	loc_18 = load_i64(memory_at_0, reg_0)
																																	loc_16 = i64_ZERO
																																	loc_19 = 0
																																	loc_20 = load_i32(memory_at_0, loc_2 + 60)
																																	while true do
																																		while true do
																																			if loc_19 ~= loc_20 then
																																				break
																																			end
																																			loc_14 = add_i32(loc_14, 1)
																																			if eq_i64(loc_16, i64_ZERO) then
																																				desired = 31
																																				break
																																			end
																																			desired = 1
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																				continue
																																			end
																																			break
																																		end
																																		loc_10 = i64_ZERO
																																		reg_1 = FUNC_LIST[332](add_i32(loc_2, 52), loc_19, 1058520)
																																		loc_9 = load_i64(memory_at_0, reg_1 + 32)
																																		reg_2 = FUNC_LIST[332](add_i32(loc_2, 52), loc_19, 1058536)
																																		loc_13 = add_i64(loc_9, load_i64(memory_at_0, reg_2 + 40))
																																		loc_21 = add_i64(loc_9, loc_18)
																																		loc_9 = sub_i64(loc_13, loc_21)
																																		loc_9 = (if gt_u64(loc_9, loc_13) then i64_ZERO else loc_9)
																																		loc_19 = add_i32(loc_19, 1)
																																		loc_6 = wrap_i32_i64(loc_21)
																																		loc_3 = 0
																																		while true do
																																			while true do
																																				if ne_i64(loc_10, i64_from_u32(8, 0)) then
																																					break
																																				end
																																				loc_16 = loc_17
																																				desired = 32
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																					continue
																																				end
																																				break
																																			end
																																			if eq_i64(loc_9, loc_10) then
																																				desired = 32
																																				break
																																			end
																																			reg_0 = FUNC_LIST[333](loc_1, add_i32(loc_6, loc_3), 1058552)
																																			loc_7 = load_i32_u8(memory_at_0, reg_0)
																																			reg_0 = FUNC_LIST[333](add_i32(loc_2, 16), loc_3, 1058568)
																																			loc_5 = reg_0
																																			loc_3 = add_i32(loc_3, 1)
																																			loc_10 = add_i64(loc_10, i64_ONE)
																																			if loc_7 ~= load_i32_u8(memory_at_0, loc_5) then
																																				desired = 32
																																				break
																																			end
																																			continue
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																				continue
																																			end
																																			break
																																		end
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																			continue
																																		end
																																		break
																																	end
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																	continue
																																end
																																break
																															end
																															while true do
																																while true do
																																	if eq_i64(loc_10, i64_from_u32(32, 0)) then
																																		desired = 30
																																		break
																																	end
																																	reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058728)
																																	loc_13 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), loc_10), loc_13)
																																	loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																																	loc_3 = add_i32(loc_3, 1)
																																	continue
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																	continue
																																end
																																break
																															end
																															loc_10 = i64_ZERO
																															loc_9 = i64_ZERO
																															while true do
																																while true do
																																	if ne_i64(loc_10, i64_from_u32(32, 0)) then
																																		break
																																	end
																																	loc_21 = i64_ZERO
																																	loc_5 = 0
																																	while true do
																																		while true do
																																			if loc_7 ~= loc_5 then
																																				break
																																			end
																																			loc_18 = i64_ZERO
																																			loc_5 = 0
																																			while true do
																																				while true do
																																					if loc_7 ~= loc_5 then
																																						break
																																					end
																																					loc_16 = i64_ZERO
																																					loc_5 = 0
																																					while true do
																																						while true do
																																							if loc_7 ~= loc_5 then
																																								break
																																							end
																																							loc_17 = i64_ZERO
																																							loc_5 = 0
																																							while true do
																																								while true do
																																									if loc_7 ~= loc_5 then
																																										break
																																									end
																																									loc_10 = i64_ZERO
																																									loc_22 = i64_ZERO
																																									while true do
																																										while true do
																																											if ne_i64(loc_10, i64_from_u32(32, 0)) then
																																												break
																																											end
																																											loc_10 = i64_ZERO
																																											loc_23 = i64_ZERO
																																											while true do
																																												while true do
																																													if ne_i64(loc_10, i64_from_u32(32, 0)) then
																																														break
																																													end
																																													loc_10 = i64_ZERO
																																													loc_5 = 0
																																													while true do
																																														while true do
																																															if loc_7 ~= loc_5 then
																																																break
																																															end
																																															loc_24 = i64_ZERO
																																															loc_5 = 0
																																															while true do
																																																while true do
																																																	while true do
																																																		while true do
																																																			if loc_7 ~= loc_5 then
																																																				break
																																																			end
																																																			loc_12 = add_i64(loc_12, i64_ONE)
																																																			loc_25 = add_i64(loc_9, i64_from_u32(4294967295, 4294967295))
																																																			if gt_u64(loc_25, i64_from_u32(2, 0)) then
																																																				desired = 29
																																																				break
																																																			end
																																																			loc_6 = add_i32(loc_2, 52)
																																																			if not br_map[2] then
																																																				br_map[2] = (function()
																																																					return { [0] = 2, 20, 3, }
																																																				end)()
																																																			end
																																																			temp = br_map[2][wrap_i32_i64(loc_25)] or 2
																																																			if temp < 3 then
																																																				desired = 47
																																																				break
																																																			elseif temp > 3 then
																																																				desired = 29
																																																				break
																																																			else
																																																				desired = 46
																																																				break
																																																			end
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																				continue
																																																			end
																																																			break
																																																		end
																																																		reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058584)
																																																		loc_24 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_24)
																																																		loc_5 = add_i32(loc_5, 8)
																																																		loc_3 = add_i32(loc_3, 1)
																																																		continue
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																loc_6 = add_i32(loc_2, 40)
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															while true do
																																																loc_5 = load_i32(memory_at_0, loc_6 + 8)
																																																if loc_5 ~= load_i32(memory_at_0, loc_6 + 4) then
																																																	break
																																																end
																																																FUNC_LIST[362](loc_6, loc_5)
																																																loc_5 = load_i32(memory_at_0, loc_6 + 8)
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_5 = add_i32(load_i32(memory_at_0, loc_6), mul_i32(loc_5, 80))
																																															store_i64(memory_at_0, loc_5 + 72, loc_24)
																																															store_i64(memory_at_0, loc_5 + 64, loc_10)
																																															store_i64(memory_at_0, loc_5 + 56, loc_23)
																																															store_i64(memory_at_0, loc_5 + 48, loc_22)
																																															store_i64(memory_at_0, loc_5 + 40, loc_17)
																																															store_i64(memory_at_0, loc_5 + 32, loc_16)
																																															store_i64(memory_at_0, loc_5 + 24, loc_18)
																																															store_i64(memory_at_0, loc_5 + 16, loc_21)
																																															store_i64(memory_at_0, loc_5 + 8, loc_9)
																																															store_i64(memory_at_0, loc_5, loc_13)
																																															store_i32(memory_at_0, loc_6 + 8, add_i32(load_i32(memory_at_0, loc_6 + 8), 1))
																																															desired = 29
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																																continue
																																															end
																																															break
																																														end
																																														reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058600)
																																														loc_10 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_10)
																																														loc_5 = add_i32(loc_5, 8)
																																														loc_3 = add_i32(loc_3, 1)
																																														continue
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																														continue
																																													end
																																													break
																																												end
																																												reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058616)
																																												loc_23 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), loc_10), loc_23)
																																												loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																																												loc_3 = add_i32(loc_3, 1)
																																												continue
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																												continue
																																											end
																																											break
																																										end
																																										reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058632)
																																										loc_22 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), loc_10), loc_22)
																																										loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																																										loc_3 = add_i32(loc_3, 1)
																																										continue
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																										continue
																																									end
																																									break
																																								end
																																								reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058648)
																																								loc_17 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_17)
																																								loc_5 = add_i32(loc_5, 8)
																																								loc_3 = add_i32(loc_3, 1)
																																								continue
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																								continue
																																							end
																																							break
																																						end
																																						reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058664)
																																						loc_16 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_16)
																																						loc_5 = add_i32(loc_5, 8)
																																						loc_3 = add_i32(loc_3, 1)
																																						continue
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																						continue
																																					end
																																					break
																																				end
																																				reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058680)
																																				loc_18 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_18)
																																				loc_5 = add_i32(loc_5, 8)
																																				loc_3 = add_i32(loc_3, 1)
																																				continue
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																				continue
																																			end
																																			break
																																		end
																																		reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058696)
																																		loc_21 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(loc_5, 56))), loc_21)
																																		loc_5 = add_i32(loc_5, 8)
																																		loc_3 = add_i32(loc_3, 1)
																																		continue
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																		continue
																																	end
																																	break
																																end
																																reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058712)
																																loc_9 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), loc_10), loc_9)
																																loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																																loc_3 = add_i32(loc_3, 1)
																																continue
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																	continue
																																end
																																break
																															end
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													FUNC_LIST[480](1, 8)
																													error("out of code bounds")
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																														continue
																													end
																													break
																												end
																												reg_0 = FUNC_LIST[333](loc_1, add_i32(loc_3, loc_7), 1058744)
																												loc_7 = add_i32(loc_7, 1)
																												continue
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																												continue
																											end
																											break
																										end
																										reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058760)
																										loc_11 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), loc_10), loc_11)
																										loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																										loc_3 = add_i32(loc_3, 1)
																										continue
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																										continue
																									end
																									break
																								end
																								reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058776)
																								loc_7 = add_i32(loc_7, 1)
																								continue
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																								continue
																							end
																							break
																						end
																						reg_0 = FUNC_LIST[333](loc_1, loc_5, 1058792)
																						loc_7 = add_i32(loc_7, 1)
																						continue
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																						continue
																					end
																					break
																				end
																				reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058808)
																				loc_3 = add_i32(loc_3, 1)
																				loc_7 = add_i32(loc_7, 1)
																				continue
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																				continue
																			end
																			break
																		end
																		reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058824)
																		loc_7 = add_i32(loc_7, 1)
																		continue
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																		continue
																	end
																	break
																end
																reg_0 = FUNC_LIST[333](loc_1, loc_5, 1058840)
																loc_3 = add_i32(loc_3, 1)
																continue
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
																continue
															end
															break
														end
														reg_0 = FUNC_LIST[333](loc_1, loc_7, 1058856)
														loc_9 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(shl_i32(loc_3, 3), 56))), loc_9)
														loc_7 = add_i32(loc_7, 1)
														loc_3 = add_i32(loc_3, 1)
														continue
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												reg_0 = FUNC_LIST[333](loc_1, add_i32(loc_3, 24), 1058872)
												loc_3 = add_i32(loc_3, 1)
												continue
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										reg_0 = FUNC_LIST[333](loc_1, loc_7, 1058888)
										loc_8 = bor_i64(shl_i64(load_i64_u8(memory_at_0, reg_0), extend_i64_u32(band_i32(shl_i32(loc_3, 3), 56))), loc_8)
										loc_7 = add_i32(loc_7, 1)
										loc_3 = add_i32(loc_3, 1)
										continue
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058904)
								loc_3 = add_i32(loc_3, 1)
								continue
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058920)
						loc_3 = add_i32(loc_3, 1)
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				reg_0 = FUNC_LIST[333](loc_1, loc_3, 1058936)
				loc_3 = add_i32(loc_3, 1)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_3 = 0
		loc_7 = 0
		while true do
			if loc_4 == 32 then
				break
			end
			while true do
				if loc_4 == 64 then
					break
				end
				FUNC_LIST[122](1058492, 9, 1058504)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = 1
			break
		end
		store_i64(memory_at_0, loc_0, loc_16)
		loc_5 = (if ne_i64(loc_16, i64_ZERO) then 1 else 0)
		store_i32_n8(memory_at_0, loc_0 + 37704, loc_5)
		store_i32_n8(memory_at_0, add_i32(loc_0, 37690), loc_7)
		store_i32_n8(memory_at_0, add_i32(loc_0, 37697), loc_7)
		FUNC_LIST[140](add_i32(loc_0, 37664), (if loc_5 ~= 0 then i64_from_u32(524288, 0) else i64_from_u32(134217728, 0)))
		loc_7 = add_i32(loc_0, 33384)
		loc_19 = load_i32(memory_at_0, loc_2 + 48)
		while true do
			while true do
				if loc_3 == loc_19 then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[332](add_i32(loc_2, 40), loc_3, 1058428)
				loc_10 = load_i64(memory_at_0, reg_0 + 24)
				reg_0 = FUNC_LIST[332](add_i32(loc_2, 40), loc_3, 1058444)
				loc_13 = load_i64(memory_at_0, reg_0 + 32)
				reg_0 = FUNC_LIST[332](add_i32(loc_2, 40), loc_3, 1058460)
				loc_6 = reg_0
				loc_5 = add_i32(loc_3, 1)
				loc_3 = loc_5
				if lt_u64(loc_10, i64_from_u32(2147483648, 0)) then
					continue
				end
				loc_3 = loc_5
				if eq_i64(loc_13, i64_ZERO) then
					continue
				end
				loc_3 = loc_5
				loc_9 = load_i64(memory_at_0, loc_6 + 40)
				if eq_i64(loc_9, i64_ZERO) then
					continue
				end
				loc_9 = band_i64(loc_9, i64_from_u32(4294967295, 0))
				loc_3 = wrap_i32_i64(loc_13)
				while true do
					while true do
						if (if eq_i64(loc_9, i64_ZERO) then 1 else 0) == 0 then
							break
						end
						loc_3 = loc_5
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					reg_2 = FUNC_LIST[333](loc_1, loc_3, 1058476)
					FUNC_LIST[169](loc_7, loc_10, load_i32_u8(memory_at_0, reg_2))
					loc_9 = add_i64(loc_9, i64_from_u32(4294967295, 4294967295))
					loc_3 = add_i32(loc_3, 1)
					loc_10 = add_i64(loc_10, i64_ONE)
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_0, 33296), loc_8)
		FUNC_LIST[367](add_i32(loc_2, 16))
		FUNC_LIST[366](add_i32(loc_2, 52))
		FUNC_LIST[366](add_i32(loc_2, 40))
		FUNC_LIST[367](loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_2, 64)
		break
	end
end
FUNC_LIST[340] = --[[ _ZN14riscv_emu_rust8Emulator16setup_filesystem17he1db28e791c82114E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[345](add_i32(loc_0, 37576), loc_1)
		break
	end
end
FUNC_LIST[341] = --[[ _ZN14riscv_emu_rust8Emulator16get_mut_terminal17hda9212abf9545c65E ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = add_i32(loc_0, 37552)
		break
	end
	return reg_0
end
FUNC_LIST[342] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hd2622971f6285214E.llvm.10888687598938836764 ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			if loc_2 ~= load_i32(memory_at_0, loc_0 + 4) then
				break
			end
			FUNC_LIST[360](loc_0, loc_2)
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		store_i64(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_2, 3)), loc_1)
		store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
		break
	end
end
FUNC_LIST[343] = --[[ _ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h8851d3e6914c93e6E.llvm.10888687598938836764 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if loc_3 > loc_1 then
				break
			end
			FUNC_LIST[493](loc_1, loc_3, loc_2)
			error("out of code bounds")
		end
		reg_0 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_1, 3))
		break
	end
	return reg_0
end
FUNC_LIST[344] = --[[ _ZN14riscv_emu_rust6device17virtio_block_disk15VirtioBlockDisk3new17ha0aed0b5fb9ccfd1E ]] function(loc_0)
	local reg_0
	while true do
		store_i32_n16(memory_at_0, loc_0 + 84, 0)
		reg_0 = FUNC_LIST[539](loc_0, 0, 40)
		loc_0 = reg_0
		store_i64(memory_at_0, loc_0 + 44, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 40, 4096)
		store_i64(memory_at_0, add_i32(loc_0, 52), i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_0, 76), i64_ZERO)
		store_i64(memory_at_0, add_i32(loc_0, 68), i64_from_u32(0, 8))
		store_i64(memory_at_0, loc_0 + 60, i64_from_u32(8, 0))
		break
	end
end
FUNC_LIST[345] = --[[ _ZN14riscv_emu_rust6device17virtio_block_disk15VirtioBlockDisk4init17hc5a0808a792ca05dE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = add_i32(loc_0, 72)
		loc_3 = load_i32(memory_at_0, loc_1 + 8)
		loc_0 = shr_u32(add_i32(loc_3, 7), 3)
		while true do
			while true do
				while true do
					if loc_0 ~= 0 then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_1)
					loc_5 = 0
					loc_0 = 0
					while true do
						if loc_3 == loc_0 then
							desired = 1
							break
						end
						loc_6 = shr_u32(loc_0, 3)
						reg_0 = FUNC_LIST[343](loc_2, loc_6, 1059148)
						loc_7 = reg_0
						loc_8 = load_i64_u8(memory_at_0, add_i32(loc_4, loc_0))
						loc_9 = load_i64(memory_at_0, loc_7)
						reg_0 = FUNC_LIST[343](loc_2, loc_6, 1059164)
						loc_10 = extend_i64_u32(band_i32(loc_5, 56))
						store_i64(memory_at_0, reg_0, bor_i64(shl_i64(loc_8, loc_10), band_i64(loc_9, bxor_i64(shl_i64(i64_from_u32(255, 0), loc_10), i64_from_u32(4294967295, 4294967295)))))
						loc_5 = add_i32(loc_5, 8)
						loc_0 = add_i32(loc_0, 1)
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				FUNC_LIST[342](loc_2, i64_ZERO)
				loc_0 = add_i32(loc_0, 4294967295)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		FUNC_LIST[367](loc_1)
		break
	end
end
FUNC_LIST[346] = --[[ _ZN14riscv_emu_rust6device17virtio_block_disk15VirtioBlockDisk4tick17h6e738b0de88ba1dfE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = 0
	local loc_17 = i64_ZERO
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = i64_ZERO
	local loc_22 = i64_ZERO
	local loc_23 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i64(memory_at_0, loc_0)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											if load_i32(memory_at_0, add_i32(loc_0, 68)) == 0 then
												break
											end
											loc_4 = add_i32(loc_0, 60)
											reg_1 = FUNC_LIST[343](loc_4, 0, 1059180)
											if ne_i64(loc_3, add_i64(load_i64(memory_at_0, reg_1), i64_from_u32(500, 0))) then
												break
											end
											store_i32(memory_at_0, loc_0 + 52, bor_i32(load_i32(memory_at_0, loc_0 + 52), 1))
											loc_5 = load_i32(memory_at_0, loc_0 + 40)
											if loc_5 == 0 then
												desired = 8
												break
											end
											loc_6 = load_i32(memory_at_0, loc_0 + 36)
											loc_7 = extend_i64_u32(loc_6)
											loc_8 = mul_i64(load_i64_u32(memory_at_0, loc_0 + 28), load_i64_u32(memory_at_0, loc_0 + 44))
											loc_3 = add_i64(shl_i64(loc_7, i64_from_u32(4, 0)), loc_8)
											reg_0 = FUNC_LIST[163](loc_1, loc_3)
											reg_0 = FUNC_LIST[163](loc_1, add_i64(loc_3, i64_from_u32(2, 0)))
											loc_9 = extend_i64_u32(loc_5)
											loc_10 = add_i64(add_i64(add_i64(loc_8, mul_i64(loc_7, i64_from_u32(18, 0))), loc_9), i64_from_u32(3, 0))
											loc_9 = rem_u64(loc_10, loc_9)
											if loc_6 == 0 then
												desired = 7
												break
											end
											loc_11 = sub_i64(loc_10, loc_9)
											loc_5 = add_i32(loc_0, 72)
											loc_12 = load_i32_u16(memory_at_0, loc_0 + 84)
											loc_13 = band_i64(extend_i64_u32(loc_12), i64_from_u32(65535, 0))
											reg_0 = FUNC_LIST[163](loc_1, add_i64(add_i64(loc_3, shl_i64(loc_13, i64_ONE)), i64_from_u32(4, 0)))
											loc_14 = (band_i32(reg_0, 65535) % loc_6)
											loc_15 = extend_i64_u32(loc_14)
											loc_16 = 0
											loc_17 = i64_ZERO
											while true do
												loc_9 = add_i64(shl_i64(loc_15, i64_from_u32(4, 0)), loc_8)
												reg_0 = FUNC_LIST[179](loc_1, loc_9)
												loc_3 = reg_0
												reg_0 = FUNC_LIST[178](loc_1, add_i64(loc_9, i64_from_u32(8, 0)))
												loc_18 = reg_0
												reg_0 = FUNC_LIST[163](loc_1, add_i64(loc_9, i64_from_u32(12, 0)))
												loc_19 = reg_0
												reg_0 = FUNC_LIST[163](loc_1, add_i64(loc_9, i64_from_u32(14, 0)))
												loc_15 = rem_u64(band_i64(extend_i64_u32(reg_0), i64_from_u32(65535, 0)), loc_7)
												while true do
													while true do
														while true do
															while true do
																if not br_map[1] then
																	br_map[1] = (function()
																		return { [0] = 0, 1, 2, }
																	end)()
																end
																temp = br_map[1][loc_16] or 3
																if temp < 2 then
																	if temp < 1 then
																		break
																	else
																		desired = 13
																		break
																	end
																elseif temp > 2 then
																	desired = 11
																	break
																else
																	desired = 12
																	break
																end
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															reg_0 = FUNC_LIST[178](loc_1, loc_3)
															reg_0 = FUNC_LIST[178](loc_1, add_i64(loc_3, i64_from_u32(4, 0)))
															reg_0 = FUNC_LIST[179](loc_1, add_i64(loc_3, i64_from_u32(8, 0)))
															loc_17 = reg_0
															desired = 11
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_20 = band_i32((if eq_i64(band_i64(loc_3, i64_from_u32(7, 0)), i64_ZERO) then 1 else 0), (if band_i32(loc_18, 7) == 0 then 1 else 0))
														while true do
															while true do
																if band_i32(loc_19, 2) == 0 then
																	break
																end
																if loc_20 ~= 0 then
																	desired = 13
																	break
																end
																loc_10 = shl_i64(loc_17, i64_from_u32(9, 0))
																loc_21 = shl_i64(extend_i64_u32(loc_18), i64_from_u32(3, 0))
																loc_9 = i64_ZERO
																while true do
																	if eq_i64(loc_21, loc_9) then
																		desired = 11
																		break
																	end
																	reg_2 = FUNC_LIST[343](loc_5, wrap_i32_i64(shr_u64(loc_10, i64_from_u32(3, 0))), 1059412)
																	FUNC_LIST[180](loc_1, loc_3, wrap_i32_i64(shr_u64(load_i64(memory_at_0, reg_2), band_i64(loc_9, i64_from_u32(56, 0)))))
																	loc_3 = add_i64(loc_3, i64_ONE)
																	loc_9 = add_i64(loc_9, i64_from_u32(8, 0))
																	loc_10 = add_i64(loc_10, i64_ONE)
																	continue
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															while true do
																if loc_20 ~= 0 then
																	break
																end
																loc_10 = shl_i64(loc_17, i64_from_u32(9, 0))
																loc_22 = shl_i64(extend_i64_u32(loc_18), i64_from_u32(3, 0))
																loc_9 = i64_ZERO
																while true do
																	if eq_i64(loc_22, loc_9) then
																		desired = 11
																		break
																	end
																	reg_0 = FUNC_LIST[177](loc_1, loc_3)
																	loc_18 = reg_0
																	loc_20 = wrap_i32_i64(shr_u64(loc_10, i64_from_u32(3, 0)))
																	reg_0 = FUNC_LIST[343](loc_5, loc_20, 1059428)
																	loc_21 = load_i64(memory_at_0, reg_0)
																	reg_0 = FUNC_LIST[343](loc_5, loc_20, 1059444)
																	loc_23 = band_i64(loc_9, i64_from_u32(56, 0))
																	store_i64(memory_at_0, reg_0, bor_i64(band_i64(loc_21, bxor_i64(shl_i64(i64_from_u32(255, 0), loc_23), i64_from_u32(4294967295, 4294967295))), shl_i64(band_i64(extend_i64_u32(loc_18), i64_from_u32(255, 0)), loc_23)))
																	loc_9 = add_i64(loc_9, i64_from_u32(8, 0))
																	loc_10 = add_i64(loc_10, i64_ONE)
																	loc_3 = add_i64(loc_3, i64_ONE)
																	continue
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_9 = extend_i64_u32(loc_18)
															store_i64(memory_at_0, loc_2 + 8, loc_9)
															if ne_i64(band_i64(loc_9, i64_from_u32(7, 0)), i64_ZERO) then
																desired = 6
																break
															end
															loc_10 = shl_i64(loc_17, i64_from_u32(9, 0))
															loc_9 = shr_u64(loc_9, i64_from_u32(3, 0))
															while true do
																if eq_i64(loc_9, i64_ZERO) then
																	desired = 11
																	break
																end
																reg_0 = FUNC_LIST[179](loc_1, loc_3)
																loc_21 = reg_0
																reg_0 = FUNC_LIST[343](loc_5, wrap_i32_i64(shr_u64(loc_10, i64_from_u32(3, 0))), 1059380)
																store_i64(memory_at_0, reg_0, loc_21)
																loc_9 = add_i64(loc_9, i64_from_u32(4294967295, 4294967295))
																loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
																loc_3 = add_i64(loc_3, i64_from_u32(8, 0))
																continue
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_9 = extend_i64_u32(loc_18)
														store_i64(memory_at_0, loc_2 + 8, loc_9)
														if ne_i64(band_i64(loc_9, i64_from_u32(7, 0)), i64_ZERO) then
															desired = 5
															break
														end
														loc_10 = shl_i64(loc_17, i64_from_u32(9, 0))
														loc_9 = shr_u64(loc_9, i64_from_u32(3, 0))
														while true do
															if eq_i64(loc_9, i64_ZERO) then
																desired = 11
																break
															end
															reg_2 = FUNC_LIST[343](loc_5, wrap_i32_i64(shr_u64(loc_10, i64_from_u32(3, 0))), 1059300)
															FUNC_LIST[182](loc_1, loc_3, load_i64(memory_at_0, reg_2))
															loc_9 = add_i64(loc_9, i64_from_u32(4294967295, 4294967295))
															loc_10 = add_i64(loc_10, i64_from_u32(8, 0))
															loc_3 = add_i64(loc_3, i64_from_u32(8, 0))
															continue
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if band_i32(loc_19, 2) == 0 then
														desired = 1
														break
													end
													if loc_18 ~= 1 then
														desired = 4
														break
													end
													FUNC_LIST[180](loc_1, loc_3, 0)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												loc_16 = add_i32(loc_16, 1)
												if band_i32(loc_19, 1) ~= 0 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_16 ~= 3 then
												desired = 3
												break
											end
											FUNC_LIST[181](loc_1, add_i64(add_i64(loc_11, shl_i64(loc_13, i64_from_u32(3, 0))), i64_from_u32(4, 0)), loc_14)
											loc_5 = band_i32(loc_6, 65535)
											if loc_5 == 0 then
												desired = 2
												break
											end
											loc_5 = (band_i32(add_i32(loc_12, 1), 65535) % loc_5)
											store_i32_n16(memory_at_0, loc_0 + 84, loc_5)
											FUNC_LIST[173](loc_1, add_i64(loc_11, i64_from_u32(2, 0)), loc_5)
											reg_0 = FUNC_LIST[131](loc_4, 0, 1059196)
											loc_3 = load_i64(memory_at_0, loc_0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64(memory_at_0, loc_0, add_i64(loc_3, i64_ONE))
										GLOBAL_LIST[0].value = add_i32(loc_2, 48)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[496](1059488, 25, 1059460)
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[496](1059536, 57, 1059516)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
							store_i32(memory_at_0, loc_2 + 20, 1)
							store_i32(memory_at_0, loc_2 + 16, 1059356)
							store_i32(memory_at_0, loc_2 + 44, 29)
							store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
							store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
							FUNC_LIST[491](add_i32(loc_2, 16), 1059396)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, add_i32(loc_2, 28), i64_ONE)
						store_i32(memory_at_0, loc_2 + 20, 1)
						store_i32(memory_at_0, loc_2 + 16, 1059356)
						store_i32(memory_at_0, loc_2 + 44, 29)
						store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
						store_i32(memory_at_0, loc_2 + 40, add_i32(loc_2, 8))
						FUNC_LIST[491](add_i32(loc_2, 16), 1059364)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[122](1059644, 38, 1059684)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[122](1059716, 38, 1059756)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[496](1059536, 57, 1059700)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[122](1059593, 33, 1059628)
		error("out of code bounds")
	end
end
FUNC_LIST[347] = --[[ _ZN14riscv_emu_rust6device17virtio_block_disk15VirtioBlockDisk4load17h35d72b3c2c8a0efaE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = 0
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	loc_3 = add_i64(loc_1, i64_from_u32(4026527744, 4294967295))
																																	if le_u64(loc_3, i64_from_u32(19, 0)) then
																																		break
																																	end
																																	loc_3 = add_i64(loc_1, i64_from_u32(4026527648, 4294967295))
																																	if le_u64(loc_3, i64_from_u32(19, 0)) then
																																		desired = 30
																																		break
																																	end
																																	loc_3 = add_i64(loc_1, i64_from_u32(4026527680, 4294967295))
																																	if le_u64(loc_3, i64_from_u32(3, 0)) then
																																		desired = 29
																																		break
																																	end
																																	while true do
																																		loc_3 = add_i64(loc_1, i64_from_u32(4026527487, 4294967295))
																																		if le_u64(loc_3, i64_ONE) then
																																			break
																																		end
																																		if ne_i64(loc_1, i64_from_u32(268439605, 0)) then
																																			desired = 28
																																			break
																																		end
																																		desired = 1
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	while true do
																																		if not br_map[1] then
																																			br_map[1] = (function()
																																				return { [0] = 31, 0, }
																																			end)()
																																		end
																																		temp = br_map[1][wrap_i32_i64(loc_3)] or 31
																																		if temp < 31 then
																																			break
																																		else
																																			desired = 1
																																			break
																																		end
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	loc_2 = 3
																																	desired = 28
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																if not br_map[2] then
																																	br_map[2] = (function()
																																		return { [0] = 28, 27, 26, 25, 24, 2, 2, 2, 23, 2, 2, 2, 22, 21, 20, 19, 18, 17, 16, 15, }
																																	end)()
																																end
																																temp = br_map[2][wrap_i32_i64(loc_3)] or 28
																																if temp < 21 then
																																	if temp < 17 then
																																		if temp < 15 then
																																			desired = 28
																																			break
																																		elseif temp > 15 then
																																			desired = 14
																																			break
																																		else
																																			desired = 15
																																			break
																																		end
																																	elseif temp > 17 then
																																		if temp < 19 then
																																			desired = 12
																																			break
																																		elseif temp > 19 then
																																			desired = 10
																																			break
																																		else
																																			desired = 11
																																			break
																																		end
																																	else
																																		desired = 13
																																		break
																																	end
																																elseif temp > 21 then
																																	if temp < 25 then
																																		if temp < 23 then
																																			desired = 8
																																			break
																																		elseif temp > 23 then
																																			desired = 6
																																			break
																																		else
																																			desired = 7
																																			break
																																		end
																																	elseif temp > 25 then
																																		if temp < 27 then
																																			desired = 4
																																			break
																																		elseif temp > 27 then
																																			desired = 2
																																			break
																																		else
																																			desired = 3
																																			break
																																		end
																																	else
																																		desired = 5
																																		break
																																	end
																																else
																																	desired = 9
																																	break
																																end
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															if not br_map[3] then
																																br_map[3] = (function()
																																	return { [0] = 9, 8, 7, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 2, }
																																end)()
																															end
																															temp = br_map[3][wrap_i32_i64(loc_3)] or 9
																															if temp < 5 then
																																if temp < 3 then
																																	if temp < 2 then
																																		desired = 28
																																		break
																																	else
																																		desired = 27
																																		break
																																	end
																																elseif temp > 3 then
																																	desired = 25
																																	break
																																else
																																	desired = 26
																																	break
																																end
																															elseif temp > 5 then
																																if temp < 8 then
																																	if temp < 7 then
																																		desired = 23
																																		break
																																	else
																																		desired = 22
																																		break
																																	end
																																elseif temp > 8 then
																																	desired = 20
																																	break
																																else
																																	desired = 21
																																	break
																																end
																															else
																																desired = 24
																																break
																															end
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														if not br_map[4] then
																															br_map[4] = (function()
																																return { [0] = 12, 11, 10, 9, }
																															end)()
																														end
																														temp = br_map[4][wrap_i32_i64(loc_3)] or 12
																														if temp < 11 then
																															if temp < 10 then
																																desired = 19
																																break
																															else
																																desired = 18
																																break
																															end
																														elseif temp > 11 then
																															desired = 16
																															break
																														else
																															desired = 17
																															break
																														end
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													reg_0 = loc_2
																													desired = 0
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 59))
																												desired = 0
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 58))
																											desired = 0
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 56), 8)
																										desired = 0
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									reg_0 = load_i32(memory_at_0, loc_0 + 56)
																									desired = 0
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 55))
																								desired = 0
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 54))
																							desired = 0
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 52), 8)
																						desired = 0
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					reg_0 = load_i32(memory_at_0, loc_0 + 52)
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 47))
																				desired = 0
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 46))
																			desired = 0
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 44), 8)
																		desired = 0
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	reg_0 = load_i32(memory_at_0, loc_0 + 44)
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																reg_0 = wrap_i32_i64(shr_u64(shr_u64(load_i64(memory_at_0, loc_0 + 8), shl_i64(load_i64_u32(memory_at_0, loc_0 + 16), i64_from_u32(5, 0))), i64_from_u32(24, 0)))
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															reg_0 = wrap_i32_i64(shr_u64(shr_u64(load_i64(memory_at_0, loc_0 + 8), shl_i64(load_i64_u32(memory_at_0, loc_0 + 16), i64_from_u32(5, 0))), i64_from_u32(16, 0)))
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = wrap_i32_i64(shr_u64(shr_u64(load_i64(memory_at_0, loc_0 + 8), shl_i64(load_i64_u32(memory_at_0, loc_0 + 16), i64_from_u32(5, 0))), i64_from_u32(8, 0)))
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = wrap_i32_i64(shr_u64(load_i64(memory_at_0, loc_0 + 8), shl_i64(load_i64_u32(memory_at_0, loc_0 + 16), i64_from_u32(5, 0))))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = 85
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = 77
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = 69
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = 81
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = 2
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = 116
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 114
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 105
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 118
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 32
		break
	end
	return reg_0
end
FUNC_LIST[348] = --[[ _ZN14riscv_emu_rust6device17virtio_block_disk15VirtioBlockDisk5store17hf9d21dd487913f27E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local desired
	local br_map = {}
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32_n8(memory_at_0, loc_3 + 15, loc_2)
		while true do
			while true do
				loc_4 = add_i64(loc_1, i64_from_u32(4026527724, 4294967295))
				if le_u64(loc_4, i64_from_u32(80, 0)) then
					break
				end
				loc_1 = add_i64(loc_1, i64_from_u32(4026527632, 4294967295))
				if gt_u64(loc_1, i64_from_u32(3, 0)) then
					desired = 1
					break
				end
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, 3, }
									end)()
								end
								temp = br_map[1][wrap_i32_i64(loc_1)] or 0
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 56, loc_2)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, add_i32(loc_0, 57), loc_2)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, add_i32(loc_0, 58), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, add_i32(loc_0, 59), loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				if not br_map[2] then
																																					br_map[2] = (function()
																																						return { [0] = 32, 31, 30, 29, 33, 33, 33, 33, 33, 33, 33, 33, 28, 27, 26, 25, 33, 33, 33, 33, 24, 23, 22, 21, 33, 33, 33, 33, 20, 19, 18, 1, 33, 33, 33, 33, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 5, 4, 3, 2, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 0, }
																																					end)()
																																				end
																																				temp = br_map[2][wrap_i32_i64(loc_4)] or 32
																																				if temp < 17 then
																																					if temp < 8 then
																																						if temp < 4 then
																																							if temp < 2 then
																																								if temp < 1 then
																																									break
																																								else
																																									desired = 33
																																									break
																																								end
																																							elseif temp > 2 then
																																								desired = 31
																																								break
																																							else
																																								desired = 32
																																								break
																																							end
																																						elseif temp > 4 then
																																							if temp < 6 then
																																								desired = 29
																																								break
																																							elseif temp > 6 then
																																								desired = 27
																																								break
																																							else
																																								desired = 28
																																								break
																																							end
																																						else
																																							desired = 30
																																							break
																																						end
																																					elseif temp > 8 then
																																						if temp < 13 then
																																							if temp < 11 then
																																								if temp < 10 then
																																									desired = 25
																																									break
																																								else
																																									desired = 24
																																									break
																																								end
																																							elseif temp > 11 then
																																								desired = 22
																																								break
																																							else
																																								desired = 23
																																								break
																																							end
																																						elseif temp > 13 then
																																							if temp < 15 then
																																								desired = 20
																																								break
																																							elseif temp > 15 then
																																								desired = 18
																																								break
																																							else
																																								desired = 19
																																								break
																																							end
																																						else
																																							desired = 21
																																							break
																																						end
																																					else
																																						desired = 26
																																						break
																																					end
																																				elseif temp > 17 then
																																					if temp < 26 then
																																						if temp < 22 then
																																							if temp < 20 then
																																								if temp < 19 then
																																									desired = 16
																																									break
																																								else
																																									desired = 15
																																									break
																																								end
																																							elseif temp > 20 then
																																								desired = 13
																																								break
																																							else
																																								desired = 14
																																								break
																																							end
																																						elseif temp > 22 then
																																							if temp < 24 then
																																								desired = 11
																																								break
																																							elseif temp > 24 then
																																								desired = 9
																																								break
																																							else
																																								desired = 10
																																								break
																																							end
																																						else
																																							desired = 12
																																							break
																																						end
																																					elseif temp > 26 then
																																						if temp < 30 then
																																							if temp < 28 then
																																								desired = 7
																																								break
																																							elseif temp > 28 then
																																								desired = 5
																																								break
																																							else
																																								desired = 6
																																								break
																																							end
																																						elseif temp > 30 then
																																							if temp < 32 then
																																								desired = 3
																																								break
																																							elseif temp > 32 then
																																								desired = 1
																																								break
																																							else
																																								desired = 2
																																								break
																																							end
																																						else
																																							desired = 4
																																							break
																																						end
																																					else
																																						desired = 8
																																						break
																																					end
																																				else
																																					desired = 17
																																					break
																																				end
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			while true do
																																				if band_i32(loc_2, 1) == 0 then
																																					break
																																				end
																																				store_i32(memory_at_0, loc_0 + 52, band_i32(load_i32(memory_at_0, loc_0 + 52), 4294967294))
																																				desired = 1
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			store_i64(memory_at_0, add_i32(loc_3, 28), i64_ONE)
																																			store_i32(memory_at_0, loc_3 + 20, 1)
																																			store_i32(memory_at_0, loc_3 + 16, 1059276)
																																			store_i32(memory_at_0, loc_3 + 44, 162)
																																			store_i32(memory_at_0, loc_3 + 24, add_i32(loc_3, 40))
																																			store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 15))
																																			FUNC_LIST[491](add_i32(loc_3, 16), 1059284)
																																			error("out of code bounds")
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_2 = bor_i32(band_i32(load_i32(memory_at_0, loc_0 + 32), 16777215), shl_i32(loc_2, 24))
																																		store_i32(memory_at_0, loc_0 + 32, loc_2)
																																		if loc_2 == 0 then
																																			desired = 1
																																			break
																																		end
																																		FUNC_LIST[122](1059212, 35, 1059248)
																																		error("out of code bounds")
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	store_i32_n8(memory_at_0, add_i32(loc_0, 51), loc_2)
																																	FUNC_LIST[342](add_i32(loc_0, 60), load_i64(memory_at_0, loc_0))
																																	desired = 1
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																store_i32_n8(memory_at_0, add_i32(loc_0, 50), loc_2)
																																desired = 1
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															store_i32_n8(memory_at_0, add_i32(loc_0, 49), loc_2)
																															desired = 1
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														store_i32_n8(memory_at_0, loc_0 + 48, loc_2)
																														desired = 1
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													store_i32_n8(memory_at_0, add_i32(loc_0, 47), loc_2)
																													desired = 1
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												store_i32_n8(memory_at_0, add_i32(loc_0, 46), loc_2)
																												desired = 1
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											store_i32_n8(memory_at_0, add_i32(loc_0, 45), loc_2)
																											desired = 1
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										store_i32_n8(memory_at_0, loc_0 + 44, loc_2)
																										desired = 1
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									store_i32_n8(memory_at_0, add_i32(loc_0, 43), loc_2)
																									desired = 1
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								store_i32_n8(memory_at_0, add_i32(loc_0, 42), loc_2)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							store_i32_n8(memory_at_0, add_i32(loc_0, 41), loc_2)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						store_i32_n8(memory_at_0, loc_0 + 40, loc_2)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					store_i32_n8(memory_at_0, add_i32(loc_0, 39), loc_2)
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				store_i32_n8(memory_at_0, add_i32(loc_0, 38), loc_2)
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			store_i32_n8(memory_at_0, add_i32(loc_0, 37), loc_2)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		store_i32_n8(memory_at_0, loc_0 + 36, loc_2)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	store_i32_n8(memory_at_0, add_i32(loc_0, 34), loc_2)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																store_i32_n8(memory_at_0, add_i32(loc_0, 33), loc_2)
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															store_i32_n8(memory_at_0, loc_0 + 32, loc_2)
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														store_i32_n8(memory_at_0, add_i32(loc_0, 31), loc_2)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32_n8(memory_at_0, add_i32(loc_0, 30), loc_2)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i32_n8(memory_at_0, add_i32(loc_0, 29), loc_2)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32_n8(memory_at_0, loc_0 + 28, loc_2)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32_n8(memory_at_0, add_i32(loc_0, 23), loc_2)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32_n8(memory_at_0, add_i32(loc_0, 22), loc_2)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, add_i32(loc_0, 21), loc_2)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 20, loc_2)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, add_i32(loc_0, 19), loc_2)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, add_i32(loc_0, 18), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, add_i32(loc_0, 17), loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 16, loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[349] = --[[ _ZN5alloc5alloc6Global10alloc_impl17hcce97488e89569acE.llvm.5657905478831102887 ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			while true do
				if loc_3 ~= 0 then
					break
				end
				reg_0 = FUNC_LIST[44](loc_2, loc_1)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[48](loc_2, loc_1)
			loc_1 = reg_0
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[350] = --[[ _ZN5alloc7raw_vec11finish_grow17hd14e308c3692183cE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						if le_i32(loc_2, 4294967295) then
							desired = 3
							break
						end
						while true do
							while true do
								if load_i32(memory_at_0, loc_3 + 4) == 0 then
									break
								end
								while true do
									loc_6 = load_i32(memory_at_0, add_i32(loc_3, 8))
									if loc_6 ~= 0 then
										break
									end
									FUNC_LIST[349](add_i32(loc_5, 8), loc_1, loc_2, 0)
									loc_6 = load_i32(memory_at_0, loc_5 + 12)
									loc_3 = load_i32(memory_at_0, loc_5 + 8)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[47](load_i32(memory_at_0, loc_3), loc_6, loc_1, loc_2)
								loc_3 = reg_0
								loc_6 = loc_2
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[351](loc_5, loc_1, loc_2)
							loc_6 = load_i32(memory_at_0, loc_5 + 4)
							loc_3 = load_i32(memory_at_0, loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_3 == 0 then
								break
							end
							store_i32(memory_at_0, loc_0 + 4, loc_3)
							store_i32(memory_at_0, add_i32(loc_0, 8), loc_6)
							loc_2 = 0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_1)
						store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, 0)
					store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 1
			break
		end
		store_i32(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[351] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17hcbcdb8d6b0c4e467E.llvm.5657905478831102887 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[349](add_i32(loc_3, 8), loc_1, loc_2, 0)
		loc_2 = load_i32(memory_at_0, loc_3 + 12)
		store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_3 + 8))
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[352] = --[[ _ZN5alloc7raw_vec14handle_reserve17h2b83d1118f8832cbE.llvm.5657905478831102887 ]] function(loc_0, loc_1)
	local desired
	while true do
		while true do
			while true do
				if loc_0 == 2147483649 then
					break
				end
				if loc_0 == 0 then
					desired = 1
					break
				end
				FUNC_LIST[480](loc_0, loc_1)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[481]()
		error("out of code bounds")
	end
end
FUNC_LIST[353] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17heaf6448d59677fdfE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						if loc_1 ~= 0 then
							break
						end
						loc_2 = 1
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if le_i32(loc_1, 4294967295) then
						desired = 2
						break
					end
					while true do
						while true do
							if loc_2 ~= 0 then
								break
							end
							FUNC_LIST[351](add_i32(loc_3, 8), 1, loc_1)
							loc_2 = load_i32(memory_at_0, loc_3 + 8)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[349](loc_3, 1, loc_1, 1)
						loc_2 = load_i32(memory_at_0, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, loc_1)
				store_i32(memory_at_0, loc_0, loc_2)
				GLOBAL_LIST[0].value = add_i32(loc_3, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](1, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[354] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1534114a8b430e36E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			if loc_2 == 0 then
				break
			end
			store_i32(memory_at_0, loc_0 + 4, 8)
			store_i32(memory_at_0, loc_0 + 8, shl_i32(loc_2, 3))
			store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, 0)
		break
	end
end
FUNC_LIST[355] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hf3d2865ac6e4b0c0E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			if loc_2 == 0 then
				break
			end
			store_i32(memory_at_0, loc_0 + 4, 4)
			store_i32(memory_at_0, loc_0 + 8, shl_i32(loc_2, 4))
			store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, 0)
		break
	end
end
FUNC_LIST[356] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h398a0ec7932d13d1E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 0
		while true do
			loc_3 = add_i32(loc_2, loc_3)
			if loc_3 < loc_2 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			loc_5 = shl_i32(loc_2, 1)
			loc_3 = (if loc_5 > loc_3 then loc_5 else loc_3)
			loc_3 = (if loc_3 > 4 then loc_3 else 4)
			loc_5 = shl_i32(loc_3, 4)
			loc_6 = shl_i32((if loc_3 < 134217728 then 1 else 0), 2)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 20, load_i32(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_4 + 24, 4)
					store_i32(memory_at_0, loc_4 + 28, shl_i32(loc_2, 4))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 24, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[350](add_i32(loc_4, 8), loc_6, loc_5, add_i32(loc_4, 20), loc_4)
			loc_5 = load_i32(memory_at_0, loc_4 + 12)
			while true do
				if load_i32(memory_at_0, loc_4 + 8) == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, add_i32(loc_4, 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_5)
			loc_5 = 2147483649
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[357] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h4998ff71c6ad3315E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 0
		while true do
			loc_3 = add_i32(loc_2, loc_3)
			if loc_3 < loc_2 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			loc_5 = shl_i32(loc_2, 1)
			loc_3 = (if loc_5 > loc_3 then loc_5 else loc_3)
			loc_3 = (if loc_3 > 4 then loc_3 else 4)
			loc_5 = mul_i32(loc_3, 80)
			loc_6 = shl_i32((if loc_3 < 26843546 then 1 else 0), 3)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 24, 8)
					store_i32(memory_at_0, loc_4 + 28, mul_i32(loc_2, 80))
					store_i32(memory_at_0, loc_4 + 20, load_i32(memory_at_0, loc_1))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 24, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[350](add_i32(loc_4, 8), loc_6, loc_5, add_i32(loc_4, 20), loc_4)
			loc_5 = load_i32(memory_at_0, loc_4 + 12)
			while true do
				if load_i32(memory_at_0, loc_4 + 8) == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, add_i32(loc_4, 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_5)
			loc_5 = 2147483649
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[358] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h75b109b40a202325E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 0
		while true do
			loc_3 = add_i32(loc_2, loc_3)
			if loc_3 < loc_2 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			loc_5 = shl_i32(loc_2, 1)
			loc_3 = (if loc_5 > loc_3 then loc_5 else loc_3)
			loc_3 = (if loc_3 > 4 then loc_3 else 4)
			loc_5 = shl_i32(loc_3, 3)
			loc_6 = shl_i32((if loc_3 < 268435456 then 1 else 0), 3)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 24, 8)
					store_i32(memory_at_0, loc_4 + 28, shl_i32(loc_2, 3))
					store_i32(memory_at_0, loc_4 + 20, load_i32(memory_at_0, loc_1))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 24, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[350](add_i32(loc_4, 8), loc_6, loc_5, add_i32(loc_4, 20), loc_4)
			loc_5 = load_i32(memory_at_0, loc_4 + 12)
			while true do
				if load_i32(memory_at_0, loc_4 + 8) == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, add_i32(loc_4, 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_5)
			loc_5 = 2147483649
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[359] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17hbc5ee798650ba79aE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 0
		while true do
			loc_3 = add_i32(loc_2, loc_3)
			if loc_3 < loc_2 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			loc_5 = shl_i32(loc_2, 1)
			loc_3 = (if loc_5 > loc_3 then loc_5 else loc_3)
			loc_3 = (if loc_3 > 8 then loc_3 else 8)
			loc_5 = shr_u32(bxor_i32(loc_3, 4294967295), 31)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 28, loc_2)
					store_i32(memory_at_0, loc_4 + 24, 1)
					store_i32(memory_at_0, loc_4 + 20, load_i32(memory_at_0, loc_1))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 24, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[350](add_i32(loc_4, 8), loc_5, loc_3, add_i32(loc_4, 20), loc_4)
			loc_5 = load_i32(memory_at_0, loc_4 + 12)
			while true do
				if load_i32(memory_at_0, loc_4 + 8) == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, add_i32(loc_4, 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_5)
			loc_5 = 2147483649
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[360] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h2dd5d52314aacd4fE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[358](add_i32(loc_2, 8), loc_0, loc_1, 1)
		FUNC_LIST[352](load_i32(memory_at_0, loc_2 + 8), load_i32(memory_at_0, loc_2 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[361] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h651ea3edf2c0a7b5E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[359](add_i32(loc_2, 8), loc_0, loc_1, 1)
		FUNC_LIST[352](load_i32(memory_at_0, loc_2 + 8), load_i32(memory_at_0, loc_2 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[362] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h810f1c6705087ec1E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[357](add_i32(loc_2, 8), loc_0, loc_1, 1)
		FUNC_LIST[352](load_i32(memory_at_0, loc_2 + 8), load_i32(memory_at_0, loc_2 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[363] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h921d8693d44f951aE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[356](add_i32(loc_2, 8), loc_0, loc_1, 1)
		FUNC_LIST[352](load_i32(memory_at_0, loc_2 + 8), load_i32(memory_at_0, loc_2 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[364] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hd6905422adc6028fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[359](add_i32(loc_3, 8), loc_0, loc_1, loc_2)
		FUNC_LIST[352](load_i32(memory_at_0, loc_3 + 8), load_i32(memory_at_0, loc_3 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[365] = --[[ _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hcf8580d9a93569d1E.llvm.5657905478831102887 ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[366] = --[[ _ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h416beac2efa2bc20E ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[365](load_i32(memory_at_0, loc_0), 8, mul_i32(loc_1, 80))
			break
		end
		break
	end
end
FUNC_LIST[367] = --[[ _ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc603e50696a5bffcE ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[365](load_i32(memory_at_0, loc_0), 1, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[368] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$12remove_entry17hb7d88da2d9cb09bcE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = load_i32(memory_at_0, loc_1 + 4)
		loc_6 = band_i32(loc_5, wrap_i32_i64(loc_2))
		loc_7 = mul_i64(band_i64(shr_u64(loc_2, i64_from_u32(25, 0)), i64_from_u32(127, 0)), i64_from_u32(16843009, 16843009))
		loc_8 = load_i32(memory_at_0, loc_3)
		loc_3 = load_i32(memory_at_0, loc_1)
		loc_9 = 0
		while true do
			while true do
				loc_10 = load_i64(memory_at_0, add_i32(loc_3, loc_6))
				loc_2 = bxor_i64(loc_10, loc_7)
				loc_2 = band_i64(band_i64(bxor_i64(loc_2, i64_from_u32(4294967295, 4294967295)), add_i64(loc_2, i64_from_u32(4278124287, 4278124286))), i64_from_u32(2155905152, 2155905152))
				while true do
					while true do
						if ne_i64(loc_2, i64_ZERO) then
							break
						end
						while true do
							if (if eq_i64(band_i64(band_i64(loc_10, shl_i64(loc_10, i64_ONE)), i64_from_u32(2155905152, 2155905152)), i64_ZERO) then 1 else 0) == 0 then
								break
							end
							loc_9 = add_i32(loc_9, 8)
							loc_6 = band_i32(add_i32(loc_9, loc_6), loc_5)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_11 = ctz_i64(loc_2)
					loc_2 = band_i64(add_i64(loc_2, i64_from_u32(4294967295, 4294967295)), loc_2)
					loc_12 = sub_i32(loc_3, shl_i32(band_i32(add_i32(shr_u32(wrap_i32_i64(loc_11), 3), loc_6), loc_5), 3))
					if loc_8 ~= load_i32(memory_at_0, add_i32(loc_12, 4294967288)) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[369](add_i32(loc_4, 4), loc_1, loc_12)
			store_i32(memory_at_0, loc_0, 1)
			store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_4 + 4))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[369] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$6remove17h048d557833699077E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[370](loc_1, add_i32(loc_3, 12))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, add_i32(loc_2, 4294967288)))
		store_i32(memory_at_0, loc_0 + 8, shr_i32(sub_i32(load_i32(memory_at_0, loc_1), loc_2), 3))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[370] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$13erase_no_drop17h03bbd092e382b320E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	while true do
		loc_2 = 128
		while true do
			loc_3 = load_i32(memory_at_0, loc_0)
			loc_1 = shr_i32(sub_i32(loc_3, load_i32(memory_at_0, loc_1)), 3)
			loc_4 = add_i32(loc_3, loc_1)
			loc_5 = load_i64(memory_at_0, loc_4)
			loc_3 = add_i32(loc_3, band_i32(add_i32(loc_1, 4294967288), load_i32(memory_at_0, loc_0 + 4)))
			reg_0 = shr_u32(wrap_i32_i64(ctz_i64(band_i64(band_i64(loc_5, shl_i64(loc_5, i64_ONE)), i64_from_u32(2155905152, 2155905152)))), 3)
			loc_5 = load_i64(memory_at_0, loc_3)
			if add_i32(reg_0, shr_u32(wrap_i32_i64(clz_i64(band_i64(band_i64(loc_5, shl_i64(loc_5, i64_ONE)), i64_from_u32(2155905152, 2155905152)))), 3)) > 7 then
				break
			end
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			loc_2 = 255
			break
		end
		store_i32_n8(memory_at_0, loc_4, loc_2)
		store_i32_n8(memory_at_0, add_i32(loc_3, 8), loc_2)
		store_i32(memory_at_0, loc_0 + 12, add_i32(load_i32(memory_at_0, loc_0 + 12), 4294967295))
		break
	end
end
FUNC_LIST[371] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17hcf2bfa7f76553c92E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 16, loc_3)
		loc_6 = load_i32(memory_at_0, loc_1 + 12)
		store_i32(memory_at_0, loc_5 + 20, add_i32(loc_5, 16))
		while true do
			while true do
				loc_3 = add_i32(loc_6, loc_2)
				if loc_3 >= loc_6 then
					break
				end
				FUNC_LIST[469](loc_5, loc_4)
				loc_7 = load_i32(memory_at_0, loc_5 + 4)
				loc_3 = load_i32(memory_at_0, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						loc_7 = load_i32(memory_at_0, loc_1 + 4)
						loc_8 = add_i32(loc_7, 1)
						loc_2 = shr_u32(loc_8, 3)
						loc_9 = (if loc_7 < 8 then loc_7 else mul_i32(loc_2, 7))
						if loc_3 <= shr_u32(loc_9, 1) then
							break
						end
						loc_2 = add_i32(loc_9, 1)
						loc_3 = (if loc_3 > loc_2 then loc_3 else loc_2)
						if loc_3 < 8 then
							desired = 3
							break
						end
						while true do
							if loc_3 >= 536870912 then
								break
							end
							loc_7 = 1
							loc_3 = shl_i32(loc_3, 3)
							if loc_3 < 14 then
								desired = 2
								break
							end
							loc_7 = add_i32(shr_u32(4294967295, clz_i32(add_i32(div_u32(loc_3, 7), 4294967295))), 1)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[469](add_i32(loc_5, 8), loc_4)
						loc_7 = load_i32(memory_at_0, loc_5 + 12)
						loc_3 = load_i32(memory_at_0, loc_5 + 8)
						if loc_3 ~= 2147483649 then
							desired = 1
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = add_i32(loc_2, (if band_i32(loc_8, 7) ~= 0 then 1 else 0))
					loc_10 = load_i32(memory_at_0, loc_1)
					loc_3 = loc_10
					while true do
						while true do
							if loc_2 ~= 0 then
								break
							end
							while true do
								while true do
									if loc_8 < 8 then
										break
									end
									store_i64(memory_at_0, add_i32(loc_10, loc_8), load_i64(memory_at_0, loc_10))
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[537](add_i32(loc_10, 8), loc_10, loc_8)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = 0
							loc_12 = loc_10
							while true do
								while true do
									while true do
										while true do
											if loc_11 == loc_8 then
												break
											end
											loc_13 = add_i32(loc_10, loc_11)
											if load_i32_u8(memory_at_0, loc_13) ~= 128 then
												desired = 7
												break
											end
											loc_14 = add_i32(sub_i32(loc_10, shl_i32(loc_11, 3)), 4294967288)
											while true do
												reg_2 = FUNC_LIST[372](add_i32(loc_5, 20), loc_1, loc_11)
												loc_15 = reg_2
												loc_2 = wrap_i32_i64(loc_15)
												loc_4 = band_i32(loc_7, loc_2)
												reg_1 = FUNC_LIST[373](loc_1, loc_15)
												loc_3 = reg_1
												if band_i32(bxor_i32(sub_i32(loc_11, loc_4), sub_i32(loc_3, loc_4)), loc_7) < 8 then
													desired = 8
													break
												end
												loc_4 = add_i32(loc_10, loc_3)
												loc_16 = load_i32_u8(memory_at_0, loc_4)
												loc_2 = shr_u32(loc_2, 25)
												store_i32_n8(memory_at_0, loc_4, loc_2)
												store_i32_n8(memory_at_0, add_i32(add_i32(band_i32(add_i32(loc_3, 4294967288), loc_7), loc_10), 8), loc_2)
												loc_17 = sub_i32(loc_10, shl_i32(loc_3, 3))
												while true do
													if loc_16 == 255 then
														break
													end
													loc_3 = 4294967288
													while true do
														if loc_3 == 0 then
															desired = 10
															break
														end
														loc_2 = add_i32(loc_12, loc_3)
														loc_4 = load_i32_u8(memory_at_0, loc_2)
														loc_16 = add_i32(loc_17, loc_3)
														store_i32_n8(memory_at_0, loc_2, load_i32_u8(memory_at_0, loc_16))
														store_i32_n8(memory_at_0, loc_16, loc_4)
														loc_3 = add_i32(loc_3, 1)
														continue
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32_n8(memory_at_0, loc_13, 255)
											store_i32_n8(memory_at_0, add_i32(add_i32(band_i32(add_i32(loc_11, 4294967288), loc_7), loc_10), 8), 255)
											store_i64(memory_at_0, add_i32(loc_17, 4294967288), load_i64(memory_at_0, loc_14))
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_1 + 8, sub_i32(loc_9, loc_6))
										loc_3 = 2147483649
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = shr_u32(loc_2, 25)
									store_i32_n8(memory_at_0, loc_13, loc_3)
									store_i32_n8(memory_at_0, add_i32(add_i32(band_i32(add_i32(loc_11, 4294967288), loc_7), loc_10), 8), loc_3)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_11 = add_i32(loc_11, 1)
								loc_12 = add_i32(loc_12, 4294967288)
								continue
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_15 = load_i64(memory_at_0, loc_3)
						store_i64(memory_at_0, loc_3, add_i64(band_i64(shr_u64(bxor_i64(loc_15, i64_from_u32(4294967295, 4294967295)), i64_from_u32(7, 0)), i64_from_u32(16843009, 16843009)), bor_i64(loc_15, i64_from_u32(2139062143, 2139062143))))
						loc_3 = add_i32(loc_3, 8)
						loc_2 = add_i32(loc_2, 4294967295)
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = (if loc_3 < 4 then 4 else 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[374](add_i32(loc_5, 48), 8, 8, loc_7, loc_4)
			while true do
				loc_3 = load_i32(memory_at_0, loc_5 + 48)
				if loc_3 ~= 0 then
					break
				end
				loc_7 = load_i32(memory_at_0, add_i32(add_i32(loc_5, 48), 8))
				loc_3 = load_i32(memory_at_0, loc_5 + 52)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_5 + 56)
			loc_10 = load_i32(memory_at_0, loc_5 + 52)
			reg_0 = FUNC_LIST[539](loc_3, 255, add_i32(loc_10, 9))
			loc_4 = reg_0
			store_i64(memory_at_0, loc_5 + 40, i64_from_u32(8, 8))
			store_i32(memory_at_0, loc_5 + 28, loc_10)
			store_i32(memory_at_0, loc_5 + 24, loc_4)
			store_i32(memory_at_0, loc_5 + 36, loc_6)
			loc_7 = sub_i32(loc_2, loc_6)
			store_i32(memory_at_0, loc_5 + 32, loc_7)
			loc_17 = load_i32(memory_at_0, loc_1)
			loc_2 = 4294967288
			loc_3 = 0
			while true do
				while true do
					if loc_8 ~= loc_3 then
						break
					end
					loc_15 = load_i64(memory_at_0, loc_1)
					store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_5 + 24))
					loc_3 = add_i32(add_i32(loc_5, 24), 8)
					loc_18 = load_i64(memory_at_0, loc_3)
					loc_2 = add_i32(loc_1, 8)
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
					store_i64(memory_at_0, loc_2, loc_18)
					store_i64(memory_at_0, loc_5 + 24, loc_15)
					while true do
						loc_3 = load_i32(memory_at_0, loc_5 + 28)
						if loc_3 == 0 then
							break
						end
						loc_2 = shl_i32(loc_3, 3)
						loc_3 = add_i32(add_i32(loc_3, loc_2), 17)
						if loc_3 == 0 then
							break
						end
						FUNC_LIST[45](add_i32(sub_i32(load_i32(memory_at_0, loc_5 + 24), loc_2), 4294967288), loc_3, 8)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = 2147483649
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					if lt_i32(load_i32_i8(memory_at_0, add_i32(loc_17, loc_3)), 0) then
						break
					end
					reg_2 = FUNC_LIST[372](add_i32(loc_5, 20), loc_1, loc_3)
					loc_15 = reg_2
					reg_1 = FUNC_LIST[373](add_i32(loc_5, 24), loc_15)
					loc_16 = reg_1
					loc_12 = shr_u32(wrap_i32_i64(loc_15), 25)
					store_i32_n8(memory_at_0, add_i32(loc_4, loc_16), loc_12)
					store_i32_n8(memory_at_0, add_i32(add_i32(band_i32(add_i32(loc_16, 4294967288), loc_10), loc_4), 8), loc_12)
					store_i64(memory_at_0, add_i32(sub_i32(loc_4, shl_i32(loc_16, 3)), 4294967288), load_i64(memory_at_0, add_i32(loc_17, loc_2)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = add_i32(loc_3, 1)
				loc_2 = add_i32(loc_2, 4294967288)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_7)
		store_i32(memory_at_0, loc_0, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_5, 80)
		break
	end
end
FUNC_LIST[372] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash28_$u7b$$u7b$closure$u7d$$u7d$17hf61b40ec05d93952E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[126](load_i32(memory_at_0, load_i32(memory_at_0, loc_0)), add_i32(sub_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_2, 3)), 4294967288))
		break
	end
	return reg_0
end
FUNC_LIST[373] = --[[ _ZN9hashbrown3raw22RawTableInner$LT$A$GT$16find_insert_slot17h31cbd81f315f5e0bE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		loc_3 = band_i32(loc_2, wrap_i32_i64(loc_1))
		loc_4 = load_i32(memory_at_0, loc_0)
		loc_0 = 8
		while true do
			while true do
				loc_1 = band_i64(load_i64(memory_at_0, add_i32(loc_4, loc_3)), i64_from_u32(2155905152, 2155905152))
				if ne_i64(loc_1, i64_ZERO) then
					desired = 1
					break
				end
				loc_3 = band_i32(add_i32(loc_3, loc_0), loc_2)
				loc_0 = add_i32(loc_0, 8)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_3 = band_i32(add_i32(shr_u32(wrap_i32_i64(ctz_i64(loc_1)), 3), loc_3), loc_2)
			if lt_i32(load_i32_i8(memory_at_0, add_i32(loc_4, loc_3)), 0) then
				break
			end
			loc_3 = shr_u32(wrap_i32_i64(ctz_i64(band_i64(load_i64(memory_at_0, loc_4), i64_from_u32(2155905152, 2155905152)))), 3)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[374] = --[[ _ZN9hashbrown3raw22RawTableInner$LT$A$GT$17new_uninitialized17h05cf44fecbc7d938E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					loc_6 = mul_i64(extend_i64_u32(loc_1), extend_i64_u32(loc_3))
					if wrap_i32_i64(shr_u64(loc_6, i64_from_u32(32, 0))) ~= 0 then
						break
					end
					loc_1 = wrap_i32_i64(loc_6)
					loc_7 = add_i32(add_i32(loc_2, loc_1), 4294967295)
					if loc_7 < loc_1 then
						break
					end
					loc_7 = band_i32(loc_7, sub_i32(0, loc_2))
					loc_1 = add_i32(add_i32(loc_3, loc_7), 8)
					if loc_1 < loc_7 then
						break
					end
					if loc_1 <= sub_i32(2147483648, loc_2) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[469](add_i32(loc_5, 8), loc_4)
				store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_5 + 8))
				store_i32(memory_at_0, loc_0, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				reg_0 = FUNC_LIST[384](add_i32(loc_5, 31), loc_2, loc_1)
				loc_8 = reg_0
				if loc_8 == 0 then
					break
				end
				store_i32(memory_at_0, loc_0 + 12, 0)
				loc_2 = add_i32(loc_3, 4294967295)
				store_i32(memory_at_0, loc_0 + 4, loc_2)
				store_i32(memory_at_0, loc_0, add_i32(loc_8, loc_7))
				store_i32(memory_at_0, loc_0 + 8, (if loc_2 < 8 then loc_2 else mul_i32(shr_u32(loc_3, 3), 7)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[470](add_i32(loc_5, 16), loc_4, loc_2, loc_1)
			store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_5 + 16))
			store_i32(memory_at_0, loc_0, 0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[375] = --[[ _ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$7reserve17hddc1a63ad987535cE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			if load_i32(memory_at_0, loc_0 + 8) >= loc_1 then
				break
			end
			FUNC_LIST[371](add_i32(loc_3, 8), loc_0, loc_1, loc_2, 1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[376] = --[[ _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h5d62fa4fc452f95bE ]] function(loc_0, loc_1)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(11661156, 4256962177))
		store_i64(memory_at_0, loc_0, i64_from_u32(3441327041, 3248670876))
		break
	end
end
FUNC_LIST[377] = --[[ _ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h1e744f24210ad690E ]] function(loc_0)
	while true do
		FUNC_LIST[378](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[378] = --[[ _ZN3std9panicking11begin_panic28_$u7b$$u7b$closure$u7d$$u7d$17hb5907d5091af0cb3E ]] function(loc_0)
	local loc_1 = 0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_0))
		FUNC_LIST[463](add_i32(loc_1, 8), 1059772, 0, load_i32(memory_at_0, loc_0 + 8), 1)
		error("out of code bounds")
	end
end
FUNC_LIST[379] = --[[ _ZN3std3sys6common12thread_local12static_local12Key$LT$T$GT$3get17hd8a1ec07974e5ac6E ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if eq_i64(load_i64(memory_at_0, loc_0), i64_ZERO) then
				break
			end
			reg_0 = add_i32(loc_0, 8)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[120](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[380] = --[[ _ZN4core3ptr77drop_in_place$LT$std..panicking..begin_panic..PanicPayload$LT$$RF$str$GT$$GT$17h363bfc8774c87f82E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[381] = --[[ _ZN9hashbrown3map28HashMap$LT$K$C$V$C$S$C$A$GT$12remove_entry17hd8ae91df8e58e7bbE ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[126](add_i32(loc_1, 16), loc_2)
		FUNC_LIST[368](loc_0, loc_1, reg_2, loc_2)
		break
	end
end
FUNC_LIST[382] = --[[ _ZN9hashbrown3map28HashMap$LT$K$C$V$C$S$C$A$GT$6insert17he524ec9bdfbf5116E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 12, loc_2)
		loc_5 = add_i32(loc_1, 16)
		reg_0 = FUNC_LIST[126](loc_5, add_i32(loc_4, 12))
		loc_6 = reg_0
		FUNC_LIST[375](loc_1, 1, loc_5)
		loc_7 = shr_u64(loc_6, i64_from_u32(25, 0))
		loc_8 = mul_i64(band_i64(loc_7, i64_from_u32(127, 0)), i64_from_u32(16843009, 16843009))
		loc_9 = load_i32(memory_at_0, loc_1 + 4)
		loc_5 = band_i32(loc_9, wrap_i32_i64(loc_6))
		loc_10 = load_i32(memory_at_0, loc_1)
		loc_11 = 0
		loc_12 = 0
		while true do
			while true do
				loc_13 = load_i64(memory_at_0, add_i32(loc_10, loc_5))
				loc_6 = bxor_i64(loc_13, loc_8)
				loc_6 = band_i64(band_i64(bxor_i64(loc_6, i64_from_u32(4294967295, 4294967295)), add_i64(loc_6, i64_from_u32(4278124287, 4278124286))), i64_from_u32(2155905152, 2155905152))
				while true do
					while true do
						while true do
							while true do
								if ne_i64(loc_6, i64_ZERO) then
									break
								end
								loc_6 = band_i64(loc_13, i64_from_u32(2155905152, 2155905152))
								loc_14 = 1
								if loc_12 ~= 1 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_15 = ctz_i64(loc_6)
							loc_6 = band_i64(add_i64(loc_6, i64_from_u32(4294967295, 4294967295)), loc_6)
							loc_14 = sub_i32(loc_10, shl_i32(band_i32(add_i32(shr_u32(wrap_i32_i64(loc_15), 3), loc_5), loc_9), 3))
							if load_i32(memory_at_0, add_i32(loc_14, 4294967288)) ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = add_i32(loc_14, 4294967292)
						loc_9 = load_i32(memory_at_0, loc_10)
						loc_5 = 1
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_14 = (if ne_i64(loc_6, i64_ZERO) then 1 else 0)
					loc_16 = band_i32(add_i32(shr_u32(wrap_i32_i64(ctz_i64(loc_6)), 3), loc_5), loc_9)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					if (if eq_i64(band_i64(loc_6, shl_i64(loc_13, i64_ONE)), i64_ZERO) then 1 else 0) == 0 then
						break
					end
					loc_11 = add_i32(loc_11, 8)
					loc_5 = band_i32(add_i32(loc_5, loc_11), loc_9)
					loc_12 = loc_14
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = 0
			while true do
				loc_14 = load_i32_i8(memory_at_0, add_i32(loc_10, loc_16))
				if lt_i32(loc_14, 0) then
					break
				end
				loc_16 = shr_u32(wrap_i32_i64(ctz_i64(band_i64(load_i64(memory_at_0, loc_10), i64_from_u32(2155905152, 2155905152)))), 3)
				loc_14 = load_i32_u8(memory_at_0, add_i32(loc_10, loc_16))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = band_i32(wrap_i32_i64(loc_7), 127)
			store_i32_n8(memory_at_0, add_i32(loc_10, loc_16), loc_12)
			store_i32_n8(memory_at_0, add_i32(add_i32(band_i32(add_i32(loc_16, 4294967288), loc_9), loc_10), 8), loc_12)
			store_i32(memory_at_0, loc_1 + 8, sub_i32(load_i32(memory_at_0, loc_1 + 8), band_i32(loc_14, 1)))
			store_i32(memory_at_0, loc_1 + 12, add_i32(load_i32(memory_at_0, loc_1 + 12), 1))
			loc_10 = sub_i32(loc_10, shl_i32(loc_16, 3))
			store_i32(memory_at_0, add_i32(loc_10, 4294967288), loc_2)
			loc_10 = add_i32(loc_10, 4294967292)
			break
		end
		store_i32(memory_at_0, loc_10, loc_3)
		store_i32(memory_at_0, loc_0 + 4, loc_9)
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[383] = --[[ _ZN9hashbrown3map28HashMap$LT$K$C$V$C$S$C$A$GT$6remove17h6533444cbce285acE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[381](add_i32(loc_3, 4), loc_1, loc_2)
		loc_2 = load_i32(memory_at_0, loc_3 + 4)
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, add_i32(loc_3, 12)))
		store_i32(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[384] = --[[ _ZN9hashbrown3raw5alloc5inner8do_alloc17hc4f5cb5dcd7edbc0E ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			reg_0 = FUNC_LIST[44](loc_2, loc_1)
			loc_1 = reg_0
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[385] = --[[ _ZN14riscv_emu_rust6device4plic4Plic4tick17h084b315dce9f9de5E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local desired
	while true do
		loc_4 = GLOBAL_LIST[0].value
		store_i64(memory_at_0, loc_0 + 4096, add_i64(load_i64(memory_at_0, loc_0 + 4096), i64_ONE))
		loc_5 = load_i32(memory_at_0, loc_0 + 4)
		loc_6 = load_i32(memory_at_0, loc_0 + 40)
		loc_7 = load_i32(memory_at_0, loc_0 + 4104)
		loc_4 = sub_i32(loc_4, 32)
		store_i32_n8(memory_at_0, loc_4 + 13, loc_2)
		store_i32_n8(memory_at_0, loc_4 + 12, loc_1)
		store_i32_n8(memory_at_0, loc_4 + 15, band_i32(shr_u32(loc_7, 10), 1))
		store_i32_n8(memory_at_0, loc_4 + 14, band_i32(shr_u32(loc_7, 1), 1))
		store_i32(memory_at_0, loc_4 + 20, loc_6)
		store_i32(memory_at_0, loc_4 + 16, loc_5)
		store_i64(memory_at_0, loc_4 + 24, i64_from_u32(1, 10))
		loc_6 = load_i32(memory_at_0, loc_0 + 4116)
		loc_7 = 0
		loc_1 = 0
		loc_8 = 0
		while true do
			loc_5 = (if loc_6 > loc_1 then loc_6 else loc_1)
			loc_2 = shl_i32(loc_7, 2)
			while true do
				while true do
					if loc_7 ~= 2 then
						break
					end
					while true do
						if loc_8 == 0 then
							break
						end
						store_i32(memory_at_0, loc_0 + 4112, loc_8)
						store_i64(memory_at_0, loc_3, bor_i64(load_i64(memory_at_0, loc_3), i64_from_u32(512, 0)))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						if load_i32_u8(memory_at_0, add_i32(add_i32(loc_4, 12), loc_7)) == 0 then
							break
						end
						if load_i32_u8(memory_at_0, add_i32(add_i32(loc_4, 14), loc_7)) == 0 then
							break
						end
						loc_1 = load_i32(memory_at_0, add_i32(add_i32(loc_4, 16), loc_2))
						if loc_1 > loc_5 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = add_i32(loc_7, 1)
					loc_2 = add_i32(loc_2, 4)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_7 = add_i32(loc_7, 1)
			loc_8 = load_i32(memory_at_0, add_i32(add_i32(loc_4, 24), loc_2))
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[386] = --[[ _ZN14riscv_emu_rust6device4plic4Plic4load17h55ad7bf28eac98b9E ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			if eq_i64(band_i64(loc_1, i64_from_u32(4294963200, 4294967295)), i64_from_u32(201326592, 0)) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					loc_2 = add_i64(loc_1, i64_from_u32(4093632384, 4294967295))
																					if le_u64(loc_2, i64_from_u32(7, 0)) then
																						break
																					end
																					loc_1 = add_i64(loc_1, i64_from_u32(4091539456, 4294967295))
																					if le_u64(loc_1, i64_from_u32(7, 0)) then
																						desired = 18
																						break
																					end
																					reg_0 = 0
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				if not br_map[1] then
																					br_map[1] = (function()
																						return { [0] = 1, 2, 3, 4, 5, 6, 7, 8, }
																					end)()
																				end
																				temp = br_map[1][wrap_i32_i64(loc_2)] or 1
																				if temp < 5 then
																					if temp < 3 then
																						if temp < 2 then
																							desired = 17
																							break
																						else
																							desired = 16
																							break
																						end
																					elseif temp > 3 then
																						desired = 14
																						break
																					else
																						desired = 15
																						break
																					end
																				elseif temp > 5 then
																					if temp < 7 then
																						desired = 12
																						break
																					elseif temp > 7 then
																						desired = 10
																						break
																					else
																						desired = 11
																						break
																					end
																				else
																					desired = 13
																					break
																				end
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if not br_map[2] then
																				br_map[2] = (function()
																					return { [0] = 8, 9, 10, 11, 12, 13, 14, 15, }
																				end)()
																			end
																			temp = br_map[2][wrap_i32_i64(loc_1)] or 8
																			if temp < 12 then
																				if temp < 10 then
																					if temp < 9 then
																						desired = 9
																						break
																					else
																						desired = 8
																						break
																					end
																				elseif temp > 10 then
																					desired = 6
																					break
																				else
																					desired = 7
																					break
																				end
																			elseif temp > 12 then
																				if temp < 14 then
																					desired = 4
																					break
																				elseif temp > 14 then
																					desired = 2
																					break
																				else
																					desired = 3
																					break
																				end
																			else
																				desired = 5
																				break
																			end
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		reg_0 = load_i32_u8(memory_at_0, loc_0 + 4104)
																		desired = 0
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4105))
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4106))
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4107))
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4108))
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4109))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4110))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4111))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = load_i32(memory_at_0, loc_0 + 4116)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 4116), 8)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 4118))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4119))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 4112)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = shr_u32(load_i32(memory_at_0, loc_0 + 4112), 8)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = load_i32_u16(memory_at_0, add_i32(loc_0, 4114))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = load_i32_u8(memory_at_0, add_i32(loc_0, 4115))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = wrap_i32_i64(loc_1)
		reg_0 = shr_u32(load_i32(memory_at_0, add_i32(loc_0, band_i32(add_i32(loc_3, 4093640704), 4294967292))), shl_i32(loc_3, 3))
		break
	end
	return reg_0
end
FUNC_LIST[387] = --[[ _ZN14riscv_emu_rust6device4plic4Plic5store17he284b18257751c0eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				if eq_i64(band_i64(loc_1, i64_from_u32(4294963200, 4294967295)), i64_from_u32(201326592, 0)) then
					break
				end
				loc_3 = add_i64(loc_1, i64_from_u32(4093632384, 4294967295))
				if le_u64(loc_3, i64_from_u32(7, 0)) then
					desired = 1
					break
				end
				while true do
					loc_1 = add_i64(loc_1, i64_from_u32(4091539456, 4294967295))
					if gt_u64(loc_1, i64_from_u32(4, 0)) then
						break
					end
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 1, 2, 3, 4, }
											end)()
										end
										temp = br_map[1][wrap_i32_i64(loc_1)] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											if temp < 4 then
												desired = 5
												break
											else
												desired = 4
												break
											end
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32_n8(memory_at_0, loc_0 + 4116, loc_2)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, add_i32(loc_0, 4117), loc_2)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, add_i32(loc_0, 4118), loc_2)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, add_i32(loc_0, 4119), loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_0 + 4112) ~= band_i32(loc_2, 255) then
						break
					end
					store_i32(memory_at_0, loc_0 + 4112, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = wrap_i32_i64(loc_1)
			loc_0 = add_i32(loc_0, band_i32(add_i32(loc_4, 4093640704), 4294967292))
			reg_0 = loc_0
			loc_0 = shl_i32(loc_4, 3)
			store_i32(memory_at_0, reg_0, bor_i32(band_i32(load_i32(memory_at_0, loc_0), bxor_i32(shl_i32(255, loc_0), 4294967295)), shl_i32(band_i32(loc_2, 255), loc_0)))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[2] then
											br_map[2] = (function()
												return { [0] = 7, 6, 5, 4, 3, 2, 1, 0, }
											end)()
										end
										temp = br_map[2][wrap_i32_i64(loc_3)] or 7
										if temp < 4 then
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 7
													break
												end
											elseif temp > 2 then
												desired = 5
												break
											else
												desired = 6
												break
											end
										elseif temp > 4 then
											if temp < 6 then
												desired = 3
												break
											elseif temp > 6 then
												desired = 1
												break
											else
												desired = 2
												break
											end
										else
											desired = 4
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i64_n8(memory_at_0, add_i32(loc_0, 4111), extend_i64_u32(loc_2))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i64_n8(memory_at_0, add_i32(loc_0, 4110), extend_i64_u32(loc_2))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64_n8(memory_at_0, add_i32(loc_0, 4109), extend_i64_u32(loc_2))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64_n8(memory_at_0, add_i32(loc_0, 4108), extend_i64_u32(loc_2))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64_n8(memory_at_0, add_i32(loc_0, 4107), extend_i64_u32(loc_2))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64_n8(memory_at_0, add_i32(loc_0, 4106), extend_i64_u32(loc_2))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64_n8(memory_at_0, add_i32(loc_0, 4105), extend_i64_u32(loc_2))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 4104, loc_2)
		break
	end
end
FUNC_LIST[388] = --[[ _ZN14riscv_emu_rust6device4uart4Uart4tick17hbf97914f73c6b0e3E ]] function(loc_0)
	local loc_1 = i64_ZERO
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = add_i64(load_i64(memory_at_0, loc_0 + 8), i64_ONE)
		store_i64(memory_at_0, loc_0 + 8, loc_1)
		while true do
			if ne_i64(rem_u64(loc_1, i64_from_u32(230400, 0)), i64_ZERO) then
				break
			end
			if band_i32(load_i32_u8(memory_at_0, loc_0 + 16), 255) ~= 0 then
				break
			end
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 4) + 24)](load_i32(memory_at_0, loc_0))
			loc_2 = reg_0
			if band_i32(loc_2, 255) == 0 then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 16, loc_2)
			store_i32_n8(memory_at_0, loc_0 + 22, bor_i32(load_i32_u8(memory_at_0, loc_0 + 22), 1))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				if ne_i64(band_i64(loc_1, i64_from_u32(15, 0)), i64_ZERO) then
					break
				end
				loc_2 = load_i32_u8(memory_at_0, loc_0 + 17)
				if band_i32(loc_2, 255) ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 4) + 12)](load_i32(memory_at_0, loc_0), loc_2)
		store_i32_n8(memory_at_0, loc_0 + 17, 0)
		store_i32_n8(memory_at_0, loc_0 + 22, bor_i32(load_i32_u8(memory_at_0, loc_0 + 22), 32))
		break
	end
end
FUNC_LIST[389] = --[[ _ZN14riscv_emu_rust6device4uart4Uart15is_interrupting17h52b8ad17a3648ddaE ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_1 = load_i32_u8(memory_at_0, loc_0 + 18)
					if band_i32(loc_1, 1) == 0 then
						break
					end
					if band_i32(load_i32_u8(memory_at_0, loc_0 + 16), 255) ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						if band_i32(loc_1, 2) == 0 then
							break
						end
						if band_i32(load_i32_u8(memory_at_0, loc_0 + 17), 255) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 19, 15)
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 19, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 19, 4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[390] = --[[ _ZN14riscv_emu_rust6device4uart4Uart4load17habed2948836a88b3E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = 0
		while true do
			loc_1 = add_i64(loc_1, i64_from_u32(4026531840, 4294967295))
			if gt_u64(loc_1, i64_from_u32(7, 0)) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 5, 6, 0, 1, 2, 3, 7, 4, }
											end)()
										end
										temp = br_map[1][wrap_i32_i64(loc_1)] or 5
										if temp < 4 then
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 7
													break
												end
											elseif temp > 2 then
												desired = 5
												break
											else
												desired = 6
												break
											end
										elseif temp > 4 then
											if temp < 6 then
												desired = 3
												break
											elseif temp > 6 then
												desired = 1
												break
											else
												desired = 2
												break
											end
										else
											desired = 4
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = load_i32_u8(memory_at_0, loc_0 + 19)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = load_i32_u8(memory_at_0, loc_0 + 20)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = load_i32_u8(memory_at_0, loc_0 + 21)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = load_i32_u8(memory_at_0, loc_0 + 22)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = load_i32_u8(memory_at_0, loc_0 + 23)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if le_i32(load_i32_i8(memory_at_0, loc_0 + 20), 4294967295) then
					desired = 1
					break
				end
				loc_2 = load_i32_u8(memory_at_0, loc_0 + 16)
				store_i32_n8(memory_at_0, loc_0 + 16, 0)
				store_i32_n8(memory_at_0, loc_0 + 22, band_i32(load_i32_u8(memory_at_0, loc_0 + 22), 254))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if le_i32(load_i32_i8(memory_at_0, loc_0 + 20), 4294967295) then
				break
			end
			reg_0 = load_i32_u8(memory_at_0, loc_0 + 18)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[391] = --[[ _ZN14riscv_emu_rust6device4uart4Uart5store17h2fca7fb33329c203E ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			loc_1 = add_i64(loc_1, i64_from_u32(4026531840, 4294967295))
			if gt_u64(loc_1, i64_from_u32(7, 0)) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 3, 4, 5, 0, 1, 5, 5, 2, }
									end)()
								end
								temp = br_map[1][wrap_i32_i64(loc_1)] or 3
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 20, loc_2)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_0 + 21, loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 23, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if le_i32(load_i32_i8(memory_at_0, loc_0 + 20), 4294967295) then
					desired = 1
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 17, loc_2)
				store_i32_n8(memory_at_0, loc_0 + 22, band_i32(load_i32_u8(memory_at_0, loc_0 + 22), 223))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if le_i32(load_i32_i8(memory_at_0, loc_0 + 20), 4294967295) then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 18, loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[392] = --[[ _ZN4core3ptr42drop_in_place$LT$wee_alloc..CellHeader$GT$17h70b7a2e84a30f3f0E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[393] = --[[ _ZN4core3ptr48drop_in_place$LT$wee_alloc..LargeAllocPolicy$GT$17h2c0ab300a27e2319E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[394] = --[[ _ZN9wee_alloc9neighbors18Neighbors$LT$T$GT$6remove17ha088e1e3f0144a43E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0)
			loc_2 = band_i32(loc_1, 4294967292)
			if loc_2 == 0 then
				break
			end
			if band_i32(loc_1, 2) ~= 0 then
				break
			end
			store_i32(memory_at_0, loc_2 + 4, bor_i32(band_i32(load_i32(memory_at_0, loc_2 + 4), 3), band_i32(load_i32(memory_at_0, loc_0 + 4), 4294967292)))
			loc_1 = load_i32(memory_at_0, loc_0)
			break
		end
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			loc_3 = band_i32(loc_2, 4294967292)
			if loc_3 == 0 then
				break
			end
			store_i32(memory_at_0, loc_3, bor_i32(band_i32(load_i32(memory_at_0, loc_3), 3), band_i32(loc_1, 4294967292)))
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			loc_1 = load_i32(memory_at_0, loc_0)
			break
		end
		store_i32(memory_at_0, loc_0 + 4, band_i32(loc_2, 3))
		store_i32(memory_at_0, loc_0, band_i32(loc_1, 3))
		break
	end
end
FUNC_LIST[395] = --[[ _ZN88_$LT$wee_alloc..size_classes..SizeClassAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$22new_cell_for_free_list17h255dc1167ed7504cE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = load_i32(memory_at_0, loc_1)
		store_i32(memory_at_0, loc_4 + 12, load_i32(memory_at_0, loc_5))
		loc_1 = add_i32(loc_2, 2)
		loc_1 = mul_i32(loc_1, loc_1)
		loc_2 = (if loc_1 > 2048 then loc_1 else 2048)
		reg_0 = FUNC_LIST[396](loc_2, 4, add_i32(loc_4, 12), 1059792, 1059816)
		loc_1 = reg_0
		store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_4 + 12))
		while true do
			while true do
				if loc_1 ~= 0 then
					break
				end
				loc_2 = 1
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_1 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_1, bor_i32(add_i32(loc_1, shl_i32(loc_2, 2)), 2))
			loc_2 = 0
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_1)
		store_i32(memory_at_0, loc_0, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[396] = --[[ _ZN9wee_alloc17alloc_with_refill17h37aa5dacc44157a1E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			reg_0 = FUNC_LIST[402](loc_0, loc_1, loc_2, loc_3, loc_4)
			loc_6 = reg_0
			if loc_6 ~= 0 then
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, loc_4 + 12)](add_i32(loc_5, 8), loc_3, loc_0, loc_1)
			loc_6 = 0
			if load_i32(memory_at_0, loc_5 + 8) ~= 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_5 + 12)
			store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_2))
			store_i32(memory_at_0, loc_2, loc_6)
			reg_0 = FUNC_LIST[402](loc_0, loc_1, loc_2, loc_3, loc_4)
			loc_6 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[397] = --[[ _ZN88_$LT$wee_alloc..size_classes..SizeClassAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$13min_cell_size17ha5795d668243ecd0E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[398] = --[[ _ZN88_$LT$wee_alloc..size_classes..SizeClassAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$32should_merge_adjacent_free_cells17ha100ec4a55db2612E ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[399] = --[[ _ZN70_$LT$wee_alloc..LargeAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$22new_cell_for_free_list17h8877d523d5be12b2E ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_2 = shl_i32(loc_2, 2)
				loc_3 = add_i32(shl_i32(loc_3, 3), 16384)
				loc_3 = add_i32((if loc_2 > loc_3 then loc_2 else loc_3), 65543)
				reg_0 = rt.allocator.grow(memory_at_0, shr_u32(loc_3, 16))
				loc_2 = reg_0
				if loc_2 ~= 4294967295 then
					break
				end
				loc_3 = 1
				loc_2 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = shl_i32(loc_2, 16)
			store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_2, bor_i32(add_i32(loc_2, band_i32(loc_3, 4294901760)), 2))
			loc_3 = 0
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		store_i32(memory_at_0, loc_0, loc_3)
		break
	end
end
FUNC_LIST[400] = --[[ _ZN70_$LT$wee_alloc..LargeAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$13min_cell_size17h754adb614b46897bE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 512
		break
	end
	return reg_0
end
FUNC_LIST[401] = --[[ _ZN70_$LT$wee_alloc..LargeAllocPolicy$u20$as$u20$wee_alloc..AllocPolicy$GT$32should_merge_adjacent_free_cells17hb0b4f95f0be9204dE ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[402] = --[[ _ZN9wee_alloc15alloc_first_fit17h0002f9b4dec2693fE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = add_i32(loc_1, 4294967295)
		loc_6 = 0
		loc_7 = sub_i32(0, loc_1)
		loc_8 = shl_i32(loc_0, 2)
		loc_9 = load_i32(memory_at_0, loc_2)
		while true do
			while true do
				if loc_9 == 0 then
					desired = 1
					break
				end
				loc_1 = loc_9
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_9 = load_i32(memory_at_0, loc_1 + 8)
											if band_i32(loc_9, 1) ~= 0 then
												break
											end
											loc_10 = band_i32(load_i32(memory_at_0, loc_1), 4294967292)
											loc_11 = add_i32(loc_1, 8)
											if sub_i32(loc_10, loc_11) < loc_8 then
												desired = 6
												break
											end
											while true do
												reg_1 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_4 + 16)](loc_3, loc_0)
												loc_9 = band_i32(sub_i32(loc_10, loc_8), loc_7)
												if add_i32(add_i32(loc_11, shl_i32(reg_1, 2)), 8) <= loc_9 then
													break
												end
												loc_9 = load_i32(memory_at_0, loc_11)
												if band_i32(loc_5, loc_11) ~= 0 then
													desired = 6
													break
												end
												store_i32(memory_at_0, loc_2, band_i32(loc_9, 4294967292))
												loc_2 = load_i32(memory_at_0, loc_1)
												loc_9 = loc_1
												desired = 7
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 0
											store_i32(memory_at_0, loc_9, 0)
											loc_9 = add_i32(loc_9, 4294967288)
											store_i64(memory_at_0, loc_9, i64_ZERO)
											store_i32(memory_at_0, loc_9, band_i32(load_i32(memory_at_0, loc_1), 4294967292))
											while true do
												loc_8 = load_i32(memory_at_0, loc_1)
												loc_11 = band_i32(loc_8, 4294967292)
												if loc_11 == 0 then
													break
												end
												if band_i32(loc_8, 2) ~= 0 then
													break
												end
												store_i32(memory_at_0, loc_11 + 4, bor_i32(band_i32(load_i32(memory_at_0, loc_11 + 4), 3), loc_9))
												loc_2 = band_i32(load_i32(memory_at_0, loc_9 + 4), 3)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32(memory_at_0, loc_9 + 4, bor_i32(loc_2, loc_1))
											store_i32(memory_at_0, loc_1 + 8, band_i32(load_i32(memory_at_0, loc_1 + 8), 4294967294))
											loc_2 = load_i32(memory_at_0, loc_1)
											loc_11 = bor_i32(band_i32(loc_2, 3), loc_9)
											store_i32(memory_at_0, loc_1, loc_11)
											if band_i32(loc_2, 2) ~= 0 then
												desired = 8
												break
											end
											loc_2 = load_i32(memory_at_0, loc_9)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_1 + 8, band_i32(loc_9, 4294967294))
										while true do
											while true do
												loc_9 = band_i32(load_i32(memory_at_0, loc_1 + 4), 4294967292)
												if loc_9 ~= 0 then
													break
												end
												loc_9 = 0
												desired = 9
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_9 = (if band_i32(load_i32_u8(memory_at_0, loc_9), 1) ~= 0 then 0 else loc_9)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[394](loc_1)
										if band_i32(load_i32_u8(memory_at_0, loc_1), 2) ~= 0 then
											desired = 5
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32(memory_at_0, loc_1, band_i32(loc_11, 4294967293))
									loc_2 = bor_i32(load_i32(memory_at_0, loc_9), 2)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_9, bor_i32(loc_2, 1))
								loc_6 = add_i32(loc_9, 8)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_2, loc_9)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_9, bor_i32(load_i32(memory_at_0, loc_9), 2))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					store_i32(memory_at_0, loc_2, loc_9)
					loc_1 = loc_9
					continue
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[403] = --[[ _ZN9wee_alloc8WeeAlloc12dealloc_impl28_$u7b$$u7b$closure$u7d$$u7d$17hd9c9a08806adf5ebE ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_4, 0)
		loc_0 = add_i32(loc_4, 4294967288)
		store_i32(memory_at_0, loc_0, band_i32(load_i32(memory_at_0, loc_0), 4294967294))
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_3 + 20)](loc_2)
			if reg_0 == 0 then
				break
			end
			while true do
				while true do
					loc_3 = band_i32(load_i32(memory_at_0, add_i32(loc_4, 4294967292)), 4294967292)
					if loc_3 == 0 then
						break
					end
					if band_i32(load_i32_u8(memory_at_0, loc_3), 1) ~= 0 then
						break
					end
					FUNC_LIST[394](loc_0)
					if band_i32(load_i32_u8(memory_at_0, loc_0), 2) == 0 then
						desired = 2
						break
					end
					store_i32(memory_at_0, loc_3, bor_i32(load_i32(memory_at_0, loc_3), 2))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0)
				loc_3 = band_i32(loc_2, 4294967292)
				if loc_3 == 0 then
					desired = 1
					break
				end
				if band_i32(loc_2, 2) ~= 0 then
					desired = 1
					break
				end
				if band_i32(load_i32_u8(memory_at_0, loc_3), 1) ~= 0 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_4, band_i32(load_i32(memory_at_0, loc_3 + 8), 4294967292))
				store_i32(memory_at_0, loc_3 + 8, bor_i32(loc_0, 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_1))
		store_i32(memory_at_0, loc_1, loc_0)
		break
	end
end
FUNC_LIST[404] = --[[ _ZN72_$LT$wee_alloc..WeeAlloc$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb8f51ef658fd8fd6E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			if loc_2 == 0 then
				break
			end
			loc_2 = shr_u32(add_i32(loc_2, 3), 2)
			while true do
				if loc_1 >= 5 then
					break
				end
				loc_4 = add_i32(loc_2, 4294967295)
				if loc_4 > 255 then
					break
				end
				store_i32(memory_at_0, loc_3 + 4, add_i32(loc_0, 1024))
				loc_0 = add_i32(loc_0, shl_i32(loc_4, 2))
				store_i32(memory_at_0, loc_3 + 12, load_i32(memory_at_0, loc_0))
				reg_0 = FUNC_LIST[396](loc_2, loc_1, add_i32(loc_3, 12), add_i32(loc_3, 4), 1059792)
				loc_1 = reg_0
				store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_3 + 12))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_0 + 1024))
			reg_0 = FUNC_LIST[396](loc_2, loc_1, add_i32(loc_3, 8), 1059792, 1059816)
			loc_1 = reg_0
			store_i32(memory_at_0, loc_0 + 1024, load_i32(memory_at_0, loc_3 + 8))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[405] = --[[ _ZN72_$LT$wee_alloc..WeeAlloc$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hb5f5d2f0f8f98f71E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if loc_1 == 0 then
				break
			end
			store_i32(memory_at_0, loc_4 + 4, loc_1)
			if loc_3 == 0 then
				break
			end
			while true do
				if loc_2 >= 5 then
					break
				end
				loc_1 = add_i32(shr_u32(add_i32(loc_3, 3), 2), 4294967295)
				if loc_1 > 255 then
					break
				end
				store_i32(memory_at_0, loc_4 + 8, add_i32(loc_0, 1024))
				loc_1 = add_i32(loc_0, shl_i32(loc_1, 2))
				store_i32(memory_at_0, loc_4 + 12, load_i32(memory_at_0, loc_1))
				FUNC_LIST[403](add_i32(loc_4, 4), add_i32(loc_4, 12), add_i32(loc_4, 8), 1059792)
				store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_4 + 12))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4 + 12, load_i32(memory_at_0, loc_0 + 1024))
			FUNC_LIST[403](add_i32(loc_4, 4), add_i32(loc_4, 12), 1059792, 1059816)
			store_i32(memory_at_0, loc_0 + 1024, load_i32(memory_at_0, loc_4 + 12))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[406] = --[[ _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h047ec2991cd52d26E ]] function(loc_0, loc_1)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(1229464069, 3025884056))
		store_i64(memory_at_0, loc_0, i64_from_u32(482422035, 4015249626))
		break
	end
end
FUNC_LIST[407] = --[[ _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h1afd1a158c417f5dE ]] function(loc_0, loc_1)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(512226615, 2735273938))
		store_i64(memory_at_0, loc_0, i64_from_u32(3830209246, 2757655119))
		break
	end
end
FUNC_LIST[408] = --[[ _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h239c764bcd8c9dd8E ]] function(loc_0, loc_1)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(11661156, 4256962177))
		store_i64(memory_at_0, loc_0, i64_from_u32(3441327041, 3248670876))
		break
	end
end
FUNC_LIST[409] = --[[ _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ecf2320c4a1d585E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[522](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[410] = --[[ _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h4b81262c15c9ce20E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[523](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 4), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[411] = --[[ _ZN4core3fmt5Write10write_char17h81b5dc9186338a2eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 4, 0)
		while true do
			while true do
				while true do
					while true do
						if loc_1 < 128 then
							break
						end
						if loc_1 < 2048 then
							desired = 3
							break
						end
						if loc_1 >= 65536 then
							desired = 2
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 6, bor_i32(band_i32(loc_1, 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 4, bor_i32(shr_u32(loc_1, 12), 224))
						store_i32_n8(memory_at_0, loc_2 + 5, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
						loc_1 = 3
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_2 + 4, loc_1)
					loc_1 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_2 + 5, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_2 + 4, bor_i32(shr_u32(loc_1, 6), 192))
				loc_1 = 2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_2 + 7, bor_i32(band_i32(loc_1, 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 6, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 5, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 4, bor_i32(band_i32(shr_u32(loc_1, 18), 7), 240))
			loc_1 = 4
			break
		end
		FUNC_LIST[412](add_i32(loc_2, 8), load_i32(memory_at_0, loc_0 + 8), add_i32(loc_2, 4), loc_1)
		while true do
			loc_1 = load_i32_u8(memory_at_0, loc_2 + 8)
			if loc_1 == 4 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 4)
			loc_4 = load_i64(memory_at_0, loc_2 + 8)
			while true do
				while true do
					loc_5 = load_i32_u8(memory_at_0, loc_0)
					if loc_5 > 4 then
						break
					end
					if loc_5 ~= 3 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_3)
				loc_5 = load_i32(memory_at_0, add_i32(loc_3, 4))
				TABLE_LIST[0].data[load_i32(memory_at_0, loc_5)](loc_6)
				while true do
					loc_7 = load_i32(memory_at_0, loc_5 + 4)
					if loc_7 == 0 then
						break
					end
					FUNC_LIST[45](loc_6, loc_7, load_i32(memory_at_0, loc_5 + 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[45](loc_3, 12, 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, loc_4)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = (if loc_1 ~= 4 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[412] = --[[ _ZN61_$LT$std..io..stdio..StdoutLock$u20$as$u20$std..io..Write$GT$9write_all17h0b828e7f8ba01b39E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_1 = load_i32(memory_at_0, loc_1)
							if load_i32(memory_at_0, loc_1 + 8) ~= 0 then
								break
							end
							store_i32(memory_at_0, loc_1 + 8, 4294967295)
							FUNC_LIST[525](add_i32(loc_4, 8), 10, loc_2, loc_3)
							while true do
								if load_i32(memory_at_0, loc_4 + 8) ~= 0 then
									break
								end
								while true do
									while true do
										loc_5 = load_i32(memory_at_0, add_i32(loc_1, 20))
										if loc_5 ~= 0 then
											break
										end
										loc_5 = 0
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32_u8(memory_at_0, add_i32(add_i32(loc_5, load_i32(memory_at_0, loc_1 + 12)), 4294967295)) ~= 10 then
										break
									end
									loc_5 = 0
									store_i32(memory_at_0, loc_1 + 20, 0)
									store_i32_n8(memory_at_0, add_i32(loc_1, 24), 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if sub_i32(load_i32(memory_at_0, add_i32(loc_1, 16)), loc_5) > loc_3 then
									desired = 3
									break
								end
								FUNC_LIST[443](loc_0, add_i32(loc_1, 12), loc_2, loc_3)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = add_i32(load_i32(memory_at_0, loc_4 + 12), 1)
							if loc_3 < loc_5 then
								desired = 4
								break
							end
							loc_6 = load_i32(memory_at_0, add_i32(loc_1, 20))
							if loc_6 == 0 then
								desired = 2
								break
							end
							while true do
								while true do
									while true do
										if sub_i32(load_i32(memory_at_0, add_i32(loc_1, 16)), loc_6) <= loc_5 then
											break
										end
										reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_1 + 12), loc_6), loc_2, loc_5)
										loc_6 = add_i32(loc_6, loc_5)
										store_i32(memory_at_0, loc_1 + 20, loc_6)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[443](add_i32(loc_4, 20), add_i32(loc_1, 12), loc_2, loc_5)
									loc_6 = load_i32_u8(memory_at_0, loc_4 + 20)
									if loc_6 ~= 4 then
										desired = 6
										break
									end
									loc_6 = load_i32(memory_at_0, loc_1 + 20)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_6 == 0 then
									desired = 2
									break
								end
								store_i32(memory_at_0, loc_1 + 20, 0)
								store_i32_n8(memory_at_0, add_i32(loc_1, 24), 0)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_0 + 1, load_i32(memory_at_0, loc_4 + 21))
							store_i32(memory_at_0, add_i32(loc_0, 4), load_i32(memory_at_0, add_i32(add_i32(loc_4, 20), 4)))
							store_i32_n8(memory_at_0, loc_0, loc_6)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[505](1061140, 16, add_i32(loc_4, 31), 1061156, 1061216)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[496](1060025, 35, 1060336)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_1 + 12), loc_5), loc_2, loc_3)
				store_i32_n8(memory_at_0, loc_0, 4)
				store_i32(memory_at_0, loc_1 + 20, add_i32(loc_5, loc_3))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = add_i32(loc_2, loc_5)
			while true do
				loc_3 = sub_i32(loc_3, loc_5)
				if load_i32(memory_at_0, add_i32(loc_1, 16)) > loc_3 then
					break
				end
				FUNC_LIST[443](loc_0, add_i32(loc_1, 12), loc_2, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[538](load_i32(memory_at_0, loc_1 + 12), loc_2, loc_3)
			store_i32_n8(memory_at_0, loc_0, 4)
			store_i32(memory_at_0, loc_1 + 20, loc_3)
			break
		end
		store_i32(memory_at_0, loc_1 + 8, add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[413] = --[[ _ZN4core3fmt5Write10write_char17h97004ebea11d67b3E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, 0)
		while true do
			while true do
				while true do
					while true do
						if loc_1 < 128 then
							break
						end
						if loc_1 < 2048 then
							desired = 3
							break
						end
						if loc_1 >= 65536 then
							desired = 2
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(loc_1, 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 12), 224))
						store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
						loc_3 = 3
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_2 + 12, loc_1)
					loc_3 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 6), 192))
				loc_3 = 2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_2 + 15, bor_i32(band_i32(loc_1, 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
			store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(band_i32(shr_u32(loc_1, 18), 7), 240))
			loc_3 = 4
			break
		end
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 8)
			loc_0 = load_i32(memory_at_0, loc_1 + 8)
			if sub_i32(load_i32(memory_at_0, loc_1 + 4), loc_0) >= loc_3 then
				break
			end
			FUNC_LIST[414](loc_1, loc_0, loc_3)
			loc_0 = load_i32(memory_at_0, loc_1 + 8)
			break
		end
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_1), loc_0), add_i32(loc_2, 12), loc_3)
		store_i32(memory_at_0, loc_1 + 8, add_i32(loc_0, loc_3))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[414] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h6017fb8502de68baE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_2 = add_i32(loc_1, loc_2)
				if loc_2 < loc_1 then
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0 + 4)
				loc_4 = shl_i32(loc_1, 1)
				loc_2 = (if loc_4 > loc_2 then loc_4 else loc_2)
				loc_2 = (if loc_2 > 8 then loc_2 else 8)
				loc_4 = shr_u32(bxor_i32(loc_2, 4294967295), 31)
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						store_i32(memory_at_0, loc_3 + 28, loc_1)
						store_i32(memory_at_0, loc_3 + 24, 1)
						store_i32(memory_at_0, loc_3 + 20, load_i32(memory_at_0, loc_0))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_3 + 24, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[436](add_i32(loc_3, 8), loc_4, loc_2, add_i32(loc_3, 20))
				loc_1 = load_i32(memory_at_0, loc_3 + 12)
				while true do
					if load_i32(memory_at_0, loc_3 + 8) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_2)
					store_i32(memory_at_0, loc_0, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 == 2147483649 then
					desired = 1
					break
				end
				if loc_1 == 0 then
					break
				end
				FUNC_LIST[480](loc_1, load_i32(memory_at_0, add_i32(loc_3, 16)))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[415] = --[[ _ZN4core3fmt5Write9write_fmt17h1c7861f8e64ffbc8E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_0)
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1059840, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[416] = --[[ _ZN4core3fmt5Write9write_fmt17he78770a5f22f604eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_0)
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1059864, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[417] = --[[ _ZN4core3fmt9Arguments6new_v117h9450010d6d2e4bd3E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if loc_2 < loc_4 then
				break
			end
			if add_i32(loc_4, 1) < loc_2 then
				break
			end
			store_i32(memory_at_0, loc_0 + 16, 0)
			store_i32(memory_at_0, loc_0 + 4, loc_2)
			store_i32(memory_at_0, loc_0, loc_1)
			store_i32(memory_at_0, loc_0 + 8, loc_3)
			store_i32(memory_at_0, add_i32(loc_0, 12), loc_4)
			GLOBAL_LIST[0].value = add_i32(loc_5, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_5, 20), i64_ZERO)
		store_i32(memory_at_0, loc_5 + 12, 1)
		store_i32(memory_at_0, loc_5 + 8, 1059924)
		store_i32(memory_at_0, loc_5 + 16, 1059932)
		FUNC_LIST[491](add_i32(loc_5, 8), 1060008)
		error("out of code bounds")
	end
end
FUNC_LIST[418] = --[[ _ZN4core3ptr100drop_in_place$LT$$RF$mut$u20$std..io..Write..write_fmt..Adapter$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$17hf678cb405024d47eE ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[419] = --[[ _ZN3std9panicking11panic_count17is_zero_slow_path17h8caa1b4aecc0b66aE ]] function()
	local reg_0
	while true do
		reg_0 = (if load_i32(memory_at_0, 0 + 1065376) == 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[420] = --[[ _ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h715ff0344ec55d55E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[421] = --[[ _ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h9b5226d8d3b22061E ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[45](load_i32(memory_at_0, loc_0), loc_1, 1)
			break
		end
		break
	end
end
FUNC_LIST[422] = --[[ _ZN4core3ptr70drop_in_place$LT$std..panicking..begin_panic_handler..PanicPayload$GT$17h88af536992238a73E ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			loc_0 = load_i32(memory_at_0, add_i32(loc_0, 8))
			if loc_0 == 0 then
				break
			end
			FUNC_LIST[45](loc_1, loc_0, 1)
			break
		end
		break
	end
end
FUNC_LIST[423] = --[[ _ZN4core3ptr88drop_in_place$LT$std..io..Write..write_fmt..Adapter$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$17hdce6c7cf7c30651dE ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		loc_1 = load_i32(memory_at_0, loc_0 + 4)
		while true do
			while true do
				loc_0 = load_i32_u8(memory_at_0, loc_0)
				if loc_0 > 4 then
					break
				end
				if loc_0 ~= 3 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1)
			loc_0 = load_i32(memory_at_0, add_i32(loc_1, 4))
			TABLE_LIST[0].data[load_i32(memory_at_0, loc_0)](loc_2)
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 4)
				if loc_3 == 0 then
					break
				end
				FUNC_LIST[45](loc_2, loc_3, load_i32(memory_at_0, loc_0 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[45](loc_1, 12, 4)
			break
		end
		break
	end
end
FUNC_LIST[424] = --[[ _ZN4core9panicking13assert_failed17h3a227afe76784b5cE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, 1060024)
		store_i32(memory_at_0, loc_2 + 8, loc_0)
		FUNC_LIST[513](0, add_i32(loc_2, 8), 1060060, add_i32(loc_2, 12), 1060060, loc_1, 1061468)
		error("out of code bounds")
	end
end
FUNC_LIST[425] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h4ed7674a125a9cecE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[413](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[426] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h78dce20d10ca8342E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		loc_0 = load_i32(memory_at_0, loc_0)
		while true do
			while true do
				while true do
					while true do
						if loc_1 < 128 then
							break
						end
						store_i32(memory_at_0, loc_2 + 12, 0)
						if loc_1 < 2048 then
							desired = 3
							break
						end
						while true do
							if loc_1 >= 65536 then
								break
							end
							store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(loc_1, 63), 128))
							store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 12), 224))
							store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
							loc_1 = 3
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 15, bor_i32(band_i32(loc_1, 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(band_i32(shr_u32(loc_1, 18), 7), 240))
						loc_1 = 4
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
							break
						end
						FUNC_LIST[427](loc_0, loc_3)
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, 1))
					store_i32_n8(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 6), 192))
				loc_1 = 2
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 8)
				if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_1 then
					break
				end
				FUNC_LIST[414](loc_0, loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), add_i32(loc_2, 12), loc_1)
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_1))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[427] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17he5d9cee73f2589baE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				loc_1 = add_i32(loc_1, 1)
				if loc_1 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0 + 4)
				loc_4 = shl_i32(loc_3, 1)
				loc_1 = (if loc_4 > loc_1 then loc_4 else loc_1)
				loc_1 = (if loc_1 > 8 then loc_1 else 8)
				loc_4 = shr_u32(bxor_i32(loc_1, 4294967295), 31)
				while true do
					while true do
						if loc_3 == 0 then
							break
						end
						store_i32(memory_at_0, loc_2 + 28, loc_3)
						store_i32(memory_at_0, loc_2 + 24, 1)
						store_i32(memory_at_0, loc_2 + 20, load_i32(memory_at_0, loc_0))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_2 + 24, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[436](add_i32(loc_2, 8), loc_4, loc_1, add_i32(loc_2, 20))
				loc_3 = load_i32(memory_at_0, loc_2 + 12)
				while true do
					if load_i32(memory_at_0, loc_2 + 8) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 2147483649 then
					desired = 1
					break
				end
				if loc_3 == 0 then
					break
				end
				FUNC_LIST[480](loc_3, load_i32(memory_at_0, add_i32(loc_2, 16)))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		break
	end
end
FUNC_LIST[428] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hcb957a699065ff01E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[411](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[429] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h05b1087ade9a304bE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_0))
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1059840, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[430] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h0cf7893c8a19c6e5E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_0))
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1059888, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[431] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17haaad159b30cd3e02E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_0))
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1059864, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[432] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h029b6485cf6f222eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_0 = load_i32(memory_at_0, loc_0)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_2 then
				break
			end
			FUNC_LIST[414](loc_0, loc_3, loc_2)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[433] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h61cae472530f460dE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 8)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_2 then
				break
			end
			FUNC_LIST[414](loc_0, loc_3, loc_2)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[434] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h811beaf33ac51197E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_0 = load_i32(memory_at_0, loc_0)
		FUNC_LIST[412](add_i32(loc_3, 8), load_i32(memory_at_0, loc_0 + 8), loc_1, loc_2)
		while true do
			loc_2 = load_i32_u8(memory_at_0, loc_3 + 8)
			if loc_2 == 4 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 4)
			loc_5 = load_i64(memory_at_0, loc_3 + 8)
			while true do
				while true do
					loc_1 = load_i32_u8(memory_at_0, loc_0)
					if loc_1 > 4 then
						break
					end
					if loc_1 ~= 3 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_4)
				loc_1 = load_i32(memory_at_0, add_i32(loc_4, 4))
				TABLE_LIST[0].data[load_i32(memory_at_0, loc_1)](loc_6)
				while true do
					loc_7 = load_i32(memory_at_0, loc_1 + 4)
					if loc_7 == 0 then
						break
					end
					FUNC_LIST[45](loc_6, loc_7, load_i32(memory_at_0, loc_1 + 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[45](loc_4, 12, 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, loc_5)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = (if loc_2 ~= 4 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[435] = --[[ _ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17hff410dc07f1ae7e1E ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_0 = load_i32(memory_at_0, loc_0)
			loc_1 = load_i32(memory_at_0, add_i32(loc_0, 16))
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[45](load_i32(memory_at_0, add_i32(loc_0, 12)), loc_1, 1)
			break
		end
		while true do
			if loc_0 == 4294967295 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, 4294967295))
			if loc_1 ~= 1 then
				break
			end
			FUNC_LIST[45](loc_0, 24, 4)
			break
		end
		break
	end
end
FUNC_LIST[436] = --[[ _ZN5alloc7raw_vec11finish_grow17h51b41eb3dd42bae2E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if loc_1 == 0 then
						break
					end
					if le_i32(loc_2, 4294967295) then
						desired = 2
						break
					end
					while true do
						while true do
							while true do
								if load_i32(memory_at_0, loc_3 + 4) == 0 then
									break
								end
								while true do
									loc_4 = load_i32(memory_at_0, add_i32(loc_3, 8))
									if loc_4 ~= 0 then
										break
									end
									while true do
										if loc_2 ~= 0 then
											break
										end
										loc_3 = loc_1
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[47](load_i32(memory_at_0, loc_3), loc_4, loc_1, loc_2)
								loc_3 = reg_0
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									break
								end
								loc_3 = loc_1
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[44](loc_2, loc_1)
						loc_3 = reg_0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_3 == 0 then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_3)
						store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
						store_i32(memory_at_0, loc_0, 0)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, 0)
				store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 4, 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0, 1)
		break
	end
end
FUNC_LIST[437] = --[[ _ZN60_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$3fmt17ha8b4f08181843953E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[523](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 8), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[438] = --[[ _ZN3std3sys4wasm4once4Once4call17ha5ec4231fe8ede86E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 2, 6, 1, }
										end)()
									end
									temp = br_map[1][load_i32_u8(memory_at_0, 0 + 1065302)] or 0
									if temp < 2 then
										if temp < 1 then
											break
										else
											desired = 6
											break
										end
									elseif temp > 2 then
										desired = 1
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, 0 + 1065302, 2)
								loc_2 = load_i32_u8(memory_at_0, loc_0)
								store_i32_n8(memory_at_0, loc_0, 0)
								if loc_2 == 0 then
									desired = 4
									break
								end
								store_i32_n8(memory_at_0, loc_1 + 31, 0)
								while true do
									while true do
										if load_i32_u8(memory_at_0, 0 + 1065336) == 3 then
											break
										end
										FUNC_LIST[452](add_i32(loc_1, 31))
										if load_i32_u8(memory_at_0, loc_1 + 31) ~= 0 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										while true do
											if load_i32(memory_at_0, 0 + 1065304) == 1065392 then
												break
											end
											loc_2 = load_i32_u8(memory_at_0, 0 + 1065332)
											loc_0 = 1
											store_i32_n8(memory_at_0, 0 + 1065332, 1)
											if loc_2 ~= 0 then
												desired = 7
												break
											end
											store_i32(memory_at_0, 0 + 1065304, 1065392)
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_0 = add_i32(load_i32(memory_at_0, 0 + 1065308), 1)
										if loc_0 == 0 then
											desired = 3
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 0
									store_i32(memory_at_0, 0 + 1065308, loc_0)
									if load_i32(memory_at_0, 0 + 1065312) ~= 0 then
										desired = 2
										break
									end
									store_i32(memory_at_0, 0 + 1065312, 4294967295)
									while true do
										loc_3 = load_i32(memory_at_0, 0 + 1065320)
										if loc_3 == 0 then
											break
										end
										FUNC_LIST[45](load_i32(memory_at_0, 0 + 1065316), loc_3, 1)
										loc_2 = add_i32(load_i32(memory_at_0, 0 + 1065312), 1)
										loc_0 = load_i32(memory_at_0, 0 + 1065308)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i64(memory_at_0, 0 + 1065320, i64_ZERO)
									store_i32(memory_at_0, 0 + 1065316, 1)
									store_i32(memory_at_0, 0 + 1065312, loc_2)
									loc_0 = add_i32(loc_0, 4294967295)
									store_i32(memory_at_0, 0 + 1065308, loc_0)
									store_i32_n8(memory_at_0, 0 + 1065328, 0)
									if loc_0 ~= 0 then
										break
									end
									store_i32_n8(memory_at_0, 0 + 1065332, 0)
									store_i32(memory_at_0, 0 + 1065304, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, 0 + 1065302, 3)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							GLOBAL_LIST[0].value = add_i32(loc_1, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, add_i32(loc_1, 16), i64_ZERO)
						store_i32(memory_at_0, loc_1 + 8, 1)
						store_i32(memory_at_0, loc_1 + 4, 1062088)
						store_i32(memory_at_0, loc_1 + 12, 1059932)
						FUNC_LIST[491](add_i32(loc_1, 4), 1060144)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[496](1060076, 43, 1061512)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[506](1061560, 38, 1061632)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[505](1061140, 16, add_i32(loc_1, 4), 1061156, 1061200)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_1, 16), i64_ZERO)
		store_i32(memory_at_0, loc_1 + 8, 1)
		store_i32(memory_at_0, loc_1 + 4, 1062152)
		store_i32(memory_at_0, loc_1 + 12, 1059932)
		FUNC_LIST[491](add_i32(loc_1, 4), 1060144)
		error("out of code bounds")
	end
end
FUNC_LIST[439] = --[[ _ZN3std2rt19lang_start_internal17h6a11b75c13b1dd38E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[484](add_i32(loc_5, 16), 1060119, 4)
		while true do
			if load_i32(memory_at_0, loc_5 + 16) ~= 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, add_i32(add_i32(loc_5, 16), 8))
			loc_7 = load_i32(memory_at_0, loc_5 + 20)
			FUNC_LIST[487](add_i32(loc_5, 8), 8, 16)
			loc_8 = load_i32(memory_at_0, loc_5 + 8)
			while true do
				while true do
					loc_9 = load_i32(memory_at_0, loc_5 + 12)
					if loc_9 ~= 0 then
						break
					end
					loc_10 = loc_8
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[44](loc_9, loc_8)
				loc_10 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						if loc_10 == 0 then
							break
						end
						store_i64(memory_at_0, loc_10, i64_from_u32(1, 1))
						store_i32(memory_at_0, loc_10 + 20, loc_6)
						store_i32(memory_at_0, add_i32(loc_10, 16), loc_7)
						loc_11 = load_i64(memory_at_0, 0 + 1065368)
						while true do
							loc_12 = add_i64(loc_11, i64_ONE)
							if eq_i64(loc_12, i64_ZERO) then
								desired = 3
								break
							end
							loc_13 = load_i64(memory_at_0, 0 + 1065368)
							loc_8 = (if eq_i64(loc_13, loc_11) then 1 else 0)
							store_i64(memory_at_0, 0 + 1065368, (if loc_8 ~= 0 then loc_12 else loc_13))
							loc_11 = loc_13
							if loc_8 == 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, loc_10 + 8, loc_12)
						if load_i32(memory_at_0, 0 + 1065384) ~= 0 then
							desired = 2
							break
						end
						store_i32(memory_at_0, 0 + 1065384, 4294967295)
						if load_i32(memory_at_0, 0 + 1065388) ~= 0 then
							desired = 1
							break
						end
						store_i32(memory_at_0, 0 + 1065388, loc_10)
						store_i32(memory_at_0, 0 + 1065384, 0)
						reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, add_i32(loc_1, 20))](loc_0)
						loc_8 = reg_0
						while true do
							if load_i32_u8(memory_at_0, 0 + 1065302) == 3 then
								break
							end
							store_i32_n8(memory_at_0, loc_5 + 16, 1)
							FUNC_LIST[438](add_i32(loc_5, 16))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = add_i32(loc_5, 32)
						reg_0 = loc_8
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[480](loc_8, loc_9)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[440]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[505](1061140, 16, add_i32(loc_5, 16), 1061156, 1061692)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[440] = --[[ _ZN3std6thread8ThreadId3new9exhausted17hf410f5e772a67655E ]] function()
	local loc_0 = 0
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_0
		store_i64(memory_at_0, add_i32(loc_0, 20), i64_ZERO)
		store_i32(memory_at_0, loc_0 + 12, 1)
		store_i32(memory_at_0, loc_0 + 8, 1060256)
		store_i32(memory_at_0, loc_0 + 16, 1059932)
		FUNC_LIST[491](add_i32(loc_0, 8), 1060264)
		error("out of code bounds")
	end
end
FUNC_LIST[441] = --[[ _ZN68_$LT$std..thread..local..AccessError$u20$as$u20$core..fmt..Debug$GT$3fmt17h9900cf13f07d1fbfE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[521](add_i32(loc_2, 8), loc_1, 1060160, 11)
		reg_0 = FUNC_LIST[516](add_i32(loc_2, 8))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[442] = --[[ _ZN60_$LT$std..io..error..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h13c1ee245e9bfdb8E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, 3, }
									end)()
								end
								temp = br_map[1][load_i32_u8(memory_at_0, loc_0)] or 0
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_0 + 4))
							reg_0 = FUNC_LIST[44](20, 1)
							loc_0 = reg_0
							if loc_0 == 0 then
								desired = 1
								break
							end
							store_i32(memory_at_0, add_i32(loc_0, 16), load_i32(memory_at_0, 0 + 1062040))
							store_i64(memory_at_0, add_i32(loc_0, 8), load_i64(memory_at_0, 0 + 1062032))
							store_i64(memory_at_0, loc_0, load_i64(memory_at_0, 0 + 1062024))
							store_i64(memory_at_0, loc_2 + 16, i64_from_u32(20, 20))
							store_i32(memory_at_0, loc_2 + 12, loc_0)
							store_i64(memory_at_0, add_i32(add_i32(loc_2, 40), 12), i64_from_u32(2, 0))
							store_i32(memory_at_0, add_i32(add_i32(loc_2, 24), 12), 174)
							store_i32(memory_at_0, loc_2 + 44, 3)
							store_i32(memory_at_0, loc_2 + 40, 1061116)
							store_i32(memory_at_0, loc_2 + 28, 175)
							store_i32(memory_at_0, loc_2 + 48, add_i32(loc_2, 24))
							store_i32(memory_at_0, loc_2 + 32, add_i32(loc_2, 8))
							store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 12))
							reg_0 = FUNC_LIST[520](loc_1, add_i32(loc_2, 40))
							loc_0 = reg_0
							loc_1 = load_i32(memory_at_0, loc_2 + 16)
							if loc_1 == 0 then
								desired = 2
								break
							end
							FUNC_LIST[45](load_i32(memory_at_0, loc_2 + 12), loc_1, 1)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_0 = load_i32_u8(memory_at_0, loc_0 + 1)
						store_i64(memory_at_0, add_i32(loc_2, 52), i64_ONE)
						store_i32(memory_at_0, loc_2 + 44, 1)
						store_i32(memory_at_0, loc_2 + 40, 1060280)
						store_i32(memory_at_0, loc_2 + 16, 176)
						loc_0 = shl_i32(loc_0, 2)
						store_i32(memory_at_0, loc_2 + 28, load_i32(memory_at_0, add_i32(loc_0, 1062160)))
						store_i32(memory_at_0, loc_2 + 24, load_i32(memory_at_0, add_i32(loc_0, 1062324)))
						store_i32(memory_at_0, loc_2 + 48, add_i32(loc_2, 12))
						store_i32(memory_at_0, loc_2 + 12, add_i32(loc_2, 24))
						reg_0 = FUNC_LIST[520](loc_1, add_i32(loc_2, 40))
						loc_0 = reg_0
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 4)
					reg_0 = FUNC_LIST[523](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 4), loc_1)
					loc_0 = reg_0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = load_i32(memory_at_0, loc_0 + 4)
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 4) + 16)](load_i32(memory_at_0, loc_0), loc_1)
				loc_0 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_2, 64)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](1, 20)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[443] = --[[ _ZN3std2io8buffered9bufwriter18BufWriter$LT$W$GT$14write_all_cold17h84aa1e46cf6786d6E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			loc_5 = load_i32(memory_at_0, loc_1 + 8)
			if loc_5 == 0 then
				break
			end
			if sub_i32(loc_4, loc_5) >= loc_3 then
				break
			end
			loc_5 = 0
			store_i32(memory_at_0, loc_1 + 8, 0)
			store_i32_n8(memory_at_0, loc_1 + 12, 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_4 <= loc_3 then
				break
			end
			reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_1), loc_5), loc_2, loc_3)
			store_i32_n8(memory_at_0, loc_0, 4)
			store_i32(memory_at_0, loc_1 + 8, add_i32(loc_5, loc_3))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, i64_from_u32(4, 0))
		store_i32_n8(memory_at_0, loc_1 + 12, 0)
		break
	end
end
FUNC_LIST[444] = --[[ _ZN3std4sync9once_lock17OnceLock$LT$T$GT$10initialize17h9037a3af57346493E ]] function()
	local loc_0 = 0
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_0
		while true do
			if load_i32_u8(memory_at_0, 0 + 1065336) == 3 then
				break
			end
			store_i32(memory_at_0, loc_0 + 4, 1065304)
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_0, 15))
			FUNC_LIST[451](add_i32(loc_0, 4))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_0, 16)
		break
	end
end
FUNC_LIST[445] = --[[ _ZN61_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$9write_fmt17hf69cbf981ee5c47bE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						loc_1 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1))
						if load_i32(memory_at_0, loc_1) == 1065392 then
							break
						end
						loc_4 = load_i32_u8(memory_at_0, loc_1 + 28)
						store_i32_n8(memory_at_0, loc_1 + 28, 1)
						store_i32_n8(memory_at_0, loc_3 + 4, loc_4)
						if loc_4 ~= 0 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_1 + 4, 1)
						store_i32(memory_at_0, loc_1, 1065392)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = add_i32(load_i32(memory_at_0, loc_1 + 4), 1)
					if loc_4 == 0 then
						desired = 2
						break
					end
					store_i32(memory_at_0, loc_1 + 4, loc_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_3 + 4, loc_1)
				store_i32_n8(memory_at_0, loc_3 + 8, 4)
				store_i32(memory_at_0, loc_3 + 16, add_i32(loc_3, 4))
				while true do
					while true do
						reg_0 = FUNC_LIST[499](add_i32(loc_3, 8), 1061348, loc_2)
						if reg_0 == 0 then
							break
						end
						while true do
							if load_i32_u8(memory_at_0, loc_3 + 8) ~= 4 then
								break
							end
							store_i32(memory_at_0, loc_0 + 4, 1061336)
							store_i32_n8(memory_at_0, loc_0, 2)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3 + 8))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0, 4)
					loc_0 = load_i32(memory_at_0, loc_3 + 12)
					while true do
						loc_1 = load_i32_u8(memory_at_0, loc_3 + 8)
						if loc_1 > 4 then
							break
						end
						if loc_1 ~= 3 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0)
					loc_1 = load_i32(memory_at_0, add_i32(loc_0, 4))
					TABLE_LIST[0].data[load_i32(memory_at_0, loc_1)](loc_2)
					while true do
						loc_4 = load_i32(memory_at_0, loc_1 + 4)
						if loc_4 == 0 then
							break
						end
						FUNC_LIST[45](loc_2, loc_4, load_i32(memory_at_0, loc_1 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[45](loc_0, 12, 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = load_i32(memory_at_0, loc_3 + 4)
				loc_0 = add_i32(load_i32(memory_at_0, loc_1 + 4), 4294967295)
				store_i32(memory_at_0, loc_1 + 4, loc_0)
				while true do
					if loc_0 ~= 0 then
						break
					end
					store_i32_n8(memory_at_0, loc_1 + 28, 0)
					store_i32(memory_at_0, loc_1, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_3, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[506](1061560, 38, 1061632)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_3 + 20, i64_ZERO)
		store_i32(memory_at_0, loc_3 + 16, 1059932)
		store_i32(memory_at_0, loc_3 + 12, 1)
		store_i32(memory_at_0, loc_3 + 8, 1061404)
		FUNC_LIST[424](add_i32(loc_3, 4), add_i32(loc_3, 8))
		error("out of code bounds")
	end
end
FUNC_LIST[446] = --[[ _ZN3std2io5stdio31print_to_buffer_if_capture_used17h2dd2bc64c850e86eE ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = 0
		while true do
			while true do
				if load_i32_u8(memory_at_0, 0 + 1065303) == 0 then
					break
				end
				loc_2 = 0
				while true do
					if load_i32_u8(memory_at_0, 0 + 1065396) ~= 0 then
						break
					end
					store_i32_n8(memory_at_0, 0 + 1065396, 1)
					store_i32(memory_at_0, 0 + 1065400, 0)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_3 = load_i32(memory_at_0, 0 + 1065400)
				store_i32(memory_at_0, 0 + 1065400, 0)
				if loc_3 == 0 then
					break
				end
				loc_2 = load_i32_u8(memory_at_0, loc_3 + 8)
				loc_4 = 1
				store_i32_n8(memory_at_0, loc_3 + 8, 1)
				store_i32_n8(memory_at_0, loc_1 + 7, loc_2)
				if loc_2 ~= 0 then
					desired = 1
					break
				end
				while true do
					if band_i32(load_i32(memory_at_0, 0 + 1065360), 2147483647) == 0 then
						break
					end
					reg_0 = FUNC_LIST[419]()
					loc_4 = reg_0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_1 + 8, 4)
				store_i32(memory_at_0, loc_1 + 16, add_i32(loc_3, 12))
				reg_0 = FUNC_LIST[499](add_i32(loc_1, 8), 1061296, loc_0)
				loc_0 = reg_0
				loc_2 = load_i32_u8(memory_at_0, loc_1 + 8)
				while true do
					while true do
						if loc_0 == 0 then
							break
						end
						if loc_2 == 4 then
							desired = 3
							break
						end
						loc_0 = load_i32(memory_at_0, loc_1 + 12)
						while true do
							loc_2 = load_i32_u8(memory_at_0, loc_1 + 8)
							if loc_2 > 4 then
								break
							end
							if loc_2 ~= 3 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = load_i32(memory_at_0, loc_0)
						loc_2 = load_i32(memory_at_0, add_i32(loc_0, 4))
						TABLE_LIST[0].data[load_i32(memory_at_0, loc_2)](loc_5)
						while true do
							loc_6 = load_i32(memory_at_0, loc_2 + 4)
							if loc_6 == 0 then
								break
							end
							FUNC_LIST[45](loc_5, loc_6, load_i32(memory_at_0, loc_2 + 8))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[45](loc_0, 12, 4)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = load_i32(memory_at_0, loc_1 + 12)
					while true do
						if loc_2 > 4 then
							break
						end
						if loc_2 ~= 3 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, add_i32(loc_0, 4))
					TABLE_LIST[0].data[load_i32(memory_at_0, loc_2)](loc_5)
					while true do
						loc_6 = load_i32(memory_at_0, loc_2 + 4)
						if loc_6 == 0 then
							break
						end
						FUNC_LIST[45](loc_5, loc_6, load_i32(memory_at_0, loc_2 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[45](loc_0, 12, 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_4 == 0 then
						break
					end
					if band_i32(load_i32(memory_at_0, 0 + 1065360), 2147483647) == 0 then
						break
					end
					reg_0 = FUNC_LIST[419]()
					if reg_0 ~= 0 then
						break
					end
					store_i32_n8(memory_at_0, loc_3 + 9, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_3 + 8, 0)
				loc_2 = load_i32(memory_at_0, 0 + 1065400)
				store_i32(memory_at_0, 0 + 1065400, loc_3)
				store_i32(memory_at_0, loc_1 + 8, loc_2)
				while true do
					if loc_2 == 0 then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_2)
					store_i32(memory_at_0, loc_2, add_i32(loc_3, 4294967295))
					if loc_3 ~= 1 then
						break
					end
					FUNC_LIST[435](add_i32(loc_1, 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_1, 32)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_1 + 20, i64_ZERO)
		store_i32(memory_at_0, loc_1 + 16, 1059932)
		store_i32(memory_at_0, loc_1 + 12, 1)
		store_i32(memory_at_0, loc_1 + 8, 1061404)
		FUNC_LIST[424](add_i32(loc_1, 7), add_i32(loc_1, 8))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[447] = --[[ _ZN3std2io5stdio6_print17hf6dd110eac5acc6dE ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_1
		store_i32(memory_at_0, loc_1 + 12, 6)
		store_i32(memory_at_0, loc_1 + 8, 1061288)
		while true do
			while true do
				reg_0 = FUNC_LIST[446](loc_0)
				if reg_0 ~= 0 then
					break
				end
				while true do
					if load_i32_u8(memory_at_0, 0 + 1065336) == 3 then
						break
					end
					FUNC_LIST[444]()
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_1 + 28, 1065304)
				store_i32(memory_at_0, loc_1 + 40, add_i32(loc_1, 28))
				FUNC_LIST[445](add_i32(loc_1, 16), add_i32(loc_1, 40), loc_0)
				if load_i32_u8(memory_at_0, loc_1 + 16) ~= 4 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_1, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, loc_1 + 16))
		store_i32(memory_at_0, add_i32(loc_1, 76), 177)
		store_i32(memory_at_0, loc_1 + 68, 176)
		store_i32(memory_at_0, loc_1 + 72, add_i32(loc_1, 32))
		store_i32(memory_at_0, loc_1 + 64, add_i32(loc_1, 8))
		FUNC_LIST[417](add_i32(loc_1, 40), 1061256, 2, add_i32(loc_1, 64), 2)
		FUNC_LIST[491](add_i32(loc_1, 40), 1061272)
		error("out of code bounds")
	end
end
FUNC_LIST[448] = --[[ _ZN80_$LT$std..io..Write..write_fmt..Adapter$LT$T$GT$$u20$as$u20$core..fmt..Write$GT$9write_str17h4a82826bc55c895dE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_0 = load_i32(memory_at_0, loc_0 + 8)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_2 then
				break
			end
			FUNC_LIST[414](loc_0, loc_3, loc_2)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[449] = --[[ _ZN80_$LT$std..io..Write..write_fmt..Adapter$LT$T$GT$$u20$as$u20$core..fmt..Write$GT$9write_str17h6f412baf4f60660cE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[412](add_i32(loc_3, 8), load_i32(memory_at_0, loc_0 + 8), loc_1, loc_2)
		while true do
			loc_2 = load_i32_u8(memory_at_0, loc_3 + 8)
			if loc_2 == 4 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 4)
			loc_5 = load_i64(memory_at_0, loc_3 + 8)
			while true do
				while true do
					loc_1 = load_i32_u8(memory_at_0, loc_0)
					if loc_1 > 4 then
						break
					end
					if loc_1 ~= 3 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_4)
				loc_1 = load_i32(memory_at_0, add_i32(loc_4, 4))
				TABLE_LIST[0].data[load_i32(memory_at_0, loc_1)](loc_6)
				while true do
					loc_7 = load_i32(memory_at_0, loc_1 + 4)
					if loc_7 == 0 then
						break
					end
					FUNC_LIST[45](loc_6, loc_7, load_i32(memory_at_0, loc_1 + 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[45](loc_4, 12, 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, loc_5)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = (if loc_2 ~= 4 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[450] = --[[ _ZN3std7process5abort17hf8475dce72c39edcE ]] function()
	while true do
		error("out of code bounds")
	end
end
FUNC_LIST[451] = --[[ _ZN3std3sys4wasm4once4Once4call17hd8f21d29fc28b795E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_2 = load_i32_u8(memory_at_0, 0 + 1065336)
							if loc_2 < 2 then
								break
							end
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 4, 1, }
								end)()
							end
							temp = br_map[1][add_i32(loc_2, 4294967294)] or 4
							if temp < 4 then
								desired = 4
								break
							else
								desired = 1
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, 0 + 1065336, 2)
						loc_2 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_0, 0)
						if loc_2 == 0 then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[44](1024, 1)
						loc_0 = reg_0
						if loc_0 == 0 then
							desired = 2
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 28, 0)
						store_i32_n8(memory_at_0, loc_2 + 24, 0)
						store_i64(memory_at_0, loc_2 + 16, i64_from_u32(1024, 0))
						store_i32(memory_at_0, loc_2 + 12, loc_0)
						store_i32(memory_at_0, loc_2 + 8, 0)
						store_i64(memory_at_0, loc_2, i64_ZERO)
						store_i32_n8(memory_at_0, 0 + 1065336, 3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_1, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[496](1060076, 43, 1061544)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[480](1, 1024)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_1, 20), i64_ZERO)
		store_i32(memory_at_0, loc_1 + 12, 1)
		store_i32(memory_at_0, loc_1 + 8, 1062152)
		store_i32(memory_at_0, loc_1 + 16, 1059932)
		FUNC_LIST[491](add_i32(loc_1, 8), 1061528)
		error("out of code bounds")
	end
end
FUNC_LIST[452] = --[[ _ZN3std4sync9once_lock17OnceLock$LT$T$GT$10initialize17he37fd3dd5eba9b30E ]] function(loc_0)
	local loc_1 = 0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			if load_i32_u8(memory_at_0, 0 + 1065336) == 3 then
				break
			end
			store_i32(memory_at_0, loc_1 + 4, 1065304)
			store_i32(memory_at_0, loc_1, loc_0)
			store_i32(memory_at_0, loc_1 + 8, add_i32(loc_1, 15))
			FUNC_LIST[453](loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		break
	end
end
FUNC_LIST[453] = --[[ _ZN3std3sys4wasm4once4Once4call17hd7f6fc4eabc0f828E ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				while true do
					while true do
						loc_2 = load_i32_u8(memory_at_0, 0 + 1065336)
						if loc_2 < 2 then
							break
						end
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 1, }
							end)()
						end
						temp = br_map[1][add_i32(loc_2, 4294967294)] or 3
						if temp < 3 then
							desired = 3
							break
						else
							desired = 1
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, 0 + 1065336, 2)
					loc_2 = load_i32(memory_at_0, loc_0)
					store_i32(memory_at_0, loc_0, 0)
					if loc_2 == 0 then
						desired = 2
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 4)
					store_i32_n8(memory_at_0, loc_2, 1)
					store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
					store_i64(memory_at_0, loc_0 + 8, i64_from_u32(0, 1))
					store_i64(memory_at_0, loc_0, i64_ZERO)
					store_i32_n8(memory_at_0, add_i32(loc_0, 24), 0)
					store_i32_n8(memory_at_0, loc_0 + 28, 0)
					store_i32_n8(memory_at_0, 0 + 1065336, 3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_1, 32)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[496](1060076, 43, 1061544)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_1, 20), i64_ZERO)
		store_i32(memory_at_0, loc_1 + 12, 1)
		store_i32(memory_at_0, loc_1 + 8, 1062152)
		store_i32(memory_at_0, loc_1 + 16, 1059932)
		FUNC_LIST[491](add_i32(loc_1, 8), 1061528)
		error("out of code bounds")
	end
end
FUNC_LIST[454] = --[[ _ZN3std10sys_common9backtrace26__rust_end_short_backtrace17hbb25dde7ffbe647eE ]] function(loc_0)
	while true do
		FUNC_LIST[455](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[455] = --[[ _ZN3std9panicking19begin_panic_handler28_$u7b$$u7b$closure$u7d$$u7d$17h14c68dcca3be03fdE ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = load_i32(memory_at_0, loc_0)
		loc_3 = load_i32(memory_at_0, add_i32(loc_2, 12))
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 1, }
							end)()
						end
						temp = br_map[1][load_i32(memory_at_0, loc_2 + 4)] or 3
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 1
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 ~= 0 then
						desired = 1
						break
					end
					loc_2 = 1059932
					loc_3 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 ~= 0 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_2)
				loc_3 = load_i32(memory_at_0, loc_2 + 4)
				loc_2 = load_i32(memory_at_0, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 4, loc_3)
			store_i32(memory_at_0, loc_1, loc_2)
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			reg_2 = FUNC_LIST[508](loc_2)
			reg_3 = load_i32(memory_at_0, loc_0 + 8)
			reg_4 = FUNC_LIST[510](loc_2)
			FUNC_LIST[463](loc_1, 1061968, reg_2, reg_3, reg_4)
			error("out of code bounds")
		end
		store_i32(memory_at_0, loc_1 + 4, 0)
		store_i32(memory_at_0, loc_1, loc_2)
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		reg_2 = FUNC_LIST[508](loc_2)
		reg_3 = load_i32(memory_at_0, loc_0 + 8)
		reg_4 = FUNC_LIST[510](loc_2)
		FUNC_LIST[463](loc_1, 1061988, reg_2, reg_3, reg_4)
		error("out of code bounds")
	end
end
FUNC_LIST[456] = --[[ _ZN3std5alloc24default_alloc_error_hook17h3dfc0cc21ba74572E ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		while true do
			if load_i32_u8(memory_at_0, 0 + 1065300) == 0 then
				break
			end
			store_i32(memory_at_0, loc_2 + 40, 32)
			store_i32(memory_at_0, loc_2 + 44, loc_1)
			store_i32(memory_at_0, loc_2 + 36, add_i32(loc_2, 44))
			FUNC_LIST[417](add_i32(loc_2, 12), 1061744, 2, add_i32(loc_2, 36), 1)
			FUNC_LIST[491](add_i32(loc_2, 12), 1061784)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[457] = --[[ _ZN3std9panicking8set_hook17h7f513349a30eca5dE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if band_i32(load_i32(memory_at_0, 0 + 1065360), 2147483647) == 0 then
									break
								end
								reg_0 = FUNC_LIST[419]()
								if reg_0 == 0 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = load_i32(memory_at_0, 0 + 1065344)
							store_i32(memory_at_0, 0 + 1065344, 4294967295)
							if loc_3 ~= 0 then
								desired = 1
								break
							end
							if band_i32(load_i32(memory_at_0, 0 + 1065360), 2147483647) ~= 0 then
								desired = 4
								break
							end
							loc_4 = load_i32(memory_at_0, 0 + 1065356)
							store_i32(memory_at_0, 0 + 1065356, loc_1)
							loc_3 = load_i32(memory_at_0, 0 + 1065352)
							store_i32(memory_at_0, 0 + 1065352, loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, add_i32(loc_2, 20), i64_ZERO)
						store_i32(memory_at_0, loc_2 + 12, 1)
						store_i32(memory_at_0, loc_2 + 8, 1061852)
						store_i32(memory_at_0, loc_2 + 16, 1059932)
						FUNC_LIST[491](add_i32(loc_2, 8), 1061888)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[419]()
					loc_5 = reg_0
					loc_4 = load_i32(memory_at_0, 0 + 1065356)
					store_i32(memory_at_0, 0 + 1065356, loc_1)
					loc_3 = load_i32(memory_at_0, 0 + 1065352)
					store_i32(memory_at_0, 0 + 1065352, loc_0)
					if loc_5 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if band_i32(load_i32(memory_at_0, 0 + 1065360), 2147483647) == 0 then
					break
				end
				reg_0 = FUNC_LIST[419]()
				if reg_0 ~= 0 then
					break
				end
				store_i32_n8(memory_at_0, 0 + 1065348, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, 0 + 1065344, 0)
			while true do
				if loc_3 == 0 then
					break
				end
				TABLE_LIST[0].data[load_i32(memory_at_0, loc_4)](loc_3)
				loc_1 = load_i32(memory_at_0, loc_4 + 4)
				if loc_1 == 0 then
					break
				end
				FUNC_LIST[45](loc_3, loc_1, load_i32(memory_at_0, loc_4 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_2, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
end
FUNC_LIST[458] = --[[ rust_begin_unwind ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				reg_0 = FUNC_LIST[509](loc_0)
				loc_2 = reg_0
				if loc_2 == 0 then
					break
				end
				reg_0 = FUNC_LIST[508](loc_0)
				loc_3 = reg_0
				if loc_3 == 0 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_1 + 12, loc_2)
				store_i32(memory_at_0, loc_1 + 8, loc_0)
				store_i32(memory_at_0, loc_1 + 4, loc_3)
				FUNC_LIST[454](add_i32(loc_1, 4))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[496](1060076, 43, 1061904)
			error("out of code bounds")
		end
		FUNC_LIST[496](1060076, 43, 1061920)
		error("out of code bounds")
	end
end
FUNC_LIST[459] = --[[ _ZN90_$LT$std..panicking..begin_panic_handler..PanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17h47588071e807f40eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_1, 4)
		while true do
			if load_i32(memory_at_0, loc_1 + 4) ~= 0 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_1)
			loc_5 = add_i32(add_i32(loc_2, 32), 8)
			store_i32(memory_at_0, loc_5, 0)
			store_i64(memory_at_0, loc_2 + 32, i64_ONE)
			store_i32(memory_at_0, loc_2 + 44, add_i32(loc_2, 32))
			reg_0 = FUNC_LIST[499](add_i32(loc_2, 44), 1059888, loc_4)
			loc_4 = load_i32(memory_at_0, loc_5)
			store_i32(memory_at_0, add_i32(add_i32(loc_2, 16), 8), loc_4)
			loc_6 = load_i64(memory_at_0, loc_2 + 32)
			store_i64(memory_at_0, loc_2 + 16, loc_6)
			store_i32(memory_at_0, add_i32(loc_3, 8), loc_4)
			store_i64(memory_at_0, loc_3, loc_6)
			break
		end
		loc_4 = add_i32(loc_2, 8)
		store_i32(memory_at_0, loc_4, load_i32(memory_at_0, add_i32(loc_3, 8)))
		store_i32(memory_at_0, add_i32(loc_1, 12), 0)
		loc_6 = load_i64(memory_at_0, loc_3)
		store_i64(memory_at_0, loc_1 + 4, i64_ONE)
		store_i64(memory_at_0, loc_2, loc_6)
		while true do
			reg_0 = FUNC_LIST[44](12, 4)
			loc_1 = reg_0
			if loc_1 ~= 0 then
				break
			end
			FUNC_LIST[480](4, 12)
			error("out of code bounds")
		end
		store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
		store_i32(memory_at_0, add_i32(loc_1, 8), load_i32(memory_at_0, loc_4))
		store_i32(memory_at_0, loc_0 + 4, 1061936)
		store_i32(memory_at_0, loc_0, loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[460] = --[[ _ZN90_$LT$std..panicking..begin_panic_handler..PanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$3get17h87d2fbb41b64516eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_1, 4)
		while true do
			if load_i32(memory_at_0, loc_1 + 4) ~= 0 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_1)
			loc_4 = add_i32(add_i32(loc_2, 16), 8)
			store_i32(memory_at_0, loc_4, 0)
			store_i64(memory_at_0, loc_2 + 16, i64_ONE)
			store_i32(memory_at_0, loc_2 + 28, add_i32(loc_2, 16))
			reg_0 = FUNC_LIST[499](add_i32(loc_2, 28), 1059888, loc_1)
			loc_1 = load_i32(memory_at_0, loc_4)
			store_i32(memory_at_0, add_i32(loc_2, 8), loc_1)
			loc_5 = load_i64(memory_at_0, loc_2 + 16)
			store_i64(memory_at_0, loc_2, loc_5)
			store_i32(memory_at_0, add_i32(loc_3, 8), loc_1)
			store_i64(memory_at_0, loc_3, loc_5)
			break
		end
		store_i32(memory_at_0, loc_0 + 4, 1061936)
		store_i32(memory_at_0, loc_0, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		break
	end
end
FUNC_LIST[461] = --[[ _ZN93_$LT$std..panicking..begin_panic_handler..StrPanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17h779662a47136a492E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 4)
		loc_3 = load_i32(memory_at_0, loc_1)
		while true do
			reg_0 = FUNC_LIST[44](8, 4)
			loc_1 = reg_0
			if loc_1 ~= 0 then
				break
			end
			FUNC_LIST[480](4, 8)
			error("out of code bounds")
		end
		store_i32(memory_at_0, loc_1 + 4, loc_2)
		store_i32(memory_at_0, loc_1, loc_3)
		store_i32(memory_at_0, loc_0 + 4, 1061952)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[462] = --[[ _ZN93_$LT$std..panicking..begin_panic_handler..StrPanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$3get17h0dc3f2155b02a2b6E ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 4, 1061952)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[463] = --[[ _ZN3std9panicking20rust_panic_with_hook17h7688395f5fa8337aE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_6 = load_i32(memory_at_0, 0 + 1065360)
		store_i32(memory_at_0, 0 + 1065360, add_i32(loc_6, 1))
		while true do
			while true do
				if lt_i32(loc_6, 0) then
					break
				end
				if band_i32(load_i32_u8(memory_at_0, 0 + 1065380), 255) ~= 0 then
					break
				end
				store_i32_n8(memory_at_0, 0 + 1065380, 1)
				store_i32(memory_at_0, 0 + 1065376, add_i32(load_i32(memory_at_0, 0 + 1065376), 1))
				store_i32(memory_at_0, loc_5 + 24, loc_2)
				store_i32(memory_at_0, loc_5 + 16, 1062008)
				store_i32(memory_at_0, loc_5 + 12, 1059932)
				store_i32_n8(memory_at_0, loc_5 + 28, loc_4)
				store_i32(memory_at_0, loc_5 + 20, loc_3)
				loc_6 = load_i32(memory_at_0, 0 + 1065344)
				if le_i32(loc_6, 4294967295) then
					break
				end
				store_i32(memory_at_0, 0 + 1065344, add_i32(loc_6, 1))
				while true do
					if load_i32(memory_at_0, 0 + 1065352) == 0 then
						break
					end
					TABLE_LIST[0].data[load_i32(memory_at_0, loc_1 + 16)](loc_5, loc_0)
					store_i64(memory_at_0, loc_5 + 12, load_i64(memory_at_0, loc_5))
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, 0 + 1065356) + 20)](load_i32(memory_at_0, 0 + 1065352), add_i32(loc_5, 12))
					loc_6 = add_i32(load_i32(memory_at_0, 0 + 1065344), 4294967295)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, 0 + 1065344, loc_6)
				store_i32_n8(memory_at_0, 0 + 1065380, 0)
				if loc_4 ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			error("out of code bounds")
		end
		FUNC_LIST[464](loc_0, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[464] = --[[ rust_panic ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[468](loc_0, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[465] = --[[ _ZN3std3sys4wasm7process8ExitCode6as_i3217h10e84ec8ca34439bE ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32_u8(memory_at_0, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[466] = --[[ _ZN3std3sys4wasm6common19hashmap_random_keys17h27a840b530e6125aE ]] function(loc_0)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(2, 0))
		store_i64(memory_at_0, loc_0, i64_ONE)
		break
	end
end
FUNC_LIST[467] = --[[ __rg_oom ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = load_i32(memory_at_0, 0 + 1065340)
		TABLE_LIST[0].data[(if loc_2 ~= 0 then loc_2 else 178)](loc_1, loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[468] = --[[ __rust_start_panic ]] function(loc_0, loc_1)
	while true do
		error("out of code bounds")
	end
	return reg_spill[1]
end
FUNC_LIST[469] = --[[ _ZN9hashbrown3raw11Fallibility17capacity_overflow17h05b57028538d46b6E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			if loc_1 ~= 0 then
				break
			end
			store_i32(memory_at_0, loc_0, 0)
			GLOBAL_LIST[0].value = add_i32(loc_2, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_2, 20), i64_ZERO)
		store_i32(memory_at_0, loc_2 + 12, 1)
		store_i32(memory_at_0, loc_2 + 8, 1062516)
		store_i32(memory_at_0, loc_2 + 16, 1062524)
		FUNC_LIST[491](add_i32(loc_2, 8), 1062608)
		error("out of code bounds")
	end
end
FUNC_LIST[470] = --[[ _ZN9hashbrown3raw11Fallibility9alloc_err17h436be0822956255dE ]] function(loc_0, loc_1, loc_2, loc_3)
	local desired
	while true do
		while true do
			if loc_1 ~= 0 then
				break
			end
			store_i32(memory_at_0, loc_0 + 4, loc_3)
			store_i32(memory_at_0, loc_0, loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](loc_2, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[471] = --[[ _ZN4core3fmt9Arguments6new_v117h9450010d6d2e4bd3E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if loc_2 < loc_4 then
				break
			end
			if add_i32(loc_4, 1) < loc_2 then
				break
			end
			store_i32(memory_at_0, loc_0 + 16, 0)
			store_i32(memory_at_0, loc_0 + 4, loc_2)
			store_i32(memory_at_0, loc_0, loc_1)
			store_i32(memory_at_0, loc_0 + 8, loc_3)
			store_i32(memory_at_0, add_i32(loc_0, 12), loc_4)
			GLOBAL_LIST[0].value = add_i32(loc_5, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_5, 20), i64_ZERO)
		store_i32(memory_at_0, loc_5 + 12, 1)
		store_i32(memory_at_0, loc_5 + 8, 1062736)
		store_i32(memory_at_0, loc_5 + 16, 1062744)
		FUNC_LIST[491](add_i32(loc_5, 8), 1062744)
		error("out of code bounds")
	end
end
FUNC_LIST[472] = --[[ _ZN4core3ptr26drop_in_place$LT$usize$GT$17h919045de0e0e4ff5E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[473] = --[[ _ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h0070ec303c35fc18E ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[474] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h640239affb8d63eaE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		FUNC_LIST[475](load_i32(memory_at_0, loc_0), loc_1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[475] = --[[ _ZN5alloc6string6String4push17h8754704890c6f1d5E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						if loc_1 < 128 then
							break
						end
						store_i32(memory_at_0, loc_2 + 12, 0)
						if loc_1 < 2048 then
							desired = 3
							break
						end
						while true do
							if loc_1 >= 65536 then
								break
							end
							store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(loc_1, 63), 128))
							store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 12), 224))
							store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
							loc_1 = 3
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 15, bor_i32(band_i32(loc_1, 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 14, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
						store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(band_i32(shr_u32(loc_1, 18), 7), 240))
						loc_1 = 4
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
							break
						end
						FUNC_LIST[482](loc_0, loc_3)
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, 1))
					store_i32_n8(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_2 + 13, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_2 + 12, bor_i32(shr_u32(loc_1, 6), 192))
				loc_1 = 2
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 8)
				if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_1 then
					break
				end
				FUNC_LIST[478](loc_0, loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), add_i32(loc_2, 12), loc_1)
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_1))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[476] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h29c4e539e6be76f2E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_0))
		reg_0 = FUNC_LIST[499](add_i32(loc_2, 12), 1062624, loc_1)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[477] = --[[ _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5eba4d199b199b57E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			loc_0 = load_i32(memory_at_0, loc_0)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3) >= loc_2 then
				break
			end
			FUNC_LIST[478](loc_0, loc_3, loc_2)
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[538](add_i32(load_i32(memory_at_0, loc_0), loc_3), loc_1, loc_2)
		store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_2))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[478] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17haa63e3cdd35f08e1E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_2 = add_i32(loc_1, loc_2)
				if loc_2 < loc_1 then
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0 + 4)
				loc_4 = shl_i32(loc_1, 1)
				loc_2 = (if loc_4 > loc_2 then loc_4 else loc_2)
				loc_2 = (if loc_2 > 8 then loc_2 else 8)
				loc_4 = shr_u32(bxor_i32(loc_2, 4294967295), 31)
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						store_i32(memory_at_0, loc_3 + 28, loc_1)
						store_i32(memory_at_0, loc_3 + 24, 1)
						store_i32(memory_at_0, loc_3 + 20, load_i32(memory_at_0, loc_0))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_3 + 24, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[479](add_i32(loc_3, 8), loc_4, loc_2, add_i32(loc_3, 20))
				loc_1 = load_i32(memory_at_0, loc_3 + 12)
				while true do
					if load_i32(memory_at_0, loc_3 + 8) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_2)
					store_i32(memory_at_0, loc_0, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 == 2147483649 then
					desired = 1
					break
				end
				if loc_1 == 0 then
					break
				end
				FUNC_LIST[480](loc_1, load_i32(memory_at_0, add_i32(loc_3, 16)))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[479] = --[[ _ZN5alloc7raw_vec11finish_grow17h1a19cf7be8340c5aE ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_1 == 0 then
					break
				end
				if le_i32(loc_2, 4294967295) then
					desired = 1
					break
				end
				while true do
					while true do
						while true do
							while true do
								if load_i32(memory_at_0, loc_3 + 4) == 0 then
									break
								end
								while true do
									loc_1 = load_i32(memory_at_0, add_i32(loc_3, 8))
									if loc_1 ~= 0 then
										break
									end
									while true do
										if loc_2 ~= 0 then
											break
										end
										loc_1 = 1
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[44](loc_2, 1)
									loc_1 = reg_0
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[47](load_i32(memory_at_0, loc_3), loc_1, 1, loc_2)
								loc_1 = reg_0
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									break
								end
								loc_1 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[44](loc_2, 1)
							loc_1 = reg_0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_1 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
					store_i32(memory_at_0, loc_0, 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, 1)
				store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
				store_i32(memory_at_0, loc_0, 1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 4, 0)
			store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
			store_i32(memory_at_0, loc_0, 1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, 0)
		store_i32(memory_at_0, loc_0, 1)
		break
	end
end
FUNC_LIST[480] = --[[ _ZN5alloc5alloc18handle_alloc_error17he47263915736a7d7E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[483](loc_0, loc_1)
		error("out of code bounds")
	end
end
FUNC_LIST[481] = --[[ _ZN5alloc7raw_vec17capacity_overflow17hcdd09121ea9299ccE ]] function()
	local loc_0 = 0
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_0
		store_i64(memory_at_0, add_i32(loc_0, 20), i64_ZERO)
		store_i32(memory_at_0, loc_0 + 12, 1)
		store_i32(memory_at_0, loc_0 + 8, 1062808)
		store_i32(memory_at_0, loc_0 + 16, 1062744)
		FUNC_LIST[491](add_i32(loc_0, 8), 1062816)
		error("out of code bounds")
	end
end
FUNC_LIST[482] = --[[ _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17ha963890564d6a6ffE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				loc_1 = add_i32(loc_1, 1)
				if loc_1 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0 + 4)
				loc_4 = shl_i32(loc_3, 1)
				loc_1 = (if loc_4 > loc_1 then loc_4 else loc_1)
				loc_1 = (if loc_1 > 8 then loc_1 else 8)
				loc_4 = shr_u32(bxor_i32(loc_1, 4294967295), 31)
				while true do
					while true do
						if loc_3 == 0 then
							break
						end
						store_i32(memory_at_0, loc_2 + 28, loc_3)
						store_i32(memory_at_0, loc_2 + 24, 1)
						store_i32(memory_at_0, loc_2 + 20, load_i32(memory_at_0, loc_0))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_2 + 24, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[479](add_i32(loc_2, 8), loc_4, loc_1, add_i32(loc_2, 20))
				loc_3 = load_i32(memory_at_0, loc_2 + 12)
				while true do
					if load_i32(memory_at_0, loc_2 + 8) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 2147483649 then
					desired = 1
					break
				end
				if loc_3 == 0 then
					break
				end
				FUNC_LIST[480](loc_3, load_i32(memory_at_0, add_i32(loc_2, 16)))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[481]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		break
	end
end
FUNC_LIST[483] = --[[ _ZN5alloc5alloc18handle_alloc_error8rt_error17hc78e3ed0c5256e75E ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[50](loc_1, loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[484] = --[[ _ZN72_$LT$$RF$str$u20$as$u20$alloc..ffi..c_str..CString..new..SpecNewImpl$GT$13spec_new_impl17h3068d8d2755bc99bE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_4 = add_i32(loc_2, 1)
							if loc_4 == 0 then
								break
							end
							if le_i32(loc_4, 4294967295) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[44](loc_4, 1)
							loc_5 = reg_0
							if loc_5 == 0 then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[538](loc_5, loc_1, loc_2)
							loc_6 = reg_0
							while true do
								if loc_2 < 8 then
									break
								end
								FUNC_LIST[524](add_i32(loc_3, 8), 0, loc_1, loc_2)
								loc_7 = load_i32(memory_at_0, loc_3 + 12)
								loc_8 = load_i32(memory_at_0, loc_3 + 8)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									break
								end
								loc_7 = 0
								loc_8 = 0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if load_i32_u8(memory_at_0, loc_1) ~= 0 then
									break
								end
								loc_8 = 1
								loc_7 = 0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_8 = 1
							if loc_2 == 1 then
								desired = 2
								break
							end
							while true do
								if load_i32_u8(memory_at_0, loc_1 + 1) ~= 0 then
									break
								end
								loc_7 = 1
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = 2
							if loc_2 == 2 then
								desired = 2
								break
							end
							if load_i32_u8(memory_at_0, loc_1 + 2) == 0 then
								desired = 1
								break
							end
							loc_7 = 3
							if loc_2 == 3 then
								desired = 2
								break
							end
							if load_i32_u8(memory_at_0, loc_1 + 3) == 0 then
								desired = 1
								break
							end
							loc_7 = 4
							if loc_2 == 4 then
								desired = 2
								break
							end
							if load_i32_u8(memory_at_0, loc_1 + 4) == 0 then
								desired = 1
								break
							end
							loc_7 = 5
							if loc_2 == 5 then
								desired = 2
								break
							end
							if load_i32_u8(memory_at_0, loc_1 + 5) == 0 then
								desired = 1
								break
							end
							loc_7 = loc_2
							loc_8 = 0
							if loc_2 == 6 then
								desired = 1
								break
							end
							loc_1 = load_i32_u8(memory_at_0, loc_1 + 6)
							loc_7 = (if loc_1 ~= 0 then loc_2 else 6)
							loc_8 = (if loc_1 == 0 then 1 else 0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[496](1062832, 43, 1062908)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[481]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[480](1, loc_4)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = loc_2
			loc_8 = 0
			break
		end
		while true do
			while true do
				if loc_8 ~= 0 then
					break
				end
				store_i32(memory_at_0, loc_3 + 28, loc_2)
				store_i32(memory_at_0, loc_3 + 24, loc_4)
				store_i32(memory_at_0, loc_3 + 20, loc_6)
				FUNC_LIST[485](loc_3, add_i32(loc_3, 20))
				store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_3))
				loc_5 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_2)
			store_i32(memory_at_0, loc_0 + 4, loc_4)
			store_i32(memory_at_0, loc_0 + 12, loc_7)
			break
		end
		store_i32(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[485] = --[[ _ZN5alloc3ffi5c_str7CString19_from_vec_unchecked17hb9e682765488672eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_3 = load_i32(memory_at_0, loc_1 + 4)
							loc_4 = load_i32(memory_at_0, loc_1 + 8)
							if loc_3 ~= loc_4 then
								break
							end
							loc_3 = add_i32(loc_4, 1)
							if loc_3 == 0 then
								desired = 3
								break
							end
							loc_5 = shr_u32(bxor_i32(loc_3, 4294967295), 31)
							while true do
								while true do
									if loc_4 == 0 then
										break
									end
									store_i32(memory_at_0, loc_2 + 28, loc_4)
									store_i32(memory_at_0, loc_2 + 24, 1)
									store_i32(memory_at_0, loc_2 + 20, load_i32(memory_at_0, loc_1))
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_2 + 24, 0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[479](add_i32(loc_2, 8), loc_5, loc_3, add_i32(loc_2, 20))
							loc_5 = load_i32(memory_at_0, loc_2 + 12)
							if load_i32(memory_at_0, loc_2 + 8) ~= 0 then
								desired = 4
								break
							end
							store_i32(memory_at_0, loc_1 + 4, loc_3)
							store_i32(memory_at_0, loc_1, loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_4 ~= loc_3 then
							desired = 1
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_5 == 2147483649 then
						desired = 2
						break
					end
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[480](loc_5, load_i32(memory_at_0, add_i32(loc_2, 16)))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[481]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[482](loc_1, loc_4)
			loc_3 = load_i32(memory_at_0, loc_1 + 4)
			loc_4 = load_i32(memory_at_0, loc_1 + 8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = add_i32(loc_4, 1)
		store_i32(memory_at_0, loc_1 + 8, loc_5)
		loc_1 = load_i32(memory_at_0, loc_1)
		store_i32_n8(memory_at_0, add_i32(loc_1, loc_4), 0)
		while true do
			while true do
				while true do
					if loc_3 > loc_5 then
						break
					end
					loc_4 = loc_1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_5 ~= 0 then
						break
					end
					loc_4 = 1
					FUNC_LIST[45](loc_1, loc_3, 1)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[47](loc_1, loc_3, 1, loc_5)
				loc_4 = reg_0
				if loc_4 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 4, loc_5)
			store_i32(memory_at_0, loc_0, loc_4)
			GLOBAL_LIST[0].value = add_i32(loc_2, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[480](1, loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[486] = --[[ _ZN5alloc3fmt6format12format_inner17hf73c5f00654d48fdE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_3 = load_i32(memory_at_0, loc_1 + 4)
								if loc_3 == 0 then
									break
								end
								loc_4 = load_i32(memory_at_0, loc_1)
								loc_5 = band_i32(loc_3, 3)
								while true do
									while true do
										if loc_3 >= 4 then
											break
										end
										loc_3 = 0
										loc_6 = 0
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_7 = add_i32(loc_4, 28)
									loc_8 = band_i32(loc_3, 4294967292)
									loc_3 = 0
									loc_6 = 0
									while true do
										loc_3 = add_i32(load_i32(memory_at_0, loc_7), add_i32(load_i32(memory_at_0, add_i32(loc_7, 4294967288)), add_i32(load_i32(memory_at_0, add_i32(loc_7, 4294967280)), add_i32(load_i32(memory_at_0, add_i32(loc_7, 4294967272)), loc_3))))
										loc_7 = add_i32(loc_7, 32)
										loc_6 = add_i32(loc_6, 4)
										if loc_8 ~= loc_6 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if loc_5 == 0 then
										break
									end
									loc_7 = add_i32(add_i32(shl_i32(loc_6, 3), loc_4), 4)
									while true do
										loc_3 = add_i32(load_i32(memory_at_0, loc_7), loc_3)
										loc_7 = add_i32(loc_7, 8)
										loc_5 = add_i32(loc_5, 4294967295)
										if loc_5 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if load_i32(memory_at_0, add_i32(loc_1, 12)) == 0 then
										break
									end
									if lt_i32(loc_3, 0) then
										desired = 6
										break
									end
									if band_i32((if loc_3 < 16 then 1 else 0), (if load_i32(memory_at_0, loc_4 + 4) == 0 then 1 else 0)) ~= 0 then
										desired = 6
										break
									end
									loc_3 = shl_i32(loc_3, 1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 ~= 0 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = 1
							loc_3 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if le_i32(loc_3, 4294967295) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[44](loc_3, 1)
						loc_7 = reg_0
						if loc_7 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_2 + 20, 0)
					store_i32(memory_at_0, loc_2 + 16, loc_3)
					store_i32(memory_at_0, loc_2 + 12, loc_7)
					store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 12))
					reg_0 = FUNC_LIST[499](add_i32(loc_2, 24), 1062624, loc_1)
					if reg_0 == 0 then
						desired = 1
						break
					end
					FUNC_LIST[505](1062924, 51, add_i32(loc_2, 31), 1062976, 1063016)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[481]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[480](1, loc_3)
			error("out of code bounds")
		end
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2 + 12))
		store_i32(memory_at_0, add_i32(loc_0, 8), load_i32(memory_at_0, add_i32(add_i32(loc_2, 12), 8)))
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		break
	end
end
FUNC_LIST[487] = --[[ _ZN5alloc4sync32arcinner_layout_for_value_layout17h4835b0a6ca0a47feE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = band_i32(add_i32(loc_1, 7), sub_i32(0, loc_1))
			if loc_4 < add_i32(loc_4, 4294967288) then
				break
			end
			loc_2 = add_i32(loc_4, loc_2)
			if loc_2 < loc_4 then
				break
			end
			loc_1 = (if loc_1 > 4 then loc_1 else 4)
			if loc_2 > sub_i32(2147483648, loc_1) then
				break
			end
			store_i32(memory_at_0, loc_0, loc_1)
			store_i32(memory_at_0, loc_0 + 4, band_i32(add_i32(add_i32(loc_1, loc_2), 4294967295), sub_i32(0, loc_1)))
			GLOBAL_LIST[0].value = add_i32(loc_3, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[505](1063032, 43, add_i32(loc_3, 15), 1063076, 1063120)
		error("out of code bounds")
	end
end
FUNC_LIST[488] = --[[ _ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove13assert_failed17hbcac463a2927d7c2E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 4, loc_1)
		store_i32(memory_at_0, loc_3, loc_0)
		store_i32(memory_at_0, add_i32(loc_3, 44), 32)
		store_i32(memory_at_0, loc_3 + 36, 32)
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 4))
		store_i32(memory_at_0, loc_3 + 32, loc_3)
		FUNC_LIST[471](add_i32(loc_3, 8), 1063180, 3, add_i32(loc_3, 32), 2)
		FUNC_LIST[491](add_i32(loc_3, 8), loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[489] = --[[ _ZN4core3ops8function6FnOnce9call_once17hf7224af7cbd503acE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		while true do
			continue
		end
		break
	end
	return reg_0
end
FUNC_LIST[490] = --[[ _ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h07e84c14d9b3365bE ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[491] = --[[ _ZN4core9panicking9panic_fmt17h2d6dc79a21ad0d6aE ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 24, loc_0)
		store_i32(memory_at_0, loc_2 + 16, 1063320)
		store_i32(memory_at_0, loc_2 + 12, 1063204)
		store_i32_n8(memory_at_0, loc_2 + 28, 1)
		store_i32(memory_at_0, loc_2 + 20, loc_1)
		FUNC_LIST[458](add_i32(loc_2, 12))
		error("out of code bounds")
	end
end
FUNC_LIST[492] = --[[ _ZN4core5slice5index26slice_start_index_len_fail17h32af1ebeed7467e4E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3, loc_0)
		store_i32(memory_at_0, loc_3 + 4, loc_1)
		store_i32(memory_at_0, add_i32(loc_3, 44), 32)
		store_i32(memory_at_0, loc_3 + 36, 32)
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 4))
		store_i32(memory_at_0, loc_3 + 32, loc_3)
		FUNC_LIST[498](add_i32(loc_3, 8), 1063952, 2, add_i32(loc_3, 32), 2)
		FUNC_LIST[491](add_i32(loc_3, 8), loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[493] = --[[ _ZN4core9panicking18panic_bounds_check17hb4a3d3f3c996c436E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 4, loc_1)
		store_i32(memory_at_0, loc_3, loc_0)
		store_i32(memory_at_0, add_i32(loc_3, 44), 32)
		store_i32(memory_at_0, loc_3 + 36, 32)
		store_i32(memory_at_0, loc_3 + 40, loc_3)
		store_i32(memory_at_0, loc_3 + 32, add_i32(loc_3, 4))
		FUNC_LIST[498](add_i32(loc_3, 8), 1063388, 2, add_i32(loc_3, 32), 2)
		FUNC_LIST[491](add_i32(loc_3, 8), loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[494] = --[[ _ZN4core5slice5index24slice_end_index_len_fail17h740a983cf6e43232E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3, loc_0)
		store_i32(memory_at_0, loc_3 + 4, loc_1)
		store_i32(memory_at_0, add_i32(loc_3, 44), 32)
		store_i32(memory_at_0, loc_3 + 36, 32)
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 4))
		store_i32(memory_at_0, loc_3 + 32, loc_3)
		FUNC_LIST[498](add_i32(loc_3, 8), 1063984, 2, add_i32(loc_3, 32), 2)
		FUNC_LIST[491](add_i32(loc_3, 8), loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[495] = --[[ _ZN4core3fmt9Formatter3pad17h9efc4204d66b7f57E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0)
			loc_4 = load_i32(memory_at_0, loc_0 + 8)
			if bor_i32(loc_3, loc_4) == 0 then
				break
			end
			while true do
				if loc_4 == 0 then
					break
				end
				loc_5 = add_i32(loc_1, loc_2)
				loc_6 = add_i32(load_i32(memory_at_0, add_i32(loc_0, 12)), 1)
				loc_7 = 0
				loc_8 = loc_1
				while true do
					while true do
						loc_4 = loc_8
						loc_6 = add_i32(loc_6, 4294967295)
						if loc_6 == 0 then
							desired = 3
							break
						end
						if loc_4 == loc_5 then
							desired = 2
							break
						end
						while true do
							while true do
								loc_9 = load_i32_i8(memory_at_0, loc_4)
								if le_i32(loc_9, 4294967295) then
									break
								end
								loc_8 = add_i32(loc_4, 1)
								loc_9 = band_i32(loc_9, 255)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_10 = band_i32(load_i32_u8(memory_at_0, loc_4 + 1), 63)
							loc_8 = band_i32(loc_9, 31)
							while true do
								if loc_9 > 4294967263 then
									break
								end
								loc_9 = bor_i32(shl_i32(loc_8, 6), loc_10)
								loc_8 = add_i32(loc_4, 2)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_10 = bor_i32(shl_i32(loc_10, 6), band_i32(load_i32_u8(memory_at_0, loc_4 + 2), 63))
							while true do
								if loc_9 >= 4294967280 then
									break
								end
								loc_9 = bor_i32(loc_10, shl_i32(loc_8, 12))
								loc_8 = add_i32(loc_4, 3)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_9 = bor_i32(bor_i32(shl_i32(loc_10, 6), band_i32(load_i32_u8(memory_at_0, loc_4 + 3), 63)), band_i32(shl_i32(loc_8, 18), 1835008))
							if loc_9 == 1114112 then
								desired = 2
								break
							end
							loc_8 = add_i32(loc_4, 4)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_7 = add_i32(sub_i32(loc_7, loc_4), loc_8)
						if loc_9 ~= 1114112 then
							continue
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_4 == loc_5 then
					break
				end
				while true do
					loc_8 = load_i32_i8(memory_at_0, loc_4)
					if gt_i32(loc_8, 4294967295) then
						break
					end
					if loc_8 < 4294967264 then
						break
					end
					if loc_8 < 4294967280 then
						break
					end
					if bor_i32(bor_i32(bor_i32(shl_i32(band_i32(load_i32_u8(memory_at_0, loc_4 + 2), 63), 6), shl_i32(band_i32(load_i32_u8(memory_at_0, loc_4 + 1), 63), 12)), band_i32(load_i32_u8(memory_at_0, loc_4 + 3), 63)), band_i32(shl_i32(band_i32(loc_8, 255), 18), 1835008)) == 1114112 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						if loc_7 == 0 then
							break
						end
						while true do
							if loc_7 < loc_2 then
								break
							end
							loc_4 = 0
							if loc_7 == loc_2 then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = 0
						if lt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_7)), 4294967232) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = loc_1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (if loc_4 ~= 0 then loc_7 else loc_2)
				loc_1 = (if loc_4 ~= 0 then loc_4 else loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_3 ~= 0 then
					break
				end
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_0, 24)) + 12)](load_i32(memory_at_0, loc_0 + 20), loc_1, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 4)
			while true do
				while true do
					if loc_2 < 16 then
						break
					end
					reg_0 = FUNC_LIST[518](loc_1, loc_2)
					loc_4 = reg_0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_2 ~= 0 then
						break
					end
					loc_4 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = band_i32(loc_2, 3)
				while true do
					while true do
						if loc_2 >= 4 then
							break
						end
						loc_4 = 0
						loc_9 = 0
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = band_i32(loc_2, 4294967292)
					loc_4 = 0
					loc_9 = 0
					while true do
						loc_8 = add_i32(loc_1, loc_9)
						loc_4 = add_i32(add_i32(add_i32(add_i32(loc_4, (if gt_i32(load_i32_i8(memory_at_0, loc_8), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_8, 1)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_8, 2)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_8, 3)), 4294967231) then 1 else 0))
						loc_9 = add_i32(loc_9, 4)
						if loc_7 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				loc_8 = add_i32(loc_1, loc_9)
				while true do
					loc_4 = add_i32(loc_4, (if gt_i32(load_i32_i8(memory_at_0, loc_8), 4294967231) then 1 else 0))
					loc_8 = add_i32(loc_8, 1)
					loc_6 = add_i32(loc_6, 4294967295)
					if loc_6 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if loc_5 <= loc_4 then
						break
					end
					loc_7 = sub_i32(loc_5, loc_4)
					loc_4 = 0
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 0, 1, 2, }
									end)()
								end
								temp = br_map[1][load_i32_u8(memory_at_0, loc_0 + 32)] or 2
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = loc_7
							loc_7 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = shr_u32(loc_7, 1)
						loc_7 = shr_u32(add_i32(loc_7, 1), 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = add_i32(loc_4, 1)
					loc_8 = load_i32(memory_at_0, add_i32(loc_0, 24))
					loc_6 = load_i32(memory_at_0, loc_0 + 16)
					loc_9 = load_i32(memory_at_0, loc_0 + 20)
					while true do
						loc_4 = add_i32(loc_4, 4294967295)
						if loc_4 == 0 then
							desired = 2
							break
						end
						reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_8 + 16)](loc_9, loc_6)
						if reg_0 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_0, 24)) + 12)](load_i32(memory_at_0, loc_0 + 20), loc_1, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 1
			while true do
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_8 + 12)](loc_9, loc_1, loc_2)
				if reg_0 ~= 0 then
					break
				end
				loc_4 = 0
				while true do
					while true do
						while true do
							if loc_7 ~= loc_4 then
								break
							end
							loc_4 = loc_7
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_4 = add_i32(loc_4, 1)
						reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_8 + 16)](loc_9, loc_6)
						if reg_0 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = add_i32(loc_4, 4294967295)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = (if loc_4 < loc_7 then 1 else 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_4
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_0, 24)) + 12)](load_i32(memory_at_0, loc_0 + 20), loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[496] = --[[ _ZN4core9panicking5panic17hb4d16e35d2f3a5d1E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, add_i32(loc_3, 12), i64_ZERO)
		store_i32(memory_at_0, loc_3 + 4, 1)
		store_i32(memory_at_0, loc_3 + 8, 1063204)
		store_i32(memory_at_0, loc_3 + 28, loc_1)
		store_i32(memory_at_0, loc_3 + 24, loc_0)
		store_i32(memory_at_0, loc_3, add_i32(loc_3, 24))
		FUNC_LIST[491](loc_3, loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[497] = --[[ _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hcc33bf26917682adE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[527](load_i64_u32(memory_at_0, loc_0), 1, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[498] = --[[ _ZN4core3fmt9Arguments6new_v117h9450010d6d2e4bd3E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if loc_2 < loc_4 then
				break
			end
			if add_i32(loc_4, 1) < loc_2 then
				break
			end
			store_i32(memory_at_0, loc_0 + 16, 0)
			store_i32(memory_at_0, loc_0 + 4, loc_2)
			store_i32(memory_at_0, loc_0, loc_1)
			store_i32(memory_at_0, loc_0 + 8, loc_3)
			store_i32(memory_at_0, add_i32(loc_0, 12), loc_4)
			GLOBAL_LIST[0].value = add_i32(loc_5, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, add_i32(loc_5, 20), i64_ZERO)
		store_i32(memory_at_0, loc_5 + 12, 1)
		store_i32(memory_at_0, loc_5 + 8, 1063216)
		store_i32(memory_at_0, loc_5 + 16, 1063204)
		FUNC_LIST[491](add_i32(loc_5, 8), 1063808)
		error("out of code bounds")
	end
end
FUNC_LIST[499] = --[[ _ZN4core3fmt5write17h5c9bb0d31578e97eE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, add_i32(loc_3, 36), loc_1)
		store_i32_n8(memory_at_0, loc_3 + 44, 3)
		store_i32(memory_at_0, loc_3 + 28, 32)
		loc_4 = 0
		store_i32(memory_at_0, loc_3 + 40, 0)
		store_i32(memory_at_0, loc_3 + 32, loc_0)
		store_i32(memory_at_0, loc_3 + 20, 0)
		store_i32(memory_at_0, loc_3 + 12, 0)
		while true do
			while true do
				while true do
					while true do
						loc_5 = load_i32(memory_at_0, loc_2 + 16)
						if loc_5 ~= 0 then
							break
						end
						loc_0 = load_i32(memory_at_0, add_i32(loc_2, 12))
						if loc_0 == 0 then
							desired = 3
							break
						end
						loc_1 = load_i32(memory_at_0, loc_2 + 8)
						loc_6 = shl_i32(loc_0, 3)
						loc_4 = add_i32(band_i32(add_i32(loc_0, 4294967295), 536870911), 1)
						loc_0 = load_i32(memory_at_0, loc_2)
						while true do
							while true do
								loc_7 = load_i32(memory_at_0, add_i32(loc_0, 4))
								if loc_7 == 0 then
									break
								end
								reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 36) + 12)](load_i32(memory_at_0, loc_3 + 32), load_i32(memory_at_0, loc_0), loc_7)
								if reg_0 ~= 0 then
									desired = 2
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, add_i32(loc_1, 4))](load_i32(memory_at_0, loc_1), add_i32(loc_3, 12))
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							loc_1 = add_i32(loc_1, 8)
							loc_0 = add_i32(loc_0, 8)
							loc_6 = add_i32(loc_6, 4294967288)
							if loc_6 ~= 0 then
								continue
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = load_i32(memory_at_0, add_i32(loc_2, 20))
					if loc_1 == 0 then
						break
					end
					loc_8 = shl_i32(loc_1, 5)
					loc_4 = add_i32(band_i32(add_i32(loc_1, 4294967295), 134217727), 1)
					loc_9 = load_i32(memory_at_0, loc_2 + 8)
					loc_0 = load_i32(memory_at_0, loc_2)
					loc_6 = 0
					while true do
						while true do
							loc_1 = load_i32(memory_at_0, add_i32(loc_0, 4))
							if loc_1 == 0 then
								break
							end
							reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 36) + 12)](load_i32(memory_at_0, loc_3 + 32), load_i32(memory_at_0, loc_0), loc_1)
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = add_i32(loc_5, loc_6)
						store_i32(memory_at_0, loc_3 + 28, load_i32(memory_at_0, add_i32(loc_1, 16)))
						store_i32_n8(memory_at_0, loc_3 + 44, load_i32_u8(memory_at_0, add_i32(loc_1, 28)))
						store_i32(memory_at_0, loc_3 + 40, load_i32(memory_at_0, add_i32(loc_1, 24)))
						loc_10 = load_i32(memory_at_0, add_i32(loc_1, 12))
						loc_11 = 0
						loc_7 = 0
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 1, 0, 2, }
										end)()
									end
									temp = br_map[1][load_i32(memory_at_0, add_i32(loc_1, 8))] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_12 = shl_i32(loc_10, 3)
								loc_7 = 0
								loc_12 = add_i32(loc_9, loc_12)
								if load_i32(memory_at_0, loc_12 + 4) ~= 214 then
									desired = 5
									break
								end
								loc_10 = load_i32(memory_at_0, load_i32(memory_at_0, loc_12))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						store_i32(memory_at_0, loc_3 + 16, loc_10)
						store_i32(memory_at_0, loc_3 + 12, loc_7)
						loc_7 = load_i32(memory_at_0, add_i32(loc_1, 4))
						while true do
							while true do
								while true do
									if not br_map[2] then
										br_map[2] = (function()
											return { [0] = 1, 0, 2, }
										end)()
									end
									temp = br_map[2][load_i32(memory_at_0, loc_1)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_10 = shl_i32(loc_7, 3)
								loc_10 = add_i32(loc_9, loc_10)
								if load_i32(memory_at_0, loc_10 + 4) ~= 214 then
									desired = 5
									break
								end
								loc_7 = load_i32(memory_at_0, load_i32(memory_at_0, loc_10))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						store_i32(memory_at_0, loc_3 + 24, loc_7)
						store_i32(memory_at_0, loc_3 + 20, loc_11)
						loc_1 = add_i32(loc_9, shl_i32(load_i32(memory_at_0, add_i32(loc_1, 20)), 3))
						reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_1 + 4)](load_i32(memory_at_0, loc_1), add_i32(loc_3, 12))
						if reg_0 ~= 0 then
							desired = 2
							break
						end
						loc_0 = add_i32(loc_0, 8)
						loc_6 = add_i32(loc_6, 32)
						if loc_8 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_4 >= load_i32(memory_at_0, loc_2 + 4) then
						break
					end
					loc_1 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(loc_4, 3))
					reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 36) + 12)](load_i32(memory_at_0, loc_3 + 32), load_i32(memory_at_0, loc_1), load_i32(memory_at_0, loc_1 + 4))
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 1
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[500] = --[[ _ZN4core3fmt9Formatter12pad_integral17h0414efee52d237f1E ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				if loc_1 == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 28)
				loc_1 = band_i32(loc_6, 1)
				loc_7 = (if loc_1 ~= 0 then 43 else 1114112)
				loc_8 = add_i32(loc_1, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = add_i32(loc_5, 1)
			loc_6 = load_i32(memory_at_0, loc_0 + 28)
			loc_7 = 45
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				if band_i32(loc_6, 4) ~= 0 then
					break
				end
				loc_2 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if loc_3 < 16 then
						break
					end
					reg_0 = FUNC_LIST[518](loc_2, loc_3)
					loc_1 = reg_0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_3 ~= 0 then
						break
					end
					loc_1 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = band_i32(loc_3, 3)
				while true do
					while true do
						if loc_3 >= 4 then
							break
						end
						loc_1 = 0
						loc_10 = 0
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_11 = band_i32(loc_3, 4294967292)
					loc_1 = 0
					loc_10 = 0
					while true do
						loc_12 = add_i32(loc_2, loc_10)
						loc_1 = add_i32(add_i32(add_i32(add_i32(loc_1, (if gt_i32(load_i32_i8(memory_at_0, loc_12), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_12, 1)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_12, 2)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_12, 3)), 4294967231) then 1 else 0))
						loc_10 = add_i32(loc_10, 4)
						if loc_11 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_9 == 0 then
					break
				end
				loc_12 = add_i32(loc_2, loc_10)
				while true do
					loc_1 = add_i32(loc_1, (if gt_i32(load_i32_i8(memory_at_0, loc_12), 4294967231) then 1 else 0))
					loc_12 = add_i32(loc_12, 1)
					loc_9 = add_i32(loc_9, 4294967295)
					if loc_9 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = add_i32(loc_1, loc_8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				if load_i32(memory_at_0, loc_0) ~= 0 then
					break
				end
				loc_1 = 1
				loc_12 = load_i32(memory_at_0, loc_0 + 20)
				loc_10 = load_i32(memory_at_0, loc_0 + 24)
				reg_0 = FUNC_LIST[519](loc_12, loc_10, loc_7, loc_2, loc_3)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_10 + 12)](loc_12, loc_4, loc_5)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_9 = load_i32(memory_at_0, loc_0 + 4)
				if loc_9 > loc_8 then
					break
				end
				loc_1 = 1
				loc_12 = load_i32(memory_at_0, loc_0 + 20)
				loc_10 = load_i32(memory_at_0, loc_0 + 24)
				reg_0 = FUNC_LIST[519](loc_12, loc_10, loc_7, loc_2, loc_3)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_10 + 12)](loc_12, loc_4, loc_5)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if band_i32(loc_6, 8) == 0 then
					break
				end
				loc_11 = load_i32(memory_at_0, loc_0 + 16)
				store_i32(memory_at_0, loc_0 + 16, 48)
				loc_6 = load_i32_u8(memory_at_0, loc_0 + 32)
				loc_1 = 1
				store_i32_n8(memory_at_0, loc_0 + 32, 1)
				loc_12 = load_i32(memory_at_0, loc_0 + 20)
				loc_10 = load_i32(memory_at_0, loc_0 + 24)
				reg_0 = FUNC_LIST[519](loc_12, loc_10, loc_7, loc_2, loc_3)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				loc_1 = add_i32(sub_i32(loc_9, loc_8), 1)
				while true do
					while true do
						loc_1 = add_i32(loc_1, 4294967295)
						if loc_1 == 0 then
							desired = 3
							break
						end
						reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_10 + 16)](loc_12, 48)
						if reg_0 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 1
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_10 + 12)](loc_12, loc_4, loc_5)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 32, loc_6)
				store_i32(memory_at_0, loc_0 + 16, loc_11)
				loc_1 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = sub_i32(loc_9, loc_8)
			while true do
				while true do
					while true do
						loc_1 = load_i32_u8(memory_at_0, loc_0 + 32)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 0, 1, 0, }
							end)()
						end
						temp = br_map[1][loc_1] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = loc_8
					loc_8 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = shr_u32(loc_8, 1)
				loc_8 = shr_u32(add_i32(loc_8, 1), 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = add_i32(loc_1, 1)
			loc_12 = load_i32(memory_at_0, add_i32(loc_0, 24))
			loc_9 = load_i32(memory_at_0, loc_0 + 16)
			loc_10 = load_i32(memory_at_0, loc_0 + 20)
			while true do
				while true do
					loc_1 = add_i32(loc_1, 4294967295)
					if loc_1 == 0 then
						desired = 2
						break
					end
					reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_12 + 16)](loc_10, loc_9)
					if reg_0 == 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 1
			reg_0 = FUNC_LIST[519](loc_10, loc_12, loc_7, loc_2, loc_3)
			if reg_0 ~= 0 then
				break
			end
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_12 + 12)](loc_10, loc_4, loc_5)
			if reg_0 ~= 0 then
				break
			end
			loc_1 = 0
			while true do
				while true do
					if loc_8 ~= loc_1 then
						break
					end
					reg_0 = (if loc_8 < loc_8 then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = add_i32(loc_1, 1)
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_12 + 16)](loc_10, loc_9)
				if reg_0 == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = (if add_i32(loc_1, 4294967295) < loc_8 then 1 else 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[501] = --[[ _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h636a7267e247c233E ]] function(loc_0, loc_1)
	while true do
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(1229464069, 3025884056))
		store_i64(memory_at_0, loc_0, i64_from_u32(482422035, 4015249626))
		break
	end
end
FUNC_LIST[502] = --[[ _ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0fdf220456b869bdE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_1, 24)) + 12)](load_i32(memory_at_0, loc_1 + 20), 1063251, 14)
		break
	end
	return reg_0
end
FUNC_LIST[503] = --[[ _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h12a5441ca5940b4bE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32_u16(memory_at_0, loc_0)
		loc_0 = 0
		while true do
			loc_4 = band_i32(loc_3, 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_0), 127), add_i32((if loc_4 < 10 then 48 else 87), loc_4))
			loc_0 = add_i32(loc_0, 4294967295)
			loc_4 = band_i32(loc_3, 65535)
			loc_3 = shr_u32(loc_4, 4)
			if loc_4 >= 16 then
				continue
			end
			break
		end
		while true do
			loc_3 = add_i32(loc_0, 128)
			if loc_3 <= 128 then
				break
			end
			FUNC_LIST[492](loc_3, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_0), 128), sub_i32(0, loc_0))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[504] = --[[ _ZN4core3str8converts9from_utf817h76b175074397b963E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = 0
	local desired
	local br_map = {}
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			loc_3 = add_i32(loc_2, 4294967289)
			loc_4 = (if loc_3 > loc_2 then 0 else loc_3)
			loc_5 = sub_i32(band_i32(add_i32(loc_1, 3), 4294967292), loc_1)
			loc_3 = 0
			while true do
				while true do
					while true do
						while true do
							loc_6 = load_i32_u8(memory_at_0, add_i32(loc_1, loc_3))
							loc_7 = extend_i32_n8(loc_6)
							if lt_i32(loc_7, 0) then
								break
							end
							while true do
								if band_i32(sub_i32(loc_5, loc_3), 3) ~= 0 then
									break
								end
								if loc_3 >= loc_4 then
									desired = 4
									break
								end
								while true do
									loc_6 = add_i32(loc_1, loc_3)
									if band_i32(load_i32(memory_at_0, loc_6), 2155905152) ~= 0 then
										desired = 4
										break
									end
									if band_i32(load_i32(memory_at_0, add_i32(loc_6, 4)), 2155905152) ~= 0 then
										desired = 4
										break
									end
									loc_3 = add_i32(loc_3, 8)
									if loc_3 >= loc_4 then
										desired = 4
										break
									end
									continue
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = add_i32(loc_3, 1)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = i64_from_u32(0, 256)
						loc_9 = i64_from_u32(0, 1)
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if not br_map[1] then
																			br_map[1] = (function()
																				return { [0] = 0, 1, 2, }
																			end)()
																		end
																		temp = br_map[1][add_i32(load_i32_u8(memory_at_0, add_i32(loc_6, 1064000)), 4294967294)] or 10
																		if temp < 2 then
																			if temp < 1 then
																				break
																			else
																				desired = 15
																				break
																			end
																		elseif temp > 2 then
																			desired = 6
																			break
																		else
																			desired = 14
																			break
																		end
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = add_i32(loc_3, 1)
																	if loc_6 < loc_2 then
																		desired = 13
																		break
																	end
																	loc_8 = i64_ZERO
																	loc_9 = i64_ZERO
																	desired = 6
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_8 = i64_ZERO
																loc_10 = add_i32(loc_3, 1)
																if loc_10 < loc_2 then
																	desired = 12
																	break
																end
																loc_9 = i64_ZERO
																desired = 6
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_8 = i64_ZERO
															loc_10 = add_i32(loc_3, 1)
															if loc_10 < loc_2 then
																desired = 11
																break
															end
															loc_9 = i64_ZERO
															desired = 6
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_8 = i64_from_u32(0, 256)
														loc_9 = i64_from_u32(0, 1)
														if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_6)), 4294967231) then
															desired = 6
															break
														end
														desired = 5
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_10 = load_i32_i8(memory_at_0, add_i32(loc_1, loc_10))
													while true do
														while true do
															while true do
																if not br_map[2] then
																	br_map[2] = (function()
																		return { [0] = 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, }
																	end)()
																end
																temp = br_map[2][add_i32(loc_6, 4294967072)] or 2
																if temp < 1 then
																	break
																elseif temp > 1 then
																	desired = 12
																	break
																else
																	desired = 13
																	break
																end
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if band_i32(loc_10, 4294967264) == 4294967200 then
																desired = 9
																break
															end
															desired = 10
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if gt_i32(loc_10, 4294967199) then
															desired = 10
															break
														end
														desired = 9
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														if band_i32(add_i32(loc_7, 31), 255) < 12 then
															break
														end
														if band_i32(loc_7, 4294967294) ~= 4294967278 then
															desired = 10
															break
														end
														if lt_i32(loc_10, 4294967232) then
															desired = 9
															break
														end
														desired = 10
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if lt_i32(loc_10, 4294967232) then
														desired = 9
														break
													end
													desired = 10
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_10 = load_i32_i8(memory_at_0, add_i32(loc_1, loc_10))
												while true do
													while true do
														while true do
															while true do
																if not br_map[3] then
																	br_map[3] = (function()
																		return { [0] = 1, 0, 0, 0, 2, }
																	end)()
																end
																temp = br_map[3][add_i32(loc_6, 4294967056)] or 0
																if temp < 1 then
																	break
																elseif temp > 1 then
																	desired = 12
																	break
																else
																	desired = 13
																	break
																end
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if band_i32(add_i32(loc_7, 15), 255) > 2 then
																desired = 10
																break
															end
															if ge_i32(loc_10, 4294967232) then
																desired = 10
																break
															end
															desired = 11
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if band_i32(add_i32(loc_10, 112), 255) >= 48 then
															desired = 10
															break
														end
														desired = 11
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if gt_i32(loc_10, 4294967183) then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												while true do
													loc_6 = add_i32(loc_3, 2)
													if loc_6 < loc_2 then
														break
													end
													loc_9 = i64_ZERO
													desired = 6
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_6)), 4294967231) then
													desired = 8
													break
												end
												loc_9 = i64_ZERO
												loc_6 = add_i32(loc_3, 3)
												if loc_6 >= loc_2 then
													desired = 6
													break
												end
												if le_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_6)), 4294967231) then
													desired = 5
													break
												end
												loc_8 = i64_from_u32(0, 768)
												desired = 7
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_8 = i64_from_u32(0, 256)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_9 = i64_ZERO
										loc_6 = add_i32(loc_3, 2)
										if loc_6 >= loc_2 then
											desired = 6
											break
										end
										if le_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_6)), 4294967231) then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_8 = i64_from_u32(0, 512)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_9 = i64_from_u32(0, 1)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_0 + 4, bor_i64(bor_i64(loc_8, extend_i64_u32(loc_3)), loc_9))
							store_i32(memory_at_0, loc_0, 1)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = add_i32(loc_6, 1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 >= loc_2 then
						break
					end
					while true do
						if lt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_3)), 0) then
							desired = 3
							break
						end
						loc_3 = add_i32(loc_3, 1)
						if loc_2 ~= loc_3 then
							continue
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_3 < loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_1)
		store_i32(memory_at_0, add_i32(loc_0, 8), loc_2)
		store_i32(memory_at_0, loc_0, 0)
		break
	end
end
FUNC_LIST[505] = --[[ _ZN4core6result13unwrap_failed17h9b90702d99118d7cE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, loc_1)
		store_i32(memory_at_0, loc_5 + 8, loc_0)
		store_i32(memory_at_0, loc_5 + 20, loc_3)
		store_i32(memory_at_0, loc_5 + 16, loc_2)
		store_i32(memory_at_0, add_i32(loc_5, 60), 215)
		store_i32(memory_at_0, loc_5 + 52, 216)
		store_i32(memory_at_0, loc_5 + 56, add_i32(loc_5, 16))
		store_i32(memory_at_0, loc_5 + 48, add_i32(loc_5, 8))
		FUNC_LIST[498](add_i32(loc_5, 24), 1063544, 2, add_i32(loc_5, 48), 2)
		FUNC_LIST[491](add_i32(loc_5, 24), loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[506] = --[[ _ZN4core6option13expect_failed17h5e0698bed546f70fE ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_1)
		store_i32(memory_at_0, loc_3 + 8, loc_0)
		store_i32(memory_at_0, loc_3 + 44, 216)
		store_i32(memory_at_0, loc_3 + 40, add_i32(loc_3, 8))
		FUNC_LIST[498](add_i32(loc_3, 16), 1063268, 1, add_i32(loc_3, 40), 1)
		FUNC_LIST[491](add_i32(loc_3, 16), loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[507] = --[[ _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hf0642cedd7e12f73E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[495](loc_1, load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 4))
		break
	end
	return reg_0
end
FUNC_LIST[508] = --[[ _ZN4core5panic10panic_info9PanicInfo7message17h96450fb094b633f0E ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32(memory_at_0, loc_0 + 12)
		break
	end
	return reg_0
end
FUNC_LIST[509] = --[[ _ZN4core5panic10panic_info9PanicInfo8location17hc9ec81732ba9ed61E ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32(memory_at_0, loc_0 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[510] = --[[ _ZN4core5panic10panic_info9PanicInfo10can_unwind17h01c870c8ae0fb5fcE ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32_u8(memory_at_0, loc_0 + 16)
		break
	end
	return reg_0
end
FUNC_LIST[511] = --[[ _ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hecf02876e3be9945E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 64)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = 1
		while true do
			loc_4 = load_i32(memory_at_0, loc_1 + 20)
			loc_5 = load_i32(memory_at_0, add_i32(loc_1, 24))
			loc_6 = load_i32(memory_at_0, loc_5 + 12)
			reg_0 = TABLE_LIST[0].data[loc_6](loc_4, 1063304, 12)
			if reg_0 ~= 0 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 8)
			store_i64(memory_at_0, add_i32(add_i32(loc_2, 16), 12), i64_from_u32(3, 0))
			store_i32(memory_at_0, add_i32(loc_2, 60), 32)
			store_i32(memory_at_0, add_i32(add_i32(loc_2, 40), 12), 32)
			store_i32(memory_at_0, loc_2 + 20, 3)
			store_i32(memory_at_0, loc_2 + 16, 1063280)
			store_i32(memory_at_0, loc_2 + 56, add_i32(loc_1, 12))
			store_i32(memory_at_0, loc_2 + 48, add_i32(loc_1, 8))
			store_i32(memory_at_0, loc_2 + 44, 216)
			store_i32(memory_at_0, loc_2 + 40, loc_1)
			store_i32(memory_at_0, loc_2 + 24, add_i32(loc_2, 40))
			reg_0 = FUNC_LIST[499](loc_4, loc_5, add_i32(loc_2, 16))
			if reg_0 ~= 0 then
				break
			end
			while true do
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 12)
					if loc_1 == 0 then
						break
					end
					reg_0 = TABLE_LIST[0].data[loc_6](loc_4, 1063316, 2)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					store_i64(memory_at_0, add_i32(add_i32(loc_2, 40), 16), load_i64(memory_at_0, add_i32(loc_1, 16)))
					store_i64(memory_at_0, add_i32(add_i32(loc_2, 40), 8), load_i64(memory_at_0, add_i32(loc_1, 8)))
					store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_1))
					reg_0 = FUNC_LIST[499](loc_4, loc_5, add_i32(loc_2, 40))
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 4) + 12)](loc_2, loc_1)
				if (if eq_i64(bor_i64(bxor_i64(load_i64(memory_at_0, loc_2), i64_from_u32(3441327041, 3248670876)), bxor_i64(load_i64(memory_at_0, add_i32(loc_2, 8)), i64_from_u32(11661156, 4256962177))), i64_ZERO) then 1 else 0) == 0 then
					break
				end
				reg_0 = TABLE_LIST[0].data[loc_6](loc_4, 1063316, 2)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				reg_0 = TABLE_LIST[0].data[loc_6](loc_4, load_i32(memory_at_0, loc_1), load_i32(memory_at_0, loc_1 + 4))
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = 0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 64)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[512] = --[[ _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hd466ade7c6a4058bE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_0 = load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			loc_4 = band_i32(loc_0, 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_3), 127), add_i32((if loc_4 < 10 then 48 else 87), loc_4))
			loc_3 = add_i32(loc_3, 4294967295)
			loc_4 = (if loc_0 < 16 then 1 else 0)
			loc_0 = shr_u32(loc_0, 4)
			if loc_4 == 0 then
				continue
			end
			break
		end
		while true do
			loc_0 = add_i32(loc_3, 128)
			if loc_0 <= 128 then
				break
			end
			FUNC_LIST[492](loc_0, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_3), 128), sub_i32(0, loc_3))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[513] = --[[ _ZN4core9panicking19assert_failed_inner17hffd9b9ac97742d4fE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = 0
	local desired
	local br_map = {}
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_7
		store_i32(memory_at_0, loc_7 + 12, loc_2)
		store_i32(memory_at_0, loc_7 + 8, loc_1)
		store_i32(memory_at_0, loc_7 + 20, loc_4)
		store_i32(memory_at_0, loc_7 + 16, loc_3)
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 1, 2, }
							end)()
						end
						temp = br_map[1][band_i32(loc_0, 255)] or 0
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_7 + 24, 1063404)
					loc_2 = 2
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_7 + 24, 1063406)
				loc_2 = 2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_7 + 24, 1063408)
			loc_2 = 7
			break
		end
		store_i32(memory_at_0, loc_7 + 28, loc_2)
		while true do
			if load_i32(memory_at_0, loc_5) ~= 0 then
				break
			end
			store_i32(memory_at_0, add_i32(loc_7, 76), 215)
			store_i32(memory_at_0, add_i32(loc_7, 68), 215)
			store_i32(memory_at_0, loc_7 + 60, 216)
			store_i32(memory_at_0, loc_7 + 72, add_i32(loc_7, 16))
			store_i32(memory_at_0, loc_7 + 64, add_i32(loc_7, 8))
			store_i32(memory_at_0, loc_7 + 56, add_i32(loc_7, 24))
			FUNC_LIST[498](add_i32(loc_7, 88), 1063472, 4, add_i32(loc_7, 56), 3)
			FUNC_LIST[491](add_i32(loc_7, 88), loc_6)
			error("out of code bounds")
		end
		store_i64(memory_at_0, add_i32(add_i32(loc_7, 32), 16), load_i64(memory_at_0, add_i32(loc_5, 16)))
		store_i64(memory_at_0, add_i32(add_i32(loc_7, 32), 8), load_i64(memory_at_0, add_i32(loc_5, 8)))
		store_i64(memory_at_0, loc_7 + 32, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, add_i32(loc_7, 84), 217)
		store_i32(memory_at_0, add_i32(loc_7, 76), 215)
		store_i32(memory_at_0, add_i32(loc_7, 68), 215)
		store_i32(memory_at_0, loc_7 + 60, 216)
		store_i32(memory_at_0, loc_7 + 80, add_i32(loc_7, 32))
		store_i32(memory_at_0, loc_7 + 72, add_i32(loc_7, 16))
		store_i32(memory_at_0, loc_7 + 64, add_i32(loc_7, 8))
		store_i32(memory_at_0, loc_7 + 56, add_i32(loc_7, 24))
		FUNC_LIST[498](add_i32(loc_7, 88), 1063508, 4, add_i32(loc_7, 56), 4)
		FUNC_LIST[491](add_i32(loc_7, 88), loc_6)
		error("out of code bounds")
	end
end
FUNC_LIST[514] = --[[ _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa76a9a154fc889fE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 4) + 12)](load_i32(memory_at_0, loc_0), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[515] = --[[ _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h1d0a2639a536e42eE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[499](load_i32(memory_at_0, loc_1 + 20), load_i32(memory_at_0, add_i32(loc_1, 24)), loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[516] = --[[ _ZN4core3fmt8builders11DebugStruct6finish17h0442933f3cd7dacaE ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = load_i32_u8(memory_at_0, loc_0 + 4)
		while true do
			if load_i32_u8(memory_at_0, loc_0 + 5) ~= 0 then
				break
			end
			reg_0 = (if band_i32(loc_1, 255) ~= 0 then 1 else 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = 1
		while true do
			if band_i32(loc_1, 255) ~= 0 then
				break
			end
			while true do
				loc_1 = load_i32(memory_at_0, loc_0)
				if band_i32(load_i32_u8(memory_at_0, loc_1 + 28), 4) ~= 0 then
					break
				end
				reg_1 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 24) + 12)](load_i32(memory_at_0, loc_1 + 20), 1063561, 2)
				loc_1 = reg_1
				store_i32_n8(memory_at_0, loc_0 + 4, loc_1)
				reg_0 = loc_1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 24) + 12)](load_i32(memory_at_0, loc_1 + 20), 1063560, 1)
			loc_2 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[517] = --[[ _ZN4core3fmt9Formatter3new17h974eea958a6d43d7E ]] function(loc_0, loc_1, loc_2)
	while true do
		store_i32_n8(memory_at_0, loc_0 + 32, 3)
		store_i32(memory_at_0, loc_0 + 16, 32)
		store_i32(memory_at_0, loc_0 + 28, 0)
		store_i32(memory_at_0, loc_0 + 20, loc_1)
		store_i32(memory_at_0, loc_0 + 8, 0)
		store_i32(memory_at_0, loc_0, 0)
		store_i32(memory_at_0, add_i32(loc_0, 24), loc_2)
		break
	end
end
FUNC_LIST[518] = --[[ _ZN4core3str5count14do_count_chars17h3e034a5b4ba5366dE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			while true do
				loc_2 = band_i32(add_i32(loc_0, 3), 4294967292)
				loc_3 = sub_i32(loc_2, loc_0)
				if loc_1 < loc_3 then
					break
				end
				loc_4 = sub_i32(loc_1, loc_3)
				if loc_4 < 4 then
					break
				end
				loc_5 = band_i32(loc_4, 3)
				loc_6 = 0
				loc_1 = 0
				while true do
					loc_7 = (if loc_2 == loc_0 then 1 else 0)
					if loc_7 ~= 0 then
						break
					end
					loc_1 = 0
					while true do
						while true do
							if add_i32(loc_2, bxor_i32(loc_0, 4294967295)) >= 3 then
								break
							end
							loc_8 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = 0
						while true do
							loc_9 = add_i32(loc_0, loc_8)
							loc_1 = add_i32(add_i32(add_i32(add_i32(loc_1, (if gt_i32(load_i32_i8(memory_at_0, loc_9), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_9, 1)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_9, 2)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_9, 3)), 4294967231) then 1 else 0))
							loc_8 = add_i32(loc_8, 4)
							if loc_8 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_7 ~= 0 then
						break
					end
					loc_2 = sub_i32(loc_0, loc_2)
					loc_9 = add_i32(loc_0, loc_8)
					while true do
						loc_1 = add_i32(loc_1, (if gt_i32(load_i32_i8(memory_at_0, loc_9), 4294967231) then 1 else 0))
						loc_9 = add_i32(loc_9, 1)
						loc_2 = add_i32(loc_2, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = add_i32(loc_0, loc_3)
				while true do
					if loc_5 == 0 then
						break
					end
					loc_9 = add_i32(loc_8, band_i32(loc_4, 4294967292))
					loc_6 = (if gt_i32(load_i32_i8(memory_at_0, loc_9), 4294967231) then 1 else 0)
					if loc_5 == 1 then
						break
					end
					loc_6 = add_i32(loc_6, (if gt_i32(load_i32_i8(memory_at_0, loc_9 + 1), 4294967231) then 1 else 0))
					if loc_5 == 2 then
						break
					end
					loc_6 = add_i32(loc_6, (if gt_i32(load_i32_i8(memory_at_0, loc_9 + 2), 4294967231) then 1 else 0))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = shr_u32(loc_4, 2)
				loc_2 = add_i32(loc_6, loc_1)
				while true do
					loc_6 = loc_8
					if loc_3 == 0 then
						desired = 1
						break
					end
					loc_4 = (if loc_3 < 192 then loc_3 else 192)
					loc_5 = band_i32(loc_4, 3)
					loc_7 = shl_i32(loc_4, 2)
					while true do
						while true do
							loc_10 = band_i32(loc_4, 252)
							if loc_10 ~= 0 then
								break
							end
							loc_9 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_0 = add_i32(loc_6, shl_i32(loc_10, 2))
						loc_9 = 0
						loc_1 = loc_6
						while true do
							loc_8 = load_i32(memory_at_0, add_i32(loc_1, 12))
							reg_0 = band_i32(bor_i32(shr_u32(bxor_i32(loc_8, 4294967295), 7), shr_u32(loc_8, 6)), 16843009)
							loc_8 = load_i32(memory_at_0, add_i32(loc_1, 8))
							reg_1 = band_i32(bor_i32(shr_u32(bxor_i32(loc_8, 4294967295), 7), shr_u32(loc_8, 6)), 16843009)
							loc_8 = load_i32(memory_at_0, add_i32(loc_1, 4))
							reg_2 = band_i32(bor_i32(shr_u32(bxor_i32(loc_8, 4294967295), 7), shr_u32(loc_8, 6)), 16843009)
							loc_8 = load_i32(memory_at_0, loc_1)
							loc_9 = add_i32(reg_0, add_i32(reg_1, add_i32(reg_2, add_i32(band_i32(bor_i32(shr_u32(bxor_i32(loc_8, 4294967295), 7), shr_u32(loc_8, 6)), 16843009), loc_9))))
							loc_1 = add_i32(loc_1, 16)
							if loc_1 ~= loc_0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = sub_i32(loc_3, loc_4)
					loc_8 = add_i32(loc_6, loc_7)
					loc_2 = add_i32(shr_u32(mul_i32(add_i32(band_i32(shr_u32(loc_9, 8), 16711935), band_i32(loc_9, 16711935)), 65537), 16), loc_2)
					if loc_5 == 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = add_i32(loc_6, shl_i32(loc_10, 2))
				loc_1 = load_i32(memory_at_0, loc_9)
				loc_1 = band_i32(bor_i32(shr_u32(bxor_i32(loc_1, 4294967295), 7), shr_u32(loc_1, 6)), 16843009)
				while true do
					if loc_5 == 1 then
						break
					end
					loc_8 = load_i32(memory_at_0, loc_9 + 4)
					loc_1 = add_i32(band_i32(bor_i32(shr_u32(bxor_i32(loc_8, 4294967295), 7), shr_u32(loc_8, 6)), 16843009), loc_1)
					if loc_5 == 2 then
						break
					end
					loc_9 = load_i32(memory_at_0, loc_9 + 8)
					loc_1 = add_i32(band_i32(bor_i32(shr_u32(bxor_i32(loc_9, 4294967295), 7), shr_u32(loc_9, 6)), 16843009), loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = add_i32(shr_u32(mul_i32(add_i32(band_i32(shr_u32(loc_1, 8), 459007), band_i32(loc_1, 16711935)), 65537), 16), loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 ~= 0 then
					break
				end
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = band_i32(loc_1, 3)
			while true do
				while true do
					if loc_1 >= 4 then
						break
					end
					loc_2 = 0
					loc_9 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = band_i32(loc_1, 4294967292)
				loc_2 = 0
				loc_9 = 0
				while true do
					loc_1 = add_i32(loc_0, loc_9)
					loc_2 = add_i32(add_i32(add_i32(add_i32(loc_2, (if gt_i32(load_i32_i8(memory_at_0, loc_1), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, 1)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, 2)), 4294967231) then 1 else 0)), (if gt_i32(load_i32_i8(memory_at_0, add_i32(loc_1, 3)), 4294967231) then 1 else 0))
					loc_9 = add_i32(loc_9, 4)
					if loc_3 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 == 0 then
				break
			end
			loc_1 = add_i32(loc_0, loc_9)
			while true do
				loc_2 = add_i32(loc_2, (if gt_i32(load_i32_i8(memory_at_0, loc_1), 4294967231) then 1 else 0))
				loc_1 = add_i32(loc_1, 1)
				loc_8 = add_i32(loc_8, 4294967295)
				if loc_8 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[519] = --[[ _ZN4core3fmt9Formatter12pad_integral12write_prefix17hbbf4f20ed687610cE ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if loc_2 == 1114112 then
						break
					end
					loc_5 = 1
					reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_1 + 16)](loc_0, loc_2)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 ~= 0 then
					desired = 1
					break
				end
				loc_5 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_5
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_1 + 12)](loc_0, loc_3, loc_4)
		break
	end
	return reg_0
end
FUNC_LIST[520] = --[[ _ZN4core3fmt9Formatter9write_fmt17h44c3eec2efc15a30E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[499](load_i32(memory_at_0, loc_0 + 20), load_i32(memory_at_0, add_i32(loc_0, 24)), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[521] = --[[ _ZN4core3fmt9Formatter12debug_struct17hacaa2da8a863373cE ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_1, 24)) + 12)](load_i32(memory_at_0, loc_1 + 20), loc_2, loc_3)
		loc_3 = reg_0
		store_i32_n8(memory_at_0, loc_0 + 5, 0)
		store_i32_n8(memory_at_0, loc_0 + 4, loc_3)
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[522] = --[[ _ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hc8dc2b4f7f09dd36E ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if load_i32_u8(memory_at_0, loc_0) ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[495](loc_1, 1063824, 5)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[495](loc_1, 1063829, 4)
		break
	end
	return reg_0
end
FUNC_LIST[523] = --[[ _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hf349918185865cfbE ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[495](loc_2, loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[524] = --[[ _ZN4core5slice6memchr14memchr_aligned17h7a8c24fee00615c6E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_4 = band_i32(add_i32(loc_2, 3), 4294967292)
						if loc_4 == loc_2 then
							break
						end
						loc_4 = sub_i32(loc_4, loc_2)
						loc_4 = (if loc_4 < loc_3 then loc_4 else loc_3)
						if loc_4 == 0 then
							break
						end
						loc_5 = 0
						loc_6 = band_i32(loc_1, 255)
						loc_7 = 1
						while true do
							if load_i32_u8(memory_at_0, add_i32(loc_2, loc_5)) == loc_6 then
								desired = 1
								break
							end
							loc_5 = add_i32(loc_5, 1)
							if loc_4 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = add_i32(loc_3, 4294967288)
						if loc_4 > loc_8 then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = add_i32(loc_3, 4294967288)
					loc_4 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = mul_i32(band_i32(loc_1, 255), 16843009)
				while true do
					loc_7 = add_i32(loc_2, loc_4)
					loc_6 = bxor_i32(load_i32(memory_at_0, loc_7), loc_5)
					if band_i32(band_i32(bxor_i32(loc_6, 4294967295), add_i32(loc_6, 4278124287)), 2155905152) ~= 0 then
						desired = 2
						break
					end
					loc_6 = bxor_i32(load_i32(memory_at_0, add_i32(loc_7, 4)), loc_5)
					if band_i32(band_i32(bxor_i32(loc_6, 4294967295), add_i32(loc_6, 4278124287)), 2155905152) ~= 0 then
						desired = 2
						break
					end
					loc_4 = add_i32(loc_4, 8)
					if loc_4 <= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = 0
			while true do
				if loc_4 == loc_3 then
					break
				end
				loc_5 = band_i32(loc_1, 255)
				while true do
					while true do
						if load_i32_u8(memory_at_0, add_i32(loc_2, loc_4)) ~= loc_5 then
							break
						end
						loc_5 = loc_4
						loc_7 = 1
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = add_i32(loc_4, 1)
					if loc_3 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = loc_3
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_5)
		store_i32(memory_at_0, loc_0, loc_7)
		break
	end
end
FUNC_LIST[525] = --[[ _ZN4core5slice6memchr7memrchr17hdc561bba1e3fb197E ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local desired
	while true do
		loc_4 = loc_3
		loc_5 = loc_3
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_6 = sub_i32(band_i32(add_i32(loc_2, 3), 4294967292), loc_2)
							if loc_3 < loc_6 then
								break
							end
							loc_7 = band_i32(sub_i32(loc_3, loc_6), 7)
							loc_4 = sub_i32(loc_3, loc_7)
							if loc_3 < loc_7 then
								desired = 4
								break
							end
							loc_5 = loc_6
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = sub_i32(0, loc_4)
						loc_9 = add_i32(loc_2, 4294967295)
						loc_10 = band_i32(loc_1, 255)
						loc_6 = loc_3
						while true do
							if add_i32(loc_8, loc_6) == 0 then
								desired = 3
								break
							end
							loc_7 = add_i32(loc_9, loc_6)
							loc_6 = add_i32(loc_6, 4294967295)
							if load_i32_u8(memory_at_0, loc_7) ~= loc_10 then
								continue
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[492](loc_4, loc_3, 1063884)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = mul_i32(band_i32(loc_1, 255), 16843009)
				while true do
					while true do
						loc_6 = loc_4
						if loc_6 <= loc_5 then
							desired = 3
							break
						end
						loc_9 = add_i32(loc_2, loc_6)
						loc_8 = bxor_i32(load_i32(memory_at_0, add_i32(loc_9, 4294967288)), loc_7)
						if band_i32(band_i32(bxor_i32(loc_8, 4294967295), add_i32(loc_8, 4278124287)), 2155905152) ~= 0 then
							desired = 3
							break
						end
						loc_4 = add_i32(loc_6, 4294967288)
						loc_8 = bxor_i32(load_i32(memory_at_0, add_i32(loc_9, 4294967292)), loc_7)
						if band_i32(band_i32(bxor_i32(loc_8, 4294967295), add_i32(loc_8, 4278124287)), 2155905152) == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_6 > loc_3 then
						break
					end
					loc_8 = add_i32(loc_2, 4294967295)
					loc_9 = band_i32(loc_1, 255)
					while true do
						while true do
							if loc_6 ~= 0 then
								break
							end
							loc_7 = 0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_7 = add_i32(loc_8, loc_6)
						loc_6 = add_i32(loc_6, 4294967295)
						if load_i32_u8(memory_at_0, loc_7) == loc_9 then
							desired = 2
							break
						end
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[494](loc_6, loc_3, 1063868)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = 1
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		store_i32(memory_at_0, loc_0, loc_7)
		break
	end
end
FUNC_LIST[526] = --[[ _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h39a5950ec6542a6eE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32_u8(memory_at_0, loc_0)
		loc_0 = 0
		while true do
			loc_4 = band_i32(loc_3, 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_0), 127), add_i32((if loc_4 < 10 then 48 else 55), loc_4))
			loc_0 = add_i32(loc_0, 4294967295)
			loc_4 = band_i32(loc_3, 255)
			loc_3 = shr_u32(loc_4, 4)
			if loc_4 >= 16 then
				continue
			end
			break
		end
		while true do
			loc_3 = add_i32(loc_0, 128)
			if loc_3 <= 128 then
				break
			end
			FUNC_LIST[492](loc_3, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_0), 128), sub_i32(0, loc_0))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[527] = --[[ _ZN4core3fmt3num3imp7fmt_u6417h2015cbdab4a90874E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = 39
		while true do
			while true do
				if ge_u64(loc_0, i64_from_u32(10000, 0)) then
					break
				end
				loc_5 = loc_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 39
			while true do
				loc_6 = add_i32(add_i32(loc_3, 9), loc_4)
				loc_5 = div_u64(loc_0, i64_from_u32(10000, 0))
				loc_7 = wrap_i32_i64(sub_i64(loc_0, mul_i64(loc_5, i64_from_u32(10000, 0))))
				loc_8 = div_u32(band_i32(loc_7, 65535), 100)
				store_i32_n16(memory_at_0, add_i32(loc_6, 4294967292), load_i32_u16(memory_at_0, add_i32(shl_i32(loc_8, 1), 1063608)))
				store_i32_n16(memory_at_0, add_i32(loc_6, 4294967294), load_i32_u16(memory_at_0, add_i32(shl_i32(band_i32(sub_i32(loc_7, mul_i32(loc_8, 100)), 65535), 1), 1063608)))
				loc_4 = add_i32(loc_4, 4294967292)
				loc_6 = (if gt_u64(loc_0, i64_from_u32(99999999, 0)) then 1 else 0)
				loc_0 = loc_5
				if loc_6 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_6 = wrap_i32_i64(loc_5)
			if loc_6 <= 99 then
				break
			end
			loc_4 = add_i32(loc_4, 4294967294)
			loc_6 = wrap_i32_i64(loc_5)
			reg_1 = loc_6
			loc_6 = div_u32(band_i32(loc_6, 65535), 100)
			store_i32_n16(memory_at_0, add_i32(add_i32(loc_3, 9), loc_4), load_i32_u16(memory_at_0, add_i32(shl_i32(band_i32(sub_i32(reg_1, mul_i32(loc_6, 100)), 65535), 1), 1063608)))
			break
		end
		while true do
			while true do
				if loc_6 < 10 then
					break
				end
				loc_4 = add_i32(loc_4, 4294967294)
				store_i32_n16(memory_at_0, add_i32(add_i32(loc_3, 9), loc_4), load_i32_u16(memory_at_0, add_i32(shl_i32(loc_6, 1), 1063608)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = add_i32(loc_4, 4294967295)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_3, 9), loc_4), add_i32(loc_6, 48))
			break
		end
		reg_0 = FUNC_LIST[500](loc_2, loc_1, 1063204, 0, add_i32(add_i32(loc_3, 9), loc_4), sub_i32(39, loc_4))
		loc_4 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[528] = --[[ _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h5f415e5c98a48ac0E ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_0 = load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			loc_4 = band_i32(loc_0, 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_3), 127), add_i32((if loc_4 < 10 then 48 else 55), loc_4))
			loc_3 = add_i32(loc_3, 4294967295)
			loc_4 = (if loc_0 < 16 then 1 else 0)
			loc_0 = shr_u32(loc_0, 4)
			if loc_4 == 0 then
				continue
			end
			break
		end
		while true do
			loc_0 = add_i32(loc_3, 128)
			if loc_0 <= 128 then
				break
			end
			FUNC_LIST[492](loc_0, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_3), 128), sub_i32(0, loc_3))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[529] = --[[ _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17heabdb0b59874a21cE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i64(memory_at_0, loc_0)
		loc_0 = 0
		while true do
			loc_4 = band_i32(wrap_i32_i64(loc_3), 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_0), 127), add_i32((if loc_4 < 10 then 48 else 87), loc_4))
			loc_0 = add_i32(loc_0, 4294967295)
			loc_4 = (if lt_u64(loc_3, i64_from_u32(16, 0)) then 1 else 0)
			loc_3 = shr_u64(loc_3, i64_from_u32(4, 0))
			if loc_4 == 0 then
				continue
			end
			break
		end
		while true do
			loc_4 = add_i32(loc_0, 128)
			if loc_4 <= 128 then
				break
			end
			FUNC_LIST[492](loc_4, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_0), 128), sub_i32(0, loc_0))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[530] = --[[ _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h6cdbf3fabc519eedE ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i64(memory_at_0, loc_0)
		loc_0 = 0
		while true do
			loc_4 = band_i32(wrap_i32_i64(loc_3), 15)
			store_i32_n8(memory_at_0, add_i32(add_i32(loc_2, loc_0), 127), add_i32((if loc_4 < 10 then 48 else 55), loc_4))
			loc_0 = add_i32(loc_0, 4294967295)
			loc_4 = (if lt_u64(loc_3, i64_from_u32(16, 0)) then 1 else 0)
			loc_3 = shr_u64(loc_3, i64_from_u32(4, 0))
			if loc_4 == 0 then
				continue
			end
			break
		end
		while true do
			loc_4 = add_i32(loc_0, 128)
			if loc_4 <= 128 then
				break
			end
			FUNC_LIST[492](loc_4, 128, 1063592)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[500](loc_1, 1, 1063563, 2, add_i32(add_i32(loc_2, loc_0), 128), sub_i32(0, loc_0))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[531] = --[[ _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h97c19d03c4cf2effE ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		loc_0 = load_i32(memory_at_0, loc_0)
		reg_0 = extend_i64_u32(loc_0)
		reg_1 = sub_i64(i64_ZERO, extend_i64_i32(loc_0))
		loc_0 = (if gt_i32(loc_0, 4294967295) then 1 else 0)
		reg_0 = FUNC_LIST[527]((if loc_0 ~= 0 then reg_0 else reg_1), loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[532] = --[[ _ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h3d25a5c04a444e12E ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_1, 24)) + 12)](load_i32(memory_at_0, loc_1 + 20), 1064256, 5)
		break
	end
	return reg_0
end
FUNC_LIST[533] = --[[ _ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h86cd17290af9cfcfE ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, add_i32(loc_1, 24)) + 12)](load_i32(memory_at_0, loc_1 + 20), 1064261, 11)
		break
	end
	return reg_0
end
FUNC_LIST[534] = --[[ _ZN17compiler_builtins3mem6memcpy17he4d9d546e3dea9c2E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				if loc_2 > 15 then
					break
				end
				loc_3 = loc_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = band_i32(sub_i32(0, loc_0), 3)
			loc_5 = add_i32(loc_0, loc_4)
			while true do
				if loc_4 == 0 then
					break
				end
				loc_3 = loc_0
				loc_6 = loc_1
				while true do
					store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, loc_6))
					loc_6 = add_i32(loc_6, 1)
					loc_3 = add_i32(loc_3, 1)
					if loc_3 < loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = sub_i32(loc_2, loc_4)
			loc_8 = band_i32(loc_7, 4294967292)
			loc_3 = add_i32(loc_5, loc_8)
			while true do
				while true do
					loc_9 = add_i32(loc_1, loc_4)
					if band_i32(loc_9, 3) == 0 then
						break
					end
					if lt_i32(loc_8, 1) then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_9, 3)
					loc_2 = band_i32(loc_6, 24)
					loc_10 = band_i32(loc_9, 4294967292)
					loc_1 = add_i32(loc_10, 4)
					loc_4 = band_i32(sub_i32(0, loc_6), 24)
					loc_6 = load_i32(memory_at_0, loc_10)
					while true do
						reg_1 = shr_u32(loc_6, loc_2)
						loc_6 = load_i32(memory_at_0, loc_1)
						store_i32(memory_at_0, loc_5, bor_i32(reg_1, shl_i32(loc_6, loc_4)))
						loc_1 = add_i32(loc_1, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_5 < loc_3 then
							continue
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if lt_i32(loc_8, 1) then
					break
				end
				loc_1 = loc_9
				while true do
					store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
					loc_1 = add_i32(loc_1, 4)
					loc_5 = add_i32(loc_5, 4)
					if loc_5 < loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = band_i32(loc_7, 3)
			loc_1 = add_i32(loc_9, loc_8)
			break
		end
		while true do
			if loc_2 == 0 then
				break
			end
			loc_5 = add_i32(loc_3, loc_2)
			while true do
				store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, loc_1))
				loc_1 = add_i32(loc_1, 1)
				loc_3 = add_i32(loc_3, 1)
				if loc_3 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[535] = --[[ _ZN17compiler_builtins3mem7memmove17hbc891777a2db6511E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						if sub_i32(loc_0, loc_1) >= loc_2 then
							break
						end
						loc_3 = add_i32(loc_1, loc_2)
						loc_4 = add_i32(loc_0, loc_2)
						while true do
							if loc_2 > 15 then
								break
							end
							loc_5 = loc_0
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = band_i32(loc_4, 4294967292)
						loc_6 = band_i32(loc_4, 3)
						loc_7 = sub_i32(0, loc_6)
						while true do
							if loc_6 == 0 then
								break
							end
							loc_8 = add_i32(add_i32(loc_1, loc_2), 4294967295)
							while true do
								loc_4 = add_i32(loc_4, 4294967295)
								store_i32_n8(memory_at_0, loc_4, load_i32_u8(memory_at_0, loc_8))
								loc_8 = add_i32(loc_8, 4294967295)
								if loc_5 < loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = sub_i32(loc_2, loc_6)
						loc_6 = band_i32(loc_9, 4294967292)
						loc_4 = sub_i32(loc_5, loc_6)
						while true do
							loc_7 = add_i32(loc_3, loc_7)
							if band_i32(loc_7, 3) == 0 then
								break
							end
							if lt_i32(loc_6, 1) then
								desired = 3
								break
							end
							loc_8 = shl_i32(loc_7, 3)
							loc_2 = band_i32(loc_8, 24)
							loc_10 = band_i32(loc_7, 4294967292)
							loc_1 = add_i32(loc_10, 4294967292)
							loc_3 = band_i32(sub_i32(0, loc_8), 24)
							loc_8 = load_i32(memory_at_0, loc_10)
							while true do
								loc_5 = add_i32(loc_5, 4294967292)
								reg_1 = shl_i32(loc_8, loc_3)
								loc_8 = load_i32(memory_at_0, loc_1)
								store_i32(memory_at_0, loc_5, bor_i32(reg_1, shr_u32(loc_8, loc_2)))
								loc_1 = add_i32(loc_1, 4294967292)
								if loc_4 < loc_5 then
									continue
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if lt_i32(loc_6, 1) then
							desired = 3
							break
						end
						loc_1 = add_i32(add_i32(loc_9, loc_1), 4294967292)
						while true do
							loc_5 = add_i32(loc_5, 4294967292)
							store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
							loc_1 = add_i32(loc_1, 4294967292)
							if loc_4 < loc_5 then
								continue
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if loc_2 > 15 then
								break
							end
							loc_4 = loc_0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = band_i32(sub_i32(0, loc_0), 3)
						loc_5 = add_i32(loc_0, loc_3)
						while true do
							if loc_3 == 0 then
								break
							end
							loc_4 = loc_0
							loc_8 = loc_1
							while true do
								store_i32_n8(memory_at_0, loc_4, load_i32_u8(memory_at_0, loc_8))
								loc_8 = add_i32(loc_8, 1)
								loc_4 = add_i32(loc_4, 1)
								if loc_4 < loc_5 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = sub_i32(loc_2, loc_3)
						loc_6 = band_i32(loc_9, 4294967292)
						loc_4 = add_i32(loc_5, loc_6)
						while true do
							while true do
								loc_7 = add_i32(loc_1, loc_3)
								if band_i32(loc_7, 3) == 0 then
									break
								end
								if lt_i32(loc_6, 1) then
									desired = 5
									break
								end
								loc_8 = shl_i32(loc_7, 3)
								loc_2 = band_i32(loc_8, 24)
								loc_10 = band_i32(loc_7, 4294967292)
								loc_1 = add_i32(loc_10, 4)
								loc_3 = band_i32(sub_i32(0, loc_8), 24)
								loc_8 = load_i32(memory_at_0, loc_10)
								while true do
									reg_1 = shr_u32(loc_8, loc_2)
									loc_8 = load_i32(memory_at_0, loc_1)
									store_i32(memory_at_0, loc_5, bor_i32(reg_1, shl_i32(loc_8, loc_3)))
									loc_1 = add_i32(loc_1, 4)
									loc_5 = add_i32(loc_5, 4)
									if loc_5 < loc_4 then
										continue
									end
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if lt_i32(loc_6, 1) then
								break
							end
							loc_1 = loc_7
							while true do
								store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
								loc_1 = add_i32(loc_1, 4)
								loc_5 = add_i32(loc_5, 4)
								if loc_5 < loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = band_i32(loc_9, 3)
						loc_1 = add_i32(loc_7, loc_6)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					loc_5 = add_i32(loc_4, loc_2)
					while true do
						store_i32_n8(memory_at_0, loc_4, load_i32_u8(memory_at_0, loc_1))
						loc_1 = add_i32(loc_1, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_4 < loc_5 then
							continue
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = band_i32(loc_9, 3)
				if loc_1 == 0 then
					desired = 1
					break
				end
				loc_3 = add_i32(loc_7, sub_i32(0, loc_6))
				loc_5 = sub_i32(loc_4, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = add_i32(loc_3, 4294967295)
			while true do
				loc_4 = add_i32(loc_4, 4294967295)
				store_i32_n8(memory_at_0, loc_4, load_i32_u8(memory_at_0, loc_1))
				loc_1 = add_i32(loc_1, 4294967295)
				if loc_5 < loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[536] = --[[ _ZN17compiler_builtins3mem6memset17hd4b133cb65baf654E ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_2 > 15 then
					break
				end
				loc_3 = loc_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = band_i32(sub_i32(0, loc_0), 3)
			loc_5 = add_i32(loc_0, loc_4)
			while true do
				if loc_4 == 0 then
					break
				end
				loc_3 = loc_0
				while true do
					store_i32_n8(memory_at_0, loc_3, loc_1)
					loc_3 = add_i32(loc_3, 1)
					if loc_3 < loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = sub_i32(loc_2, loc_4)
			loc_2 = band_i32(loc_4, 4294967292)
			loc_3 = add_i32(loc_5, loc_2)
			while true do
				if lt_i32(loc_2, 1) then
					break
				end
				loc_2 = mul_i32(band_i32(loc_1, 255), 16843009)
				while true do
					store_i32(memory_at_0, loc_5, loc_2)
					loc_5 = add_i32(loc_5, 4)
					if loc_5 < loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = band_i32(loc_4, 3)
			break
		end
		while true do
			if loc_2 == 0 then
				break
			end
			loc_5 = add_i32(loc_3, loc_2)
			while true do
				store_i32_n8(memory_at_0, loc_3, loc_1)
				loc_3 = add_i32(loc_3, 1)
				if loc_3 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[537] = --[[ memmove ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[535](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[538] = --[[ memcpy ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[534](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[539] = --[[ memset ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[536](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[540] = --[[ __multi3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	while true do
		loc_5 = band_i64(loc_3, i64_from_u32(4294967295, 0))
		loc_6 = band_i64(loc_1, i64_from_u32(4294967295, 0))
		loc_7 = mul_i64(loc_5, loc_6)
		loc_8 = shr_u64(loc_3, i64_from_u32(32, 0))
		loc_6 = mul_i64(loc_8, loc_6)
		loc_9 = shr_u64(loc_1, i64_from_u32(32, 0))
		loc_5 = add_i64(loc_6, mul_i64(loc_5, loc_9))
		loc_10 = add_i64(loc_7, shl_i64(loc_5, i64_from_u32(32, 0)))
		store_i64(memory_at_0, loc_0, loc_10)
		store_i64(memory_at_0, loc_0 + 8, add_i64(add_i64(add_i64(mul_i64(loc_8, loc_9), bor_i64(shl_i64(extend_i64_u32((if lt_u64(loc_5, loc_6) then 1 else 0)), i64_from_u32(32, 0)), shr_u64(loc_5, i64_from_u32(32, 0)))), extend_i64_u32((if lt_u64(loc_10, loc_7) then 1 else 0))), add_i64(mul_i64(loc_4, loc_1), mul_i64(loc_3, loc_2))))
		break
	end
end
local function run_init_code()
	TABLE_LIST[0] = { min = 220, max = 220, data = {} }
	MEMORY_LIST[0] = rt.allocator.new(17, 65535)
	GLOBAL_LIST[0] = { value = 1048576 }
	GLOBAL_LIST[1] = { value = 1065432 }
	GLOBAL_LIST[2] = { value = 1065440 }
	do
		local target = TABLE_LIST[0].data
		local offset = 1
		local data = { FUNC_LIST[46],FUNC_LIST[41],FUNC_LIST[33],FUNC_LIST[32],FUNC_LIST[36],FUNC_LIST[34],FUNC_LIST[35],FUNC_LIST[40],FUNC_LIST[136],FUNC_LIST[139],FUNC_LIST[138],FUNC_LIST[137],FUNC_LIST[107],FUNC_LIST[112],FUNC_LIST[109],FUNC_LIST[102],FUNC_LIST[106],FUNC_LIST[532],FUNC_LIST[105],FUNC_LIST[111],FUNC_LIST[108],FUNC_LIST[110],FUNC_LIST[103],FUNC_LIST[104],FUNC_LIST[125],FUNC_LIST[441],FUNC_LIST[124],FUNC_LIST[376],FUNC_LIST[530],FUNC_LIST[529],FUNC_LIST[123],FUNC_LIST[497],FUNC_LIST[512],FUNC_LIST[309],FUNC_LIST[503],FUNC_LIST[184],FUNC_LIST[198],FUNC_LIST[326],FUNC_LIST[226],FUNC_LIST[323],FUNC_LIST[261],FUNC_LIST[204],FUNC_LIST[272],FUNC_LIST[287],FUNC_LIST[253],FUNC_LIST[267],FUNC_LIST[228],FUNC_LIST[306],FUNC_LIST[214],FUNC_LIST[280],FUNC_LIST[302],FUNC_LIST[262],FUNC_LIST[252],FUNC_LIST[297],FUNC_LIST[246],FUNC_LIST[329],FUNC_LIST[224],FUNC_LIST[321],FUNC_LIST[240],FUNC_LIST[278],FUNC_LIST[185],FUNC_LIST[239],FUNC_LIST[273],FUNC_LIST[282],FUNC_LIST[322],FUNC_LIST[295],FUNC_LIST[220],FUNC_LIST[269],FUNC_LIST[235],FUNC_LIST[225],FUNC_LIST[250],FUNC_LIST[194],FUNC_LIST[203],FUNC_LIST[207],FUNC_LIST[219],FUNC_LIST[330],FUNC_LIST[308],FUNC_LIST[296],FUNC_LIST[212],FUNC_LIST[244],FUNC_LIST[255],FUNC_LIST[276],FUNC_LIST[229],FUNC_LIST[291],FUNC_LIST[231],FUNC_LIST[208],FUNC_LIST[288],FUNC_LIST[213],FUNC_LIST[218],FUNC_LIST[256],FUNC_LIST[324],FUNC_LIST[274],FUNC_LIST[327],FUNC_LIST[196],FUNC_LIST[289],FUNC_LIST[201],FUNC_LIST[266],FUNC_LIST[271],FUNC_LIST[211],FUNC_LIST[277],FUNC_LIST[328],FUNC_LIST[223],FUNC_LIST[199],FUNC_LIST[216],FUNC_LIST[234],FUNC_LIST[209],FUNC_LIST[325],FUNC_LIST[254],FUNC_LIST[292],FUNC_LIST[264],FUNC_LIST[260],FUNC_LIST[232],FUNC_LIST[286],FUNC_LIST[200],FUNC_LIST[275],FUNC_LIST[192],FUNC_LIST[205],FUNC_LIST[248],FUNC_LIST[190],FUNC_LIST[245],FUNC_LIST[265],FUNC_LIST[193],FUNC_LIST[189],FUNC_LIST[285],FUNC_LIST[283],FUNC_LIST[301],FUNC_LIST[197],FUNC_LIST[298],FUNC_LIST[241],FUNC_LIST[202],FUNC_LIST[258],FUNC_LIST[281],FUNC_LIST[233],FUNC_LIST[279],FUNC_LIST[290],FUNC_LIST[230],FUNC_LIST[270],FUNC_LIST[257],FUNC_LIST[217],FUNC_LIST[195],FUNC_LIST[263],FUNC_LIST[249],FUNC_LIST[247],FUNC_LIST[242],FUNC_LIST[251],FUNC_LIST[227],FUNC_LIST[268],FUNC_LIST[300],FUNC_LIST[304],FUNC_LIST[243],FUNC_LIST[303],FUNC_LIST[237],FUNC_LIST[259],FUNC_LIST[305],FUNC_LIST[299],FUNC_LIST[187],FUNC_LIST[215],FUNC_LIST[307],FUNC_LIST[238],FUNC_LIST[236],FUNC_LIST[528],FUNC_LIST[526],FUNC_LIST[380],FUNC_LIST[134],FUNC_LIST[133],FUNC_LIST[392],FUNC_LIST[395],FUNC_LIST[397],FUNC_LIST[398],FUNC_LIST[393],FUNC_LIST[399],FUNC_LIST[400],FUNC_LIST[401],FUNC_LIST[531],FUNC_LIST[437],FUNC_LIST[410],FUNC_LIST[442],FUNC_LIST[456],FUNC_LIST[418],FUNC_LIST[433],FUNC_LIST[425],FUNC_LIST[429],FUNC_LIST[434],FUNC_LIST[428],FUNC_LIST[431],FUNC_LIST[432],FUNC_LIST[426],FUNC_LIST[430],FUNC_LIST[409],FUNC_LIST[420],FUNC_LIST[502],FUNC_LIST[423],FUNC_LIST[448],FUNC_LIST[413],FUNC_LIST[415],FUNC_LIST[449],FUNC_LIST[411],FUNC_LIST[416],FUNC_LIST[421],FUNC_LIST[407],FUNC_LIST[408],FUNC_LIST[461],FUNC_LIST[462],FUNC_LIST[422],FUNC_LIST[459],FUNC_LIST[460],FUNC_LIST[406],FUNC_LIST[472],FUNC_LIST[477],FUNC_LIST[474],FUNC_LIST[476],FUNC_LIST[473],FUNC_LIST[533],FUNC_LIST[489],FUNC_LIST[514],FUNC_LIST[507],FUNC_LIST[515],FUNC_LIST[490],FUNC_LIST[501], }
		table.move(data, 1, #data, offset, target)
	end
	rt.store.string(MEMORY_LIST[0], 1048576,"\x02\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00X\x93\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00got workspace\x00\x00\x00,\x00\x10\x00\r\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00linux emulator\n\x00 \x06\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00got http\x84\x00\x10\x00\x08\x00\x00\x00https://takahirox.github.io/riscv-rust/resources/linux/rootfs.imghttps://takahirox.github.io/riscv-rust/resources/linux/opensbi/fw_payload.elfgot runservice\"\x01\x10\x00\x0e\x00\x00\x00called `Option::unwrap()` on a `None` value./target/wasm32-unknown-unknown/release/build/roblox_rs-b3864986c7f5a702/out/generated.rsTextBoxSurfaceGuiHttpServicec\x01\x10\x00Y\x00\x00\x00\x90\x87\x00\x00\x01\x00\x00\x00ScriptPartWorkspace\x00c\x01\x10\x00Y\x00\x00\x00\xd4\x87\x00\x00\x01\x00\x00\x00RunService\x00\x00c\x01\x10\x00Y\x00\x00\x00\xfd\x87\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00a Display implementation returned an error unexpectedly\x00\x11\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00/rustc/1b198b3a196442e14fb06978166ab46a4618d131/library/alloc/src/string.rs\x00\x88\x02\x10\x00K\x00\x00\x00\x9c\t\x00\x00\x0e\x00\x00\x00\x13\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x18\x00\x00\x00cannot access a Thread Local Storage value during or after destruction\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00/rustc/1b198b3a196442e14fb06978166ab46a4618d131/library/std/src/thread/local.rs\x00l\x03\x10\x00O\x00\x00\x00\xf6\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x1c\x00\x00\x00~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/default_terminal.rs\x00\xdc\x03\x10\x00c\x00\x00\x00\x19\x00\x00\x00%\x00\x00\x00\xdc\x03\x10\x00c\x00\x00\x00$\x00\x00\x00&\x00\x00\x00~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/memory.rs\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00!\x00\x00\x00\x13\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00,\x00\x00\x00\x17\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00:\x00\x00\x00\x17\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00G\x00\x00\x00\x16\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00d\x00\x00\x00&\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00d\x00\x00\x00\x12\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00p\x00\x00\x00*\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00p\x00\x00\x00\x16\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00\x7f\x00\x00\x00*\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00\x7f\x00\x00\x00\x16\x00\x00\x00`\x04\x10\x00Y\x00\x00\x00\x8d\x00\x00\x00\x16\x00\x00\x00~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/mmu.rsWidth must be 1, 2, 4, or 8. \x00\xc2\x05\x10\x00\x1d\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xf3\x00\x00\x00\x1e\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xe7\x00\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00U\x01\x00\x00\x1e\x00\x00\x00l\x05\x10\x00V\x00\x00\x00I\x01\x00\x00\t\x00\x00\x00Unknown memory mapping .(\x06\x10\x00\x17\x00\x00\x00?\x06\x10\x00\x01\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x9b\x01\x00\x00\x16\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x96\x01\x00\x004\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xec\x01\x00\x00\x16\x00\x00\x00AddressingMode SV48 is not supported yet.\x00\x00\x00l\x05\x10\x00V\x00\x00\x00W\x02\x00\x00\x11\x00\x00\x00l\x05\x10\x00V\x00\x00\x00c\x02\x00\x003\x00\x00\x00explicit panic\x00\x00l\x05\x10\x00V\x00\x00\x00\xb3\x02\x00\x00\x16\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xc3\x02\x00\x00\x16\x00\x00\x00l\x05\x10\x00V\x00\x00\x00o\x02\x00\x00\x12\x00\x00\x00Memory address must equals to or bigger than DRAM_BASE. \x0c\x07\x10\x008\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xec\x02\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xf1\x02\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xf7\x02\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\xfd\x02\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x03\x03\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x08\x03\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x0e\x03\x00\x00\t\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x14\x03\x00\x00\t\x00\x00\x00\xd0\r\xfe\xed\x00\x00\x06>\x00\x00\x008\x00\x00\x05<\x00\x00\x00(\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x05\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\r\x00\x00\x00\x1briscv-virtio\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x12\x00\x00\x00&riscv-virtio,qemu\x00\x00\x00\x00\x00\x00\x01chosen\x00\x00\x00\x00\x00\x03\x00\x00\x00\x1f\x00\x00\x00,root=/dev/vda ro console=tty50\x00\x00\x00\x00\x00\x03\x00\x00\x00\x0f\x00\x00\x005/uart@10000000\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01uart@10000000\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00A\x00\x00\x00\n\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00L\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00]\x008@\x00\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00m\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00\x1bns16550a\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01virtio_mmio@10001000\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00A\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00L\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00m\x00\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x03\x00\x00\x00\x0c\x00\x00\x00\x1bvirtio,mmio\x00\x00\x00\x00\x02\x00\x00\x00\x01cpus\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00q\x00\x98\x96\x80\x00\x00\x00\x01cpu-map\x00\x00\x00\x00\x01cluster0\x00\x00\x00\x00\x00\x00\x00\x01core0\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x84\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x01cpu@0\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x88\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x90cpu\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x9cokay\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00\x1briscv\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\r\x00\x00\x00\xa3rv64imafdcsu\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x0b\x00\x00\x00\xadriscv,sv39\x00\x00\x00\x00\x00\x01interrupt-controller\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\xb6\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x03\x00\x00\x00\x0f\x00\x00\x00\x1briscv,cpu-intc\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x88\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x01memory@80000000\x00\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00\x90memory\x00\x00\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00m\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01soc\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x0b\x00\x00\x00\x1bsimple-bus\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xdc\x00\x00\x00\x01interrupt-controller@c000000\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x88\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\xe3\x00\x00\x005\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00m\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00\xee\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x03\x00\x00\x00\x0c\x00\x00\x00\x1briscv,plic0\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\xb6\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01clint@2000000\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00\xee\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00m\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x03\x00\x00\x00\r\x00\x00\x00\x1briscv,clint0\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\t#address-cells\x00#size-cells\x00compatible\x00model\x00bootargs\x00stdout-path\x00interrupts\x00interrupt-parent\x00clock-frequency\x00reg\x00timebase-frequency\x00cpu\x00phandle\x00device_type\x00status\x00riscv,isa\x00mmu-type\x00#interrupt-cells\x00interrupt-controller\x00ranges\x00riscv,ndev\x00interrupts-extended\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x88\x03\x00\x00\x0c\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x89\x03\x00\x00\x0c\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x8a\x03\x00\x00\x0c\x00\x00\x00l\x05\x10\x00V\x00\x00\x00\x8b\x03\x00\x00\x0c\x00\x00\x00$\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffexplicit panic~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/cpu.rsf\x0e\x10\x00V\x00\x00\x00\x8a\x00\x00\x00$\x00\x00\x00Unknown instruction PC: WORD:\x00\x00\x00\xcc\x0e\x10\x00\x17\x00\x00\x00\xe3\x0e\x10\x00\x06\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00.\x01\x00\x00\x11\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00=\x01\x00\x00\x19\x00\x00\x00ADDADDIADDIWADDWAMOADD.DAMOADD.WAMOAND.DAMOAND.WAMOMAXU.DAMOMAXU.WAMOOR.DAMOOR.WAMOSWAP.DAMOSWAP.WANDANDIAUIPCBEQBGEBGEUBLTBLTUBNECSRRCCSRRCICSRRSCSRRSICSRRWCSRRWIDIVDIVUDIVUWDIVWEBREAKECALLFADD.DFCVT.D.LFCVT.D.SFCVT.D.WFCVT.D.WUFCVT.S.DFCVT.W.DFDIV.DFENCEFENCE.IFEQ.DFLDFLE.DFLT.DFLWFMADD.DFMUL.DFMV.D.XFMV.X.DFMV.X.WFMV.W.XFNMSUB.DFSDFSGNJ.DFSGNJX.DFSUB.DFSWJALJALRLBLBULDLHLHULR.DLR.WLUILWLWUMULMULHMULHUMULHSUMULWMRETORORIREMREMUREMUWREMWSBSC.DSC.WSDSFENCE.VMASHSLLSLLISLLIWSLLWSLTSLTISLTIUSLTUSRASRAISRAIWSRAWSRETSRLSRLISRLIWSRLWSUBSUBWSWURETWFIXORXORI\x00\x00\x00\x1c\x0f\x10\x00\x03\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3\x00\x00\x00\x1f\x0f\x10\x00\x04\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x13\x00\x00\x00#\x0f\x10\x00\x05\x00\x00\x00)\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x1b\x00\x00\x00(\x0f\x10\x00\x04\x00\x00\x00*\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;\x00\x00\x00,\x0f\x10\x00\x08\x00\x00\x00+\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00\x004\x0f\x10\x00\x08\x00\x00\x00,\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00\x00<\x0f\x10\x00\x08\x00\x00\x00-\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00`D\x0f\x10\x00\x08\x00\x00\x00.\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00`L\x0f\x10\x00\t\x00\x00\x00/\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00\xe0U\x0f\x10\x00\t\x00\x00\x000\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00\xe0^\x0f\x10\x00\x07\x00\x00\x001\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00@e\x0f\x10\x00\x07\x00\x00\x002\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00@l\x0f\x10\x00\t\x00\x00\x003\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00\x08u\x0f\x10\x00\t\x00\x00\x004\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00\x08~\x0f\x10\x00\x03\x00\x00\x005\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3p\x00\x00\x81\x0f\x10\x00\x04\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x13p\x00\x00\x85\x0f\x10\x00\x05\x00\x00\x007\x00\x00\x008\x00\x00\x00\x7f\x00\x00\x00\x17\x00\x00\x00\x8a\x0f\x10\x00\x03\x00\x00\x009\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00c\x00\x00\x00\x8d\x0f\x10\x00\x03\x00\x00\x00;\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00cP\x00\x00\x90\x0f\x10\x00\x04\x00\x00\x00<\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00cp\x00\x00\x94\x0f\x10\x00\x03\x00\x00\x00=\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00c@\x00\x00\x97\x0f\x10\x00\x04\x00\x00\x00>\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00c`\x00\x00\x9b\x0f\x10\x00\x03\x00\x00\x00?\x00\x00\x00:\x00\x00\x00\x7fp\x00\x00c\x10\x00\x00\x9e\x0f\x10\x00\x05\x00\x00\x00@\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00s0\x00\x00\xa3\x0f\x10\x00\x06\x00\x00\x00B\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00sp\x00\x00\xa9\x0f\x10\x00\x05\x00\x00\x00C\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00s \x00\x00\xae\x0f\x10\x00\x06\x00\x00\x00D\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00s`\x00\x00\xb4\x0f\x10\x00\x05\x00\x00\x00E\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00s\x10\x00\x00\xb9\x0f\x10\x00\x06\x00\x00\x00F\x00\x00\x00A\x00\x00\x00\x7fp\x00\x00sP\x00\x00\xbf\x0f\x10\x00\x03\x00\x00\x00G\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3@\x00\x02\xc2\x0f\x10\x00\x04\x00\x00\x00H\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3P\x00\x02\xc6\x0f\x10\x00\x05\x00\x00\x00I\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;P\x00\x02\xcb\x0f\x10\x00\x04\x00\x00\x00J\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;@\x00\x02\xcf\x0f\x10\x00\x06\x00\x00\x00K\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00\x10\x00\xd5\x0f\x10\x00\x05\x00\x00\x00M\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00\x00\x00\xda\x0f\x10\x00\x06\x00\x00\x00N\x00\x00\x00&\x00\x00\x00\x7f\x00\x00\xfeS\x00\x00\x02\xe0\x0f\x10\x00\x08\x00\x00\x00O\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00 \xd2\xe8\x0f\x10\x00\x08\x00\x00\x00P\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00\x00B\xf0\x0f\x10\x00\x08\x00\x00\x00Q\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00\x00\xd2\xf8\x0f\x10\x00\t\x00\x00\x00R\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00\x10\xd2\x01\x10\x10\x00\x08\x00\x00\x00S\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00\x10@\t\x10\x10\x00\x08\x00\x00\x00T\x00\x00\x00&\x00\x00\x00\x7f\x00\xf0\xffS\x00\x00\xc2\x11\x10\x10\x00\x06\x00\x00\x00U\x00\x00\x00&\x00\x00\x00\x7f\x00\x00\xfeS\x00\x00\x1a\x17\x10\x10\x00\x05\x00\x00\x00K\x00\x00\x00L\x00\x00\x00\x7fp\x00\x00\x0f\x00\x00\x00\x1c\x10\x10\x00\x07\x00\x00\x00K\x00\x00\x00L\x00\x00\x00\x7fp\x00\x00\x0f\x10\x00\x00#\x10\x10\x00\x05\x00\x00\x00V\x00\x00\x00L\x00\x00\x00\x7fp\x00\xfeS \x00\xa2(\x10\x10\x00\x03\x00\x00\x00W\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x070\x00\x00+\x10\x10\x00\x05\x00\x00\x00X\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfeS\x00\x00\xa20\x10\x10\x00\x05\x00\x00\x00Y\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfeS\x10\x00\xa25\x10\x10\x00\x03\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x07 \x00\x008\x10\x10\x00\x07\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00\x7f\x00\x00\x06C\x00\x00\x02?\x10\x10\x00\x06\x00\x00\x00^\x00\x00\x00&\x00\x00\x00\x7f\x00\x00\xfeS\x00\x00\x12E\x10\x10\x00\x07\x00\x00\x00_\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xffS\x00\x00\xf2L\x10\x10\x00\x07\x00\x00\x00`\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xffS\x00\x00\xe2S\x10\x10\x00\x07\x00\x00\x00a\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xffS\x00\x00\xe0Z\x10\x10\x00\x07\x00\x00\x00b\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xffS\x00\x00\xf0a\x10\x10\x00\x08\x00\x00\x00c\x00\x00\x00]\x00\x00\x00\x7f\x00\x00\x06K\x00\x00\x02i\x10\x10\x00\x03\x00\x00\x00d\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00\'0\x00\x00l\x10\x10\x00\x07\x00\x00\x00f\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfeS\x00\x00\"s\x10\x10\x00\x08\x00\x00\x00g\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfeS \x00\"{\x10\x10\x00\x06\x00\x00\x00h\x00\x00\x00&\x00\x00\x00\x7f\x00\x00\xfeS\x00\x00\n\x81\x10\x10\x00\x03\x00\x00\x00i\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00\' \x00\x00\x84\x10\x10\x00\x03\x00\x00\x00j\x00\x00\x00k\x00\x00\x00\x7f\x00\x00\x00o\x00\x00\x00\x87\x10\x10\x00\x04\x00\x00\x00l\x00\x00\x00m\x00\x00\x00\x7fp\x00\x00g\x00\x00\x00\x8b\x10\x10\x00\x02\x00\x00\x00n\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03\x00\x00\x00\x8d\x10\x10\x00\x03\x00\x00\x00o\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03@\x00\x00\x90\x10\x10\x00\x02\x00\x00\x00p\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x030\x00\x00\x92\x10\x10\x00\x02\x00\x00\x00q\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03\x10\x00\x00\x94\x10\x10\x00\x03\x00\x00\x00r\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03P\x00\x00\x97\x10\x10\x00\x04\x00\x00\x00s\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xf9/0\x00\x10\x9b\x10\x10\x00\x04\x00\x00\x00t\x00\x00\x00&\x00\x00\x00\x7fp\xf0\xf9/ \x00\x10\x9f\x10\x10\x00\x03\x00\x00\x00u\x00\x00\x008\x00\x00\x00\x7f\x00\x00\x007\x00\x00\x00\xa2\x10\x10\x00\x02\x00\x00\x00v\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03 \x00\x00\xa4\x10\x10\x00\x03\x00\x00\x00w\x00\x00\x00[\x00\x00\x00\x7fp\x00\x00\x03`\x00\x00\xa7\x10\x10\x00\x03\x00\x00\x00x\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3\x00\x00\x02\xaa\x10\x10\x00\x04\x00\x00\x00y\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3\x10\x00\x02\xae\x10\x10\x00\x05\x00\x00\x00z\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe30\x00\x02\xb3\x10\x10\x00\x06\x00\x00\x00{\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3 \x00\x02\xb9\x10\x10\x00\x04\x00\x00\x00|\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;\x00\x00\x02\xbd\x10\x10\x00\x04\x00\x00\x00}\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00 0\xc1\x10\x10\x00\x02\x00\x00\x00~\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3`\x00\x00\xc3\x10\x10\x00\x03\x00\x00\x00\x7f\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x13`\x00\x00\xc6\x10\x10\x00\x03\x00\x00\x00\x80\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3`\x00\x02\xc9\x10\x10\x00\x04\x00\x00\x00\x81\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3p\x00\x02\xcd\x10\x10\x00\x05\x00\x00\x00\x82\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;p\x00\x02\xd2\x10\x10\x00\x04\x00\x00\x00\x83\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;`\x00\x02\xd6\x10\x10\x00\x02\x00\x00\x00\x84\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00#\x00\x00\x00\xd8\x10\x10\x00\x04\x00\x00\x00\x85\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/0\x00\x18\xdc\x10\x10\x00\x04\x00\x00\x00\x86\x00\x00\x00&\x00\x00\x00\x7fp\x00\xf8/ \x00\x18\xe0\x10\x10\x00\x02\x00\x00\x00\x87\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00#0\x00\x00\xe2\x10\x10\x00\n\x00\x00\x00K\x00\x00\x00L\x00\x00\x00\xff\x7f\x00\xfes\x00\x00\x12\xec\x10\x10\x00\x02\x00\x00\x00\x88\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00#\x10\x00\x00\xee\x10\x10\x00\x03\x00\x00\x00\x89\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3\x10\x00\x00\xf1\x10\x10\x00\x04\x00\x00\x00\x8a\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfc\x13\x10\x00\x00\xf5\x10\x10\x00\x05\x00\x00\x00\x8b\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe\x1b\x10\x00\x00\xfa\x10\x10\x00\x04\x00\x00\x00\x8c\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;\x10\x00\x00\xfe\x10\x10\x00\x03\x00\x00\x00\x8d\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3 \x00\x00\x01\x11\x10\x00\x04\x00\x00\x00\x8e\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x13 \x00\x00\x05\x11\x10\x00\x05\x00\x00\x00\x8f\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x130\x00\x00\n\x11\x10\x00\x04\x00\x00\x00\x90\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe30\x00\x00\x0e\x11\x10\x00\x03\x00\x00\x00\x91\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3P\x00@\x11\x11\x10\x00\x04\x00\x00\x00\x92\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfc\x13P\x00@\x15\x11\x10\x00\x05\x00\x00\x00\x93\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfc\x1bP\x00@\x1a\x11\x10\x00\x04\x00\x00\x00\x94\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;P\x00@\x1e\x11\x10\x00\x04\x00\x00\x00\x95\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00 \x10\"\x11\x10\x00\x03\x00\x00\x00\x96\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3P\x00\x00%\x11\x10\x00\x04\x00\x00\x00\x97\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfc\x13P\x00\x00)\x11\x10\x00\x05\x00\x00\x00\x98\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfc\x1bP\x00\x00.\x11\x10\x00\x04\x00\x00\x00\x99\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;P\x00\x002\x11\x10\x00\x03\x00\x00\x00\x9a\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3\x00\x00@5\x11\x10\x00\x04\x00\x00\x00\x9b\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe;\x00\x00@9\x11\x10\x00\x02\x00\x00\x00\x9c\x00\x00\x00e\x00\x00\x00\x7fp\x00\x00# \x00\x00;\x11\x10\x00\x04\x00\x00\x00\x9d\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00 \x00?\x11\x10\x00\x03\x00\x00\x00\x9e\x00\x00\x00L\x00\x00\x00\xff\xff\xff\xffs\x00P\x10B\x11\x10\x00\x03\x00\x00\x00\x9f\x00\x00\x00&\x00\x00\x00\x7fp\x00\xfe3@\x00\x00E\x11\x10\x00\x04\x00\x00\x00\xa0\x00\x00\x00(\x00\x00\x00\x7fp\x00\x00\x13@\x00\x00f\x0e\x10\x00V\x00\x00\x009\x01\x00\x00\'\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00J\x01\x00\x00\x1e\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xc1\x01\x00\x00(\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xcb\x01\x00\x00,\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xf8\x01\x00\x000\x00\x00\x00f\x0e\x10\x00V\x00\x00\x009\x02\x00\x00(\x00\x00\x00Not implemented yet\x00f\x0e\x10\x00V\x00\x00\x00h\x02\x00\x00\x11\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00j\x02\x00\x00(\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xab\x02\x00\x00\x12\x00\x00\x00Unknown addressing_mode \n\x00\x00\x00\xd0\x1c\x10\x00\x18\x00\x00\x00\xe8\x1c\x10\x00\x01\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xf1\x02\x00\x00\x15\x00\x00\x00PC: \x0c\x1d\x10\x00\x03\x00\x00\x00\x0f\x1d\x10\x00\x01\x00\x00\x00X\x0e\x10\x00\x00\x00\x00\x00\x0f\x1d\x10\x00\x01\x00\x00\x00X\x0e\x10\x00\x00\x00\x00\x00, InstructionPageFault Trap!\n\x00\x00\x00\x0c\x1d\x10\x00\x03\x00\x00\x008\x1d\x10\x00\x1d\x00\x00\x00:\x00\x00\x00h\x1d\x10\x00\x01\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00K\x05\x00\x00 \x00\x00\x00,\x00\x00\x00\x84\x1d\x10\x00\x01\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00O\x05\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00q\x05\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8f\x05\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x93\x05\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x9e\x05\x00\x00 \x00\x00\x00(\x00\x00\x00\x84\x1d\x10\x00\x01\x00\x00\x00\xe0\x1d\x10\x00\x01\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xa2\x05\x00\x00 \x00\x00\x00)\x00\x00\x00\x04\x1e\x10\x00\x01\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00(\x06\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00,\x06\x00\x00 \x00\x00\x00zeroraspgptpt0t1t2s0s1a0a1a2a3a4a5a6a7s2s3s4s5s6s7s8s9s10s11t3t4t5t6Unknown register num \x00\x00\x00t\x1e\x10\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00u\x06\x00\x00\x0e\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8e\x06\x00\x00+\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8e\x06\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x99\x06\x00\x00\x1b\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x99\x06\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x80\x07\x00\x00+\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x80\x07\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x96\x07\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x96\x07\x00\x00A\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xa3\x07\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xa3\x07\x00\x00A\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb0\x07\x00\x00\"\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb0\x07\x00\x00E\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xbd\x07\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xbd\x07\x00\x00@\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xca\x07\x00\x00\"\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xca\x07\x00\x00D\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xd7\x07\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xd7\x07\x00\x00A\x00\x00\x00Unknown Privilege mode\x00\x00f\x0e\x10\x00V\x00\x00\x00\xae\x08\x00\x00,\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00E\t\x00\x009\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00E\t\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00o\t\x00\x003\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00o\t\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xcc\t\x00\x00&\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xcc\t\x00\x00O\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xfe\t\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xfe\t\x00\x00I\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x15\n\x00\x00\x17\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x16\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x1e\n\x00\x00(\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\"\n\x00\x00(\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00.\n\x00\x00.\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00.\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00<\n\x00\x00.\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00<\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00J\n\x00\x009\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00J\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00X\n\x00\x007\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00X\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00f\n\x00\x007\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00f\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xa5\n\x00\x003\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xa5\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb3\n\x00\x003\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb3\n\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x1a\x0b\x00\x00\x16\x00\x00\x00f\x0e\x10\x00V\x00\x00\x002\x0b\x00\x00+\x00\x00\x00f\x0e\x10\x00V\x00\x00\x002\x0b\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x83\x0b\x00\x00\x1b\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x83\x0b\x00\x00D\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb7\x0b\x00\x00&\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xb7\x0b\x00\x00O\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xcb\x0b\x00\x00$\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xcb\x0b\x00\x00M\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x15\x0c\x00\x00!\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x15\x0c\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00#\x0c\x00\x003\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00#\x0c\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xd7\x0c\x00\x00 \x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\xd7\x0c\x00\x00I\x00\x00\x00URET instruction is not implemented yet.f\x0e\x10\x00V\x00\x00\x00\xe1\x0c\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x00\r\x00\x00+\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x00\r\x00\x00\r\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00`\r\x00\x002\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00a\r\x00\x002\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00g\r\x00\x00%\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00i\r\x00\x00!\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00l\r\x00\x00!\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00m\r\x00\x00!\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00n\r\x00\x00!\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00q\r\x00\x00\"\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x89\r\x00\x00\x18\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8a\r\x00\x00/\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8c\r\x00\x00\'\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x8d\r\x00\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x91\r\x00\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x92\r\x00\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x93\r\x00\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x94\r\x00\x00\x15\x00\x00\x00f\x0e\x10\x00V\x00\x00\x00\x95\r\x00\x00\x15\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x000\x1e\x10\x004\x1e\x10\x006\x1e\x10\x008\x1e\x10\x00:\x1e\x10\x00<\x1e\x10\x00>\x1e\x10\x00@\x1e\x10\x00B\x1e\x10\x00D\x1e\x10\x00F\x1e\x10\x00H\x1e\x10\x00J\x1e\x10\x00L\x1e\x10\x00N\x1e\x10\x00P\x1e\x10\x00R\x1e\x10\x00T\x1e\x10\x00V\x1e\x10\x00X\x1e\x10\x00Z\x1e\x10\x00\\\x1e\x10\x00^\x1e\x10\x00`\x1e\x10\x00b\x1e\x10\x00d\x1e\x10\x00f\x1e\x10\x00i\x1e\x10\x00l\x1e\x10\x00n\x1e\x10\x00p\x1e\x10\x00r\x1e\x10\x00This elf file seems riscv-tests elf file. Running in test mode.\n\xe4$\x10\x00@\x00\x00\x00\nTest Passed with \x00\x00-%\x10\x00\x11\x00\x00\x00,%\x10\x00\x01\x00\x00\x00Test Failed with \x00\x00\x00P%\x10\x00\x11\x00\x00\x00,%\x10\x00\x01\x00\x00\x00~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/lib.rs\x00\x00t%\x10\x00V\x00\x00\x00\x97\x00\x00\x00\x10\x00\x00\x00t%\x10\x00V\x00\x00\x00\x97\x00\x00\x00#\x00\x00\x00t%\x10\x00V\x00\x00\x00\x97\x00\x00\x006\x00\x00\x00t%\x10\x00V\x00\x00\x00\x97\x00\x00\x00I\x00\x00\x00t%\x10\x00V\x00\x00\x00\x9b\x00\x00\x00\x1b\x00\x00\x00t%\x10\x00V\x00\x00\x00\xa3\x00\x00\x00\x1d\x00\x00\x00t%\x10\x00V\x00\x00\x00\xa4\x00\x00\x00\"\x00\x00\x00t%\x10\x00V\x00\x00\x00\xa5\x00\x00\x00\x1c\x00\x00\x00t%\x10\x00V\x00\x00\x00\xa6\x00\x00\x00\"\x00\x00\x00t%\x10\x00V\x00\x00\x00\xc5\x01\x00\x007\x00\x00\x00t%\x10\x00V\x00\x00\x00\xc6\x01\x00\x007\x00\x00\x00t%\x10\x00V\x00\x00\x00\xef\x01\x00\x007\x00\x00\x00t%\x10\x00V\x00\x00\x00\xf0\x01\x00\x009\x00\x00\x00t%\x10\x00V\x00\x00\x00\xf1\x01\x00\x007\x00\x00\x00t%\x10\x00V\x00\x00\x00\xf4\x01\x00\x00N\x00\x00\x00No happen\x00\x00\x00t%\x10\x00V\x00\x00\x00\xe1\x01\x00\x00\x12\x00\x00\x00t%\x10\x00V\x00\x00\x00\xc8\x01\x00\x00=\x00\x00\x00t%\x10\x00V\x00\x00\x00\xc9\x01\x00\x00;\x00\x00\x00t%\x10\x00V\x00\x00\x00\xcd\x01\x00\x00;\x00\x00\x00t%\x10\x00V\x00\x00\x00\xcd\x01\x00\x00[\x00\x00\x00t%\x10\x00V\x00\x00\x00\x98\x01\x00\x00$\x00\x00\x00t%\x10\x00V\x00\x00\x00\x92\x01\x00\x00&\x00\x00\x00t%\x10\x00V\x00\x00\x00\x8c\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00\x86\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00\x80\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00z\x01\x00\x00#\x00\x00\x00t%\x10\x00V\x00\x00\x00t\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00n\x01\x00\x00\"\x00\x00\x00t%\x10\x00V\x00\x00\x00h\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00b\x01\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00\xf4\x00\x00\x00!\x00\x00\x00t%\x10\x00V\x00\x00\x00\xee\x00\x00\x00\x1d\x00\x00\x00t%\x10\x00V\x00\x00\x00\xe8\x00\x00\x00\"\x00\x00\x00t%\x10\x00V\x00\x00\x00\xe2\x00\x00\x00\x1e\x00\x00\x00t%\x10\x00V\x00\x00\x00\xdc\x00\x00\x00\"\x00\x00\x00t%\x10\x00V\x00\x00\x00\xd6\x00\x00\x00\x1f\x00\x00\x00t%\x10\x00V\x00\x00\x00\xd0\x00\x00\x00\x1e\x00\x00\x00t%\x10\x00V\x00\x00\x00\xca\x00\x00\x00\x1d\x00\x00\x00t%\x10\x00V\x00\x00\x00\xc4\x00\x00\x00\x1e\x00\x00\x00t%\x10\x00V\x00\x00\x00\xbe\x00\x00\x00\x1d\x00\x00\x00t%\x10\x00V\x00\x00\x00\xb8\x00\x00\x00 \x00\x00\x00t%\x10\x00V\x00\x00\x00\xb2\x00\x00\x00 \x00\x00\x00t%\x10\x00V\x00\x00\x00\xac\x00\x00\x00\x1d\x00\x00\x00Unknown e_class:\x88(\x10\x00\x10\x00\x00\x00t%\x10\x00V\x00\x00\x00\xa0\x00\x00\x00\x12\x00\x00\x00This file does not seem ELF filet%\x10\x00V\x00\x00\x00\x98\x00\x00\x00\r\x00\x00\x00~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/riscv_emu_rust-0.2.0/src/device/virtio_block_disk.rs\x00\xe0(\x10\x00k\x00\x00\x00S\x00\x00\x002\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00S\x00\x00\x00\x1a\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00]\x00\x00\x00M\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00c\x00\x00\x00 \x00\x00\x00Virtio: No multi queue support yet.\x00\xe0(\x10\x00k\x00\x00\x00\xdb\x00\x00\x00\x15\x00\x00\x00Unknown ack \xc0)\x10\x00\x0c\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\x15\x01\x00\x00\x15\x00\x00\x00\xe0(\x10\x00k\x00\x00\x005\x01\x00\x00G\x00\x00\x00Length should be eight-byte aligned. \x00\x00\x00\xf4)\x10\x00%\x00\x00\x00\xe0(\x10\x00k\x00\x00\x002\x01\x00\x00\t\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00F\x01\x00\x00\x1a\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00C\x01\x00\x00\t\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00Q\x01\x00\x00\x17\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\\\x01\x00\x00.\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\\\x01\x00\x00\x16\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\x8f\x01\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00attempt to divide by zero\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\x9a\x01\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00attempt to calculate the remainder with a divisor of zeroThird descriptor should be write.\x00\x00\xe0(\x10\x00k\x00\x00\x00\xf0\x01\x00\x00\x19\x00\x00\x00Third descriptor length should be one.\x00\x00\xe0(\x10\x00k\x00\x00\x00\xf3\x01\x00\x00\x19\x00\x00\x00\xe0(\x10\x00k\x00\x00\x00\x07\x02\x00\x00 \x00\x00\x00Descript chain length should be three.\x00\x00\xe0(\x10\x00k\x00\x00\x00\x02\x02\x00\x00\r\x00\x00\x00\xa3\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xb3\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb3\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xb3\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00invalid argsH,\x10\x00\x0c\x00\x00\x00/rustc/1b198b3a196442e14fb06978166ab46a4618d131/library/core/src/fmt/mod.rs\x00\\,\x10\x00K\x00\x00\x005\x01\x00\x00\r\x00\x00\x00\x00assertion failed: mid <= self.len()\xb3\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xbd\x00\x00\x00called `Option::unwrap()` on a `None` valuemainlibrary/std/src/rt.rs\x1b-\x10\x00\x15\x00\x00\x00r\x00\x00\x00\r\x00\x00\x00AccessErrorlibrary/std/src/thread/mod.rsfailed to generate unique thread ID: bitspace exhausted\x00h-\x10\x007\x00\x00\x00K-\x10\x00\x1d\x00\x00\x00J\x04\x00\x00\r\x00\x00\x00\\,\x10\x00\x00\x00\x00\x00library/std/src/io/buffered/linewritershim.rs\x00\x00\x00\xc0-\x10\x00-\x00\x00\x00\x01\x01\x00\x00)\x00\x00\x00entity not foundpermission deniedconnection refusedconnection resethost unreachablenetwork unreachableconnection abortednot connectedaddress in useaddress not availablenetwork downbroken pipeentity already existsoperation would blocknot a directoryis a directorydirectory not emptyread-only filesystem or storage mediumfilesystem loop or indirection limit (e.g. symlink loop)stale network file handleinvalid input parameterinvalid datatimed outwrite zerono storage spaceseek on unseekable filefilesystem quota exceededfile too largeresource busyexecutable file busydeadlockcross-device link or renametoo many linksinvalid filenameargument list too longoperation interruptedunsupportedunexpected end of fileout of memoryother erroruncategorized error (os error )\x00\x00\x00\\,\x10\x00\x00\x00\x00\x00\xed0\x10\x00\x0b\x00\x00\x00\xf80\x10\x00\x01\x00\x00\x00already borrowed\xbe\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xbf\x00\x00\x00library/std/src/io/stdio.rs\x0041\x10\x00\x1b\x00\x00\x00}\x02\x00\x00\x13\x00\x00\x0041\x10\x00\x1b\x00\x00\x00\xea\x02\x00\x00\x14\x00\x00\x00failed printing to : \x00\x00\x00p1\x10\x00\x13\x00\x00\x00\x831\x10\x00\x02\x00\x00\x0041\x10\x00\x1b\x00\x00\x00\xfb\x03\x00\x00\t\x00\x00\x00stdout\x00\x00\xc0\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00formatter error\x00\xc81\x10\x00\x0f\x00\x00\x00(\x00\x00\x00\xc0\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00cannot recursively acquire mutex\xfc1\x10\x00 \x00\x00\x00library/std/src/sys/wasm/../unsupported/locks/mutex.rs\x00\x00$2\x10\x006\x00\x00\x00\x14\x00\x00\x00\t\x00\x00\x00library/std/src/sync/once.rsl2\x10\x00\x1c\x00\x00\x00\x95\x00\x00\x002\x00\x00\x00l2\x10\x00\x1c\x00\x00\x00\xd0\x00\x00\x00\x14\x00\x00\x00l2\x10\x00\x1c\x00\x00\x00\xd0\x00\x00\x001\x00\x00\x00lock count overflow in reentrant mutexlibrary/std/src/sync/remutex.rs\x00\x00\x00\xde2\x10\x00\x1f\x00\x00\x00\x91\x00\x00\x00\x0e\x00\x00\x00library/std/src/sys_common/thread_info.rs\x00\x00\x00\x103\x10\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00memory allocation of  bytes failed\x00\x00L3\x10\x00\x15\x00\x00\x00a3\x10\x00\r\x00\x00\x00library/std/src/alloc.rs\x803\x10\x00\x18\x00\x00\x00T\x01\x00\x00\t\x00\x00\x00cannot modify the panic hook from a panicking thread\xa83\x10\x004\x00\x00\x00library/std/src/panicking.rs\xe43\x10\x00\x1c\x00\x00\x00\x87\x00\x00\x00\t\x00\x00\x00\xe43\x10\x00\x1c\x00\x00\x00g\x02\x00\x00\x1f\x00\x00\x00\xe43\x10\x00\x1c\x00\x00\x00h\x02\x00\x00\x1e\x00\x00\x00\xc7\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\xc8\x00\x00\x00\xb3\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\xc9\x00\x00\x00\xb3\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\xca\x00\x00\x00\xcb\x00\x00\x00\xcc\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\xbe\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xcf\x00\x00\x00operation successfulOnce instance has previously been poisoned\x00\x00\x9c4\x10\x00*\x00\x00\x00one-time initialization may not be performed recursively\xd04\x10\x008\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x13\x00\x00\x00\x12\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x15\x00\x00\x00\x0c\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00\x15\x00\x00\x00\x0f\x00\x00\x00\x0e\x00\x00\x00\x13\x00\x00\x00&\x00\x00\x008\x00\x00\x00\x19\x00\x00\x00\x17\x00\x00\x00\x0c\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x19\x00\x00\x00\x0e\x00\x00\x00\r\x00\x00\x00\x14\x00\x00\x00\x08\x00\x00\x00\x1b\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x16\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00\x16\x00\x00\x00\r\x00\x00\x00\x0b\x00\x00\x00\x13\x00\x00\x00\x00.\x10\x00\x10.\x10\x00!.\x10\x003.\x10\x00C.\x10\x00S.\x10\x00f.\x10\x00x.\x10\x00\x85.\x10\x00\x93.\x10\x00\xa8.\x10\x00\xb4.\x10\x00\xbf.\x10\x00\xd4.\x10\x00\xe9.\x10\x00\xf8.\x10\x00\x06/\x10\x00\x19/\x10\x00?/\x10\x00w/\x10\x00\x90/\x10\x00\xa7/\x10\x00\xb3/\x10\x00\xbc/\x10\x00\xc6/\x10\x00\xd6/\x10\x00\xed/\x10\x00\x060\x10\x00\x140\x10\x00!0\x10\x0050\x10\x00=0\x10\x00X0\x10\x00f0\x10\x00v0\x10\x00\x8c0\x10\x00\xa10\x10\x00\xac0\x10\x00\xc20\x10\x00\xcf0\x10\x00\xda0\x10\x00Hash table capacity overflowX6\x10\x00\x1c\x00\x00\x00/cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.0/src/raw/mod.rs|6\x10\x00T\x00\x00\x00R\x00\x00\x00(\x00\x00\x00\xd0\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xd1\x00\x00\x00\xd2\x00\x00\x00\xd3\x00\x00\x00/rustc/1b198b3a196442e14fb06978166ab46a4618d131/library/core/src/fmt/mod.rsinvalid args\x00C7\x10\x00\x0c\x00\x00\x00\xf86\x10\x00K\x00\x00\x005\x01\x00\x00\r\x00\x00\x00library/alloc/src/raw_vec.rscapacity overflow\x00\x00\x00\x847\x10\x00\x11\x00\x00\x00h7\x10\x00\x1c\x00\x00\x00\x16\x02\x00\x00\x05\x00\x00\x00called `Option::unwrap()` on a `None` valuelibrary/alloc/src/ffi/c_str.rs\x00\x00\x00\xdb7\x10\x00\x1e\x00\x00\x00\x1b\x01\x00\x007\x00\x00\x00a formatting trait implementation returned an error\x00\xd4\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00library/alloc/src/fmt.rsP8\x10\x00\x18\x00\x00\x00b\x02\x00\x00 \x00\x00\x00called `Result::unwrap()` on an `Err` value\x00\xd4\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xd5\x00\x00\x00library/alloc/src/sync.rs\x00\x00\x00\xb48\x10\x00\x19\x00\x00\x00o\x01\x00\x002\x00\x00\x00) should be < len (is )removal index (is \x00\x00\x00\xf78\x10\x00\x12\x00\x00\x00\xe08\x10\x00\x16\x00\x00\x00\xf68\x10\x00\x01\x00\x00\x00invalid args$9\x10\x00\x0c\x00\x00\x00library/core/src/fmt/mod.rsBorrowMutError\x00\x00\x00$9\x10\x00\x00\x00\x00\x00:\x00\x00\x00$9\x10\x00\x00\x00\x00\x00l9\x10\x00\x01\x00\x00\x00l9\x10\x00\x01\x00\x00\x00panicked at :\n\x00\x00\xda\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xdb\x00\x00\x00index out of bounds: the len is  but the index is \x00\x00\xa89\x10\x00 \x00\x00\x00\xc89\x10\x00\x12\x00\x00\x00==!=matchesassertion failed: `(left  right)`\n  left: ``,\n right: ``\x00\xf79\x10\x00\x19\x00\x00\x00\x10:\x10\x00\x12\x00\x00\x00\":\x10\x00\x0c\x00\x00\x00.:\x10\x00\x01\x00\x00\x00`: \x00\xf79\x10\x00\x19\x00\x00\x00\x10:\x10\x00\x12\x00\x00\x00\":\x10\x00\x0c\x00\x00\x00P:\x10\x00\x03\x00\x00\x00: \x00\x00$9\x10\x00\x00\x00\x00\x00t:\x10\x00\x02\x00\x00\x00} }0xlibrary/core/src/fmt/num.rs\x8d:\x10\x00\x1b\x00\x00\x00i\x00\x00\x00\x17\x00\x00\x000001020304050607080910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989989\x10\x00\x1b\x00\x00\x005\x01\x00\x00\r\x00\x00\x00falsetruelibrary/core/src/slice/memchr.rs\x00\x00\x00\x99;\x10\x00 \x00\x00\x00\xad\x00\x00\x00\t\x00\x00\x00\x99;\x10\x00 \x00\x00\x00\x91\x00\x00\x00\x1e\x00\x00\x00range start index  out of range for slice of length \xdc;\x10\x00\x12\x00\x00\x00\xee;\x10\x00\"\x00\x00\x00range end index  <\x10\x00\x10\x00\x00\x00\xee;\x10\x00\"\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x04\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ErrorLayoutError")
end
return function(wasm)
	FUNC_LIST[0] = wasm["env"].func_list["print"]
	FUNC_LIST[1] = wasm["env"].func_list["event_run_service_heartbeat_on_heartbeat"]
	FUNC_LIST[2] = wasm["env"].func_list["static_function_vector_3_new_new_with_position"]
	FUNC_LIST[3] = wasm["env"].func_list["drop_pointer"]
	FUNC_LIST[4] = wasm["env"].func_list["static_function_color_3_from_rgb"]
	FUNC_LIST[5] = wasm["env"].func_list["static_function_u_dim_2_from_scale"]
	FUNC_LIST[6] = wasm["env"].func_list["get_game"]
	FUNC_LIST[7] = wasm["env"].func_list["method_service_provider_get_service"]
	FUNC_LIST[8] = wasm["env"].func_list["property_setter_gui_object_size_set_size"]
	FUNC_LIST[9] = wasm["env"].func_list["property_setter_text_box_font_set_font"]
	FUNC_LIST[10] = wasm["env"].func_list["property_getter_text_box_text"]
	FUNC_LIST[11] = wasm["env"].func_list["property_setter_text_box_text_set_text"]
	FUNC_LIST[12] = wasm["env"].func_list["property_setter_text_box_text_size_set_text_size"]
	FUNC_LIST[13] = wasm["env"].func_list["property_setter_text_box_text_x_alignment_set_text_x_alignment"]
	FUNC_LIST[14] = wasm["env"].func_list["property_setter_text_box_text_y_alignment_set_text_y_alignment"]
	FUNC_LIST[15] = wasm["env"].func_list["property_setter_surface_gui_base_adornee_set_adornee"]
	FUNC_LIST[16] = wasm["env"].func_list["property_setter_surface_gui_base_face_set_face"]
	FUNC_LIST[17] = wasm["env"].func_list["property_setter_surface_gui_pixels_per_stud_set_pixels_per_stud"]
	FUNC_LIST[18] = wasm["env"].func_list["property_setter_surface_gui_sizing_mode_set_sizing_mode"]
	FUNC_LIST[19] = wasm["env"].func_list["method_http_service_get_async"]
	FUNC_LIST[20] = wasm["env"].func_list["property_setter_base_part_anchored_set_anchored"]
	FUNC_LIST[21] = wasm["env"].func_list["property_setter_base_part_can_collide_set_can_collide"]
	FUNC_LIST[22] = wasm["env"].func_list["property_setter_base_part_can_query_set_can_query"]
	FUNC_LIST[23] = wasm["env"].func_list["property_setter_base_part_color_set_color"]
	FUNC_LIST[24] = wasm["env"].func_list["property_setter_base_part_material_set_material"]
	FUNC_LIST[25] = wasm["env"].func_list["property_setter_base_part_position_set_position"]
	FUNC_LIST[26] = wasm["env"].func_list["property_setter_base_part_size_set_size"]
	FUNC_LIST[27] = wasm["env"].func_list["property_setter_instance_parent_set_parent"]
	FUNC_LIST[28] = wasm["env"].func_list["static_function_internal_new_instance_new"]
	FUNC_LIST[29] = wasm["env"].func_list["error"]
	run_init_code()
	memory_at_0 = MEMORY_LIST[0]
	return {
		func_list = {
			["main"] = FUNC_LIST[49],
			["__heap_alloc_string"] = FUNC_LIST[114],
			["__heap_alloc_vec"] = FUNC_LIST[115],
			["__drop_box_dyn_fn"] = FUNC_LIST[116],
			["hook"] = FUNC_LIST[117],
		},
		table_list = {
		},
		memory_list = {
			["memory"] = MEMORY_LIST[0],
		},
		global_list = {
			["__data_end"] = GLOBAL_LIST[1],
			["__heap_base"] = GLOBAL_LIST[2],
		},
	}
end
 ]===]
_cc239723a627cd433ffbbe0fdacfcfb0.Parent = _275170f7ba107d65bf3497952d51abbe
getfenv(0).root = _2d2735c1343ce0caf305eb857559723a
type Runtime = {
	getPatchedEnvironment: (script: LuaSourceContainer) -> (),
	loadedModules: {
		[string]: { any },
	},
	main: () -> (),
	require: (script: ModuleScript) -> ...any,
	runScript: (script: LuaSourceContainer) -> (),
}

local runtime: Runtime = {} :: any
if getfenv().__runtime then
	runtime = getfenv().__runtime
else
	local HttpService = game:GetService("HttpService")
	local root: Model = getfenv(0).root
	local sourceMap = getfenv(0).sourceMap
	runtime.loadedModules = {}
	local nilParentedInstance = Instance.new("Script")
	nilParentedInstance.Name = "<nil>"
	nilParentedInstance.Parent = nil

	local function wrappedNS(source: Script | string, parent: Instance)
		if typeof(source) == "string" then
			return getfenv().NS(source, parent)
		elseif typeof(source) == "Instance" then
			if source:IsA("Script") then
				-- prevent tampering
				local accessToken = HttpService:GenerateGUID(false)
				local sourcePatch = string.format(
					[[
						--- rojo-script environment tampering ---
						(function()
							repeat task.wait() until script.Parent:IsA("Actor")
							local communication = script.Parent
							local token = "%s"
							local c
							c = communication:BindToMessage(token .. "| runtime::getPatchedEnvironment<return>", function(environment)
								setfenv(0, environment);
								c:Disconnect()
							end)
							communication:SendMessage(token .. "| runtime::getPatchedEnvironment", script)
						end)()

					]],
					accessToken
				)
				-- transfer instances from source to new script
				-- nil parent prevents execution for localscripts

				local created = getfenv().NLS(sourcePatch .. sourceMap[source], nilParentedInstance)
				local connection
				local communication = Instance.new("Actor")
				created.Disabled = true
				-- TODO: Make adding instances to the source safe.
				for _, v in source:GetChildren() do
					v.Parent = created
				end
				-- run it
				created.Disabled = false
				connection = communication:BindToMessage(
					accessToken .. "| runtime::getPatchedEnvironment",
					function(script)
						if script ~= created then
							return
						end
						communication:SendMessage(
							accessToken .. "| runtime::getPatchedEnvironment<return>",
							runtime.getPatchedEnvironment(script)
						)
						created.Parent = parent
						connection:Disconnect()
					end
				)
				-- take 20 cycles to ensure script has been ran
				local amplify = table.create(20, task.defer)
				created.Parent = parent
				pcall(amplify, function()
					created.Parent = communication
				end)
				return created
			else
				error("expected class Script" .. " but got " .. source.ClassName)
			end
		else
			error("expected type string | Script" .. " but got " .. typeof(source))
		end
	end

	local function wrappedNLS(source: LocalScript | string, parent: Instance)
		if typeof(source) == "string" then
			return getfenv().NLS(source, parent)
		elseif typeof(source) == "Instance" then
			if source:IsA("LocalScript") then
				-- transfer instances from source to new script
				-- nil parent prevents execution for localscripts

				local created = getfenv().NLS(sourceMap[source], nilParentedInstance)
				created.Disabled = true
				-- TODO: Make adding instances to the source safe.
				for _, v in source:GetChildren() do
					v.Parent = created
				end
				-- run it
				created.Disabled = false
				created.Parent = parent
				return created
			else
				error("expected class LocalScript" .. " but got " .. source.ClassName)
			end
		else
			error("expected type string | LocalScript" .. " but got " .. typeof(source))
		end
	end

	function runtime.getPatchedEnvironment(script)
		local e
		e = setmetatable({
			script = script,
			getfenv = function()
				return e
			end,
			require = runtime.require,
			NLS = wrappedNLS,
			NS = wrappedNS,
			__runtime = runtime,
			realScript = getfenv(0).script,
		}, {
			__index = getfenv(0),
			__metatable = "The metatable is locked",
		})
		return e
	end

	runtime.require = function(script): ...any
		if typeof(script) == "number" then
			return require(script)
		end
		if not script:IsA("ModuleScript") then
			return error("Instance is not a ModuleScript")
		end
		if runtime.loadedModules[script] then
			return unpack(runtime.loadedModules[script])
		end
		local source = sourceMap[script]
		local environment = runtime.getPatchedEnvironment(script)
		local fn: ((...any) -> ...any)?, e: string? = loadstring(source)
		if not fn then
			error("Error loading module, loadstring failed " .. if e then e else "no error")
		else
			setfenv(fn, environment)
			runtime.loadedModules[script] = { fn() }
			return unpack(runtime.loadedModules[script])
		end
	end

	local function runScript(script: LuaSourceContainer)
		local source = sourceMap[script]
		local fn, e = loadstring(source)
		local environment = runtime.getPatchedEnvironment(script)
		if not fn then
			error("Error running script, loadstring failed", e)
		end
		setfenv(fn, environment)
		coroutine.wrap(fn)()
	end

	local safeContainer = Instance.new("Script")
	safeContainer.Name = "Script"
	root.Parent = safeContainer
	safeContainer.Parent = workspace

	function runtime.main()
		-- getchildren is impossible for rojo projects
		for _, instance in root:GetDescendants() do
			if instance:IsA("Script") and not instance.Disabled then
				runScript(instance)
			end
		end
	end

	runtime.runScript = runScript
	runtime.main()
end
